cmd,nl
find . -exec printf '%s\0' {} \;,print the names of all files and directories found in the current directory tree
"find . ! -name ""a.txt"" -print","search the current directory tree for files whose names are not ""a.txt"""
"find . -type f -name ""*.txt"" -exec sed 's/Linux/Linux-Unix/2' thegeekstuff.txt",find & substitute only 2nd occurrence of a word using sed s//2 in all .txt files
find . -name 'my*' -type f -ls,print extended file information for regular files found under the home directory whose names start with my
find /home/username/public_html/sites/all/modules -type f -exec chmod 640 {} +,find all files under /home/username/public_html/sites/all/modules and set their permission to 640
ifconfig | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p',finds ip addresses of all network interfaces.
rsync -avz --rsh='ssh -p3382' source root@remote_server_name:/opt/backups,"archive ""source"" to ""root@remote_server_name:/opt/backups"" via ssh on port 3382 and compress data during transmission"
"find . –name ""*.txt"" –mtime 5",find text files modified less than 5 days ago
find ./ -path ./beta/* -prune -o -iname example.com -print,exclude directory from find . command
"find /path/to/dir -type f | sed -r 'p;s:.*/(.*)/.*:\1:' | xargs -n 2 sh -c 'sed -i ""s/^/$1 /"" $0'",search for a file in current folder and append the file name at the starting of all the lines in the file
"find . -name ""*.cpp"" | while read f; do dirname ""$f"" ; done | sort -u",search for al cpp files in current folder and display distinct parent directory of these files in sorted order
"ifconfig | grep -oP ""(?<=inet addr:).*?(?=  Bcast)""",gets ip addresses of all active network interfaces.
"find ""$path_to_folders"" -name 'm?' -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \; -exec sh -c ""mv {}.mbox/*.emlx {}.mbox/Messages"" \;",move each of the 'm?' directories in $path_to_folders to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory then move all *.emlx files into this directory
grep -v '^\s*$' *.py | wc,counts non-blank lines (lines with spaces are considered blank) in all *.py files in a current folder.
find ./ -user root,find root's files in the current directory tree
false | tee /dev/null,saves value '1' in the $pipestatus variable and returns 0.
find ~ -name '*.xbm',"display all the files in the home folder which end with "".xbm"""
find . -type f -atime -1 -exec ls -l {} \;,find all the normal/regular files in the current folder which have been accessed in the last 24 hours and display a long listing of them
dirs=($(find . -type d)),search for all the directories in the current folder and save the output to a variable
split --lines=50000 /path/to/large/file /path/to/output/file/prefix,"split ""/path/to/large/file"" into files with at most 50000 lines and use prefix ""/path/to/output/file/prefix"""
"find /home/u20806/public_html -name ""robots.txt"" -o -maxdepth 1 -mmin +5 -type f -name ""*.txt"" -delete","remove all *.txt files, except robots.txt, under the given directory modified more than 5 minutes ago"
find /etc -name '*.conf',find files with the extension .conf in the /etc directory
find . -mindepth 1 -mmin -60 | xargs -r ls -ld,"list all files from the current directory tree that were modified less than 60 minutes ago, omitting ""."""
"curl --data-urlencode ""paramName=param"" www.example.com","download contents from website ""www.example.com"" using url-encoding ""paramname=param"""
cut -d: -f1 /etc/group,print only group names from /etc/group.
"find . -name ""*.csv""",locate all *.csv files under the current directory tree
rsync -avz foo:src/bar /data/tmp,"archive ""src/bar"" on host ""foo"" to local directory ""/data/tmp"""
pstree | grep MDSImporte | less -SEX,"prints processes with 'mdsimporte' in name, cutting off  lines longer than screen width, exiting from less after end of output and saving printed lines on terminal after exit."
find . -mtime -7 -type f,find all files that have been modified in the last seven days.
"find foo bar -name ""*.java""",search directory trees foo and bar for .java files
chmod a+x ComputeDate col printdirections,"add execute permission to ""computedate"", ""col"", and ""printdirections"" for all users"
find . -type f -iname '*.jpg' -print0,find all files with the extension jpg regardless of case
"find . -name ""*.swp""",find all *.swp files/directories under current directory
find . -type l -print | xargs ls -ld | awk '{print $10}',print the files to which symbolic links in the current directory point
time find . -type f -exec stat {} + > /dev/null,display in an optimized way file status for all regular files in the current directory tree suppressing error messages
"find . | egrep -v ""(exclude3|exclude4)"" | sort","print the list of files in the current directory tree excluding those whose paths contain ""exclude3"" or ""exclude4"""
find . -type f -exec basename {} \;,list the names of all files under current directory
find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d,"list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names excluding the paths */generated/* and */deploy/*"
find ~ -mmin -90,find all files in and below the home directory that have been modified in the last 90 minutes
"find . -name ""pattern"" | xargs git diff --","find files in the current directory tree that match ""pattern"" and run ""git diff"" on them"
comm -23 a.txt b.txt | wc -l,"count the number of unique lines in sorted file ""a.txt"" compared to sorted file ""b.txt"""
"find /home/john -name ""landof*"" -type f -print",find all regular files under '/home/john' directory tree that start with 'landof' in their names
"find /home -name ""*.c""",find all *.c files located under /home and below
find . -type d -name build,find all directories named build under the current directory
"find . -type f -name ""*.txt"" -delete",delete all the text files in the current folder
"find /path/to/folder -name fileName.txt -not -path ""*/ignored_directory/*""",find files named 'filename.txt' under '/path/to/folder' directory tree ignoring 'ignored_directory'
find -L . -type f -perm -a=x,find regular files in the current directory tree that have all executable bits set
"find -print0 | tr ""\0"" "":""",find all files/directories under current directory with null character as the delimiter and then replace the null characters with :
"find /usr/share/doc -name ""copyright""","locate all ""copyright"" files under and below /usr/share/doc"
"grep -r OPEN * | awk '{split($1, path, "":""); print path[1]}' | xargs -I{} dirname {}",recursively finds all files containing text 'open' and prints folder where they are placed.
find . -name mmm -prune -o -type f -print,display all the regular/normal files in the current folder excluding the files with the name mmm
cat ips | xargs -n1 echo ping -c 2,"print ""echo ping -c 2"" on each string in file 'ips'"
cp -rf --remove-destination `readlink file` file,"copy file or folder linked to by ""file"" to ""file"""
find . -type d -exec du -sk {} \; |  sort -n -k 1,show directory sizes in kb and sort to give the largest at the end
find . -exec sh -c 'echo {} | grep -qi /path/to/something[^/]*$' \; -print,find files/directories under current directory that matches the regex /path/to/something[^/]*$  in their paths
find home/magie/d2 -type f -perm +111 | wc -l,display the count of regular files under 'home/magie/d2' directory tree which have execute permission to all the users
find . -regex '.+\.php',find all the php files in current folder using regular expressions
find . -type f | awk -F/ '{print $NF}' | sort -f | uniq -i -d,print a list of all duplicate case insensitive filenames in the current directory tree
find . -type f -not -path '*/not-from-here/*' -exec cp '{}' '/dest/{}' \;,copy all files in current directory that do not match */not-from-here/* in their paths to /dest
chown -R owner:owner public_html,"recursively change the owner and group of all files in ""public_html"" to ""owner"""
cat results2.txt | xargs -I{} ln -s {} ~/newlinks,"create a symbolic link in directory ""~/newlinks"" for each file listed in ""results2.txt"""
find . -name '*.txt',find all *.txt files/directories under current directory
ps -ef | grep myProcessName | grep -v grep | awk '{print $2}' | xargs kill -9,"immediately terminate all processes whose command or arguments match ""myprocessname"""
"find -name ""*.gz"" | wc -l",count the number of .gz files in the current directory tree
find . -executable,find all the files in the current folder which have execute permission
find . -type f -name '*.c' -exec cat {} \; | sed '/^\s*#/d;/^\s*$/d;/^\s*\/\//d' | wc -l,"recursively counts non-blank, non-comment lines in all *.c files in a current folder."
find $HOME -iname '*.ogg' -atime +30,locate all ogg files that reside in the home directory and have not been accessed in the past 30 days
"mv ""${myargs[@]}""","expand bash array ""myargs"" as arguments to ""mv"""
od -t fD file,"display a dump of ""file"" as floating point values of double size"
grep -m1 -ao '[0-9]' /dev/urandom | sed s/0/10/ | head -n1,prints a random number between 1 and 10
find /bin -type f -follow | xargs    ls -al | awk ' NF==9 { print $3 }'|sort -u,find the unique owners of all the files in the /bin directory
find -name '*.js' -not \( -path './node_modules/*' -o -path './vendor/*' \),find -name '*.js' -not -path './node_modules/*' -not -path './vendor/*'
find <path> -name '.*' -prune -o -type d -print,find all directories under <path> excluding hidden directories and their subdirectories
find $backup_path/* -name *.sql -mtime +30 -exec rm {} \;,remove all *.sql files in the $backup_path directory tree that were last modified more than 30 days ago
md5=$(md5sum $item | cut -f1 -d\ ),calculate md5 sum of file $item and save it to variable 'md5'
find /root/ -path '/root/work' -prune -o -name myfile -type f -print,"search the /root directory recursively for the regular file named ""myfile"" ignoring /root/work/"
SCRIPT=$( readlink -m $( type -p $0 )),"save absolute path of the script filename in variable ""script"""
gzip -dc path/to/test/file.gz | grep -P 'my regex' | grep -vP 'other regex' | split -dl1000000 - file,"decompress ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" and not matching ""other regex"" to files with a 1000000 line limit"
find / -perm -644,find all files that have additional permissions
find ~,list all your files including everything in sub-directories
find / -nouser -print,find files owned by nonexistent users
ping -c 1 192.168.1.$COUNTER | grep 'ms',"send one ping request to host with local address in the 192.168.1.x range, with last number specified by variable ""counter"", and output only lines containing ""ms"" to standard output."
find ./ -type f -size 0c -print | xargs rm,remove all empty regular files under the current directory and below
x=$(whoami),"save the user name of the current user to variable ""x"""
"find /Applications/ -name ""*.java"" -print0 | xargs -0 grep -i ""TODO""",search the .java files from the /applications/ directory tree for todo lines
"who | awk '{print $3 "" "" $4 "" ""$1}' | sort | head -1",print the login time and user of the first person who logged in
ping -a 10.100.3.104,"send an audible ping to ""10.100.3.104"""
"sort -nrk 2,2",numerically sort standard input by the second word of each line and output from greatest value to least value
find -name ‘*exp_to_find_in_folders*’ -exec rename “s/exp_to_find_for_replacement/exp_to_replace/” {} \;,"replace ""exp_to_find_for_replacement"" with ""exp_to_replace"" for all the files in the current folder"
find / -nouser -ok rm {} \;,"remove files from the file system that are owned by nobody, asking the user before each removal"
CC=$(which gcc) ./configure,"run ""./configure"" with a new environment variable cc set to the full path of the command 'gcc'"
dig NS +aaonly com.,"request ns record for com. domain, receiving only authoritative answers"
mkdir subdirectory,"make directory ""subdirectory"""
mv `ls *.boo` subdir,"move all files and directories matching ""*.boo"" in the current directory to ""subdir"""
"cat data.csv | rev | cut -d, -f-5 | rev",remove all but 5 last comma-separated fields from each line in 'data.csv'
find . -name '*.py' -exec grep -n -f search_terms.txt '{}' \;,find all *.py files under current directory and search for regular expressions taken from the search_terms.txt file
echo $name | tr -c -d 0-9,"print only digits in variable ""$name"""
find . -name \*.py | xargs grep some_function,"search all .py files in the current directory tree for ""some_function"""
tail -F xxxx | tee -a yyyy &,"write the lines appended to ""xxxx"" as it appears to the console and append to ""yyyy"" in the background"
"find $d -name '*.js' | grep -v "" """,find all .js files in the $d directory tree whose pathnames do not contain whitespaces
find / -perm 0551,find all the sticky bit files whose permission are 551
"find . -name ""*jpg"" -exec du -k {} \; | awk '{ total += $1 } END { print total/1024 "" Mb total"" }'",calculate the total size of all *.jpg files in the directory tree
find / -user admin -print,search the system for files and directories owned by user `admin'
find /home/backups -type f \( -name \*.tgz -o -name \*.gz \) -print0 | xargs -0 ls -t | tail -1 | xargs rm,find all the regular files with '.tgz' and '.gz' extensions and delete the oldest file under '/home/backups' directory tree
find ./ -mtime +3,find all the files in the current folder that have not been modified in the last 24*3 hours
find /var/www/html -type d -perm 777 -print -exec chmod 755 {} \;,"find all directories with permissions 777 under and below /var/www/html, and change their permissions to 755"
sort file -o !#^,"sort file ""file"" by line"
brew reinstall git,uninstalls and then installs git formula.
tail -1 $file1 | tee -a $file2,"print the last line of ""$file1"" to the console and append to ""$file2"""
"find .  -newermt ""1 hour ago""",display all the files in the current folder which have been modified in one hour ago
find <directory> -type f -size -1M -print0  | xargs -0 rm,remove files that are less than 1mb in size under <directory>
shift,shifts the positional parameters to the left by 1.
"sudo ln -f ""findpdftext"" /usr/local/bin","force create a hard link in ""/usr/local/bin"" to ""findpdftext"""
"seq -f ""%02g"" 30",print numbers from 1 to 30 with 0 padding to a width of 2
find . -name '*.php' -type f | sort | xargs wc -l,counts lines in each *.php file sorted by file path.
mv $(grep -l 'Subject: \[SPAM\]' | awk -F ':' '{print $1}') your_file,"move all files that contain ""subject: \[spam\]"" to ""your_file"""
find . type f -print | fgrep -f file_list.txt,"find all the normal/regular files in the current folder which are present in the pattern file ""file_list.txt"""
read -n1,"read one character from standard input into variable ""reply"""
chmod +x bar,"make ""bar"" executable"
find . -name '*.java' -mtime +7 -print0 | xargs -0 grep 'swt',"search all .java files residing in the current directory tree and modified at least 7 days ago for string ""swt"""
"find /home -user exampleuser -mtime 7 -iname "".db""",find all files with '.db' extension (case insensitive) that belong to user 'exampleuser' and were modified exactly 7 days ago under '/home' directory tree
"awk '{print ""result ="",$0}' <(rev file)","for each line in 'file', print ""result = "" followed by the line backwards."
find . -size +1M,find all files in the current directory tree whose size is greater than 1mb
find . -size 0 -printf '%M %n %u %g %s %Tb\n \b%Td %Tk:%TM %p\n',display all the details of empty files in current folder
rsync -avzn --list-only --include 'company1/' --include 'company1/unique_folder1/***' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data,"copy specific sub-directories ""company1/"" and ""company1/unique_folder1"" from ""user@server.com:/path/to/old/data/"" to ""/path/to/new/data"" via ssh"
ssh -p 10022 localhost,ssh into localhost on port 10022
xhost +si:localuser:`whoami`,append the current user to the server access control list for x
find . -name '*js' -exec grep -n 'some string' {} \;,search for 'some string' in all *js files under current directory and show the matched lines with line numbers
"paste <(mount | awk 'tolower($0) ~ /\/dev\/sd*/ {print NR ""\t"" $1 ""\t"" $3}') <(/usr/sbin/smartctl -a /dev/sdb | awk '/Device:/ {print $2}')","print list of disk and mountpoint of disks matching ""/dev/sd*"""
"find / -print0 | perl -ln0e 'print ""found $_"" if -p'",show all files in the entire file system
cat /dev/urandom | tr -dC '[:graph:]',"print only printable characters from ""/dev/urandom"""
find . -name 'Lemon*.mp3' -exec mplayer {} ';',find all lemon*.mp3 files under current directory and run mplayer with these files
seq 2000 65000 | sort -R | head -n 1,print a random number from 2000 to 65000
"echo ""hello world"" | tee >(wc)","write ""hello world"" to the console and print number of bytes, symbols and strings in provided input."
"find . -name "".*\.i""","find all the files in the current directory ending with "".i"""
"find . -name ""*.txt"" -exec rm {} +",remove all .txt files in and below the current directory
"sudo date --set=""Sat May 11 06:00:00 IDT 2013""",set the system date to sat may 11 06:00:00 idt 2013
screen -r,list screen ids
"FinalDate=$(date -u -d ""$string2"" +""%s"")",save the utc date represented by time string $sting2 as the seconds since epoch to variable 'finaldate'
seq -s+ -5 10 | bc,calculate the sum of all the numbers from -5 to 10
dig @server hostname.bind ch txt,print txt record with server`s hostname from nameserver 'server'
find . -type f -not -iname '*/not-from-here/*' -exec cp '{}' '/dest/{}' ';',copies all files under the current directory but ones with '*/not-from-here/*' in path to the '/dest/' directory.
find data/ -name filepattern-*2009* -print > filesOfInterest.txt,print a list of all filepattern-*2009* files/directories under data/ to filesofinterest.txt file
history,print command history
find . -size +10k -exec ls -ls {} \+ | sort -nr,"display a long listing of all the files in the current folder in sorted order, which are bigger than 10kb"
find . -type f \( -exec grep -q '[[:space:]]' {} \; -o -print \),find all regular files in the current directory tree that do not contain a whitespace
"find /work \( -fprint /dev/stderr \) , \( -name 'core' -exec rm {} \; \)","remove files named ""core"" from the /work directory tree and write their names to /dev/stderr (the standard error"
find . -iname *linkin*,"search for all files in the current directory recursively whose names contain ""linkin"", ignoring the case"
find /mydir -atime +100 -ok rm {} \;,remove with prompting all files starting in /mydir that have not been accessed in over 100 days
cat /var/spool/mail/`whoami`,"print the current user's mail file in ""/var/spool/mail"""
"find . -name ""*.java"" -exec grep -i -n TODO {}  \;",search the .java files from the current directory tree for todo lines
"find . -maxdepth 1 -name ""$a"" -print -quit",find one file or directory in the current directory whose name matches the pattern given as a variable $a
$ ls,lists content of the current folder.
tac a | grep -m1 -oP '(?<=tag>).*(?=</tag>)',grep for the last occurrence of text between two tags
"screen -r user -X stuff ""spawn daemon$(printf \\r)""","send text ""spawn daemon"" and a newline character to the screen session"
tmux set-environment -gu RBENV_VERSION,unset rbenv_version variable in global environment.
"cut ""-d "" -f2 a","print second section of space-separated data from text file ""a""."
sort -t$'\t' -k6V -k7n file,"sort tab separated file ""file"" using a version sort for field 6 and a numeric sort for field 7"
rm foo,removes 'foo' file.
tree --help 2>&1 | head -n2,print the first 2 lines of tree's help message by redirecting it from standard error to standard output
find . -maxdepth 0 -type f -exec chmod g+w {} ';',add group write permission to all files in the current directory
sed -z 's/\n/ /'g,replace all newlines with spaces in standard input
"echo ""$NAME"" | cut -d'.' -f2-",print the given file name's extensions.
cp -n src dest,copies 'src' to 'dest' preserving overwriting the existing files.
find -daystart -mtime 1,find all the files that are modified exactly one day ago
find . -type f | xargs -I {} chmod --reference {} ../version1/{},"find all files under the current directory and copy their permissions to the same file in ""../version1"""
"find . -type f \( -name ""*.shtml"" -o -name ""*.css"" \) -print","search the current directory tree for regular files whose names end in "".shtml"" or "".css"""
gzip,compress from standard input with gzip
find /tmp -name core -type f -print | xargs /bin/rm -f,"find files named core in or below the directory /tmp and delete them. note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces."
shopt -s dotglob,enables 'dotglob' shell option.
find / -name file1,find all files named `file1' on the system
target_PWD=$(readlink -f .),"save actual working directory in variable ""target_pwd"""
join -t':' <(sort LN.txt) <(sort PH.txt) | join -t':'  - <(sort AD.txt),"join colon-separated information in 3 files ln.txt ph.txt and ad.txt in a cascade fashion: join ln.txt and ph.txt, then join the result with ad.txt"
find . -inum 968746 -print,find files associated with an inode
"find . -iname ""{EA,FS}_*""","find all files/directories under current directory that match the case insensitive glob pattern {ea,fs}_*"
find /home/calvin/ -iname “picasso”,search for the file picasso in the folder /home/calvin/ (case insensitive search)
"watch ""ls /proc/$PYTHONPID/fd | wc -l""","count the number of open files for pid ""$pythonpid"" every 2 seconds"
find . -name '*.java' -newer build.xml -print,search the current directory tree for all .java files newer than the file build.xml
find . -mindepth 1 -name '.*' -prune -o \( -type d -print \),find all directories under minimum 1 level down the current directory excluding  directories (along with their contents) that start with a . (dot) in their names
find . -not -path \*/.\* -type d -exec mkdir -p -- ../demo_bkp/{} \;,"find all directories in the current directory tree excluding hidden directories and create them in ""../demo_bkp"""
"bind '""\e[24~"":""\C-k \C-upwd\n""'","delete what was typed in the command line and run ""pwd"" when button ""\e[24~"""
mv /path/subfolder/* /path/,"move all files excluding hidden files in ""/path/subfolder/"" to ""/path/"""
find -name “*.txt”,display all the text files in the current folder
echo $(readlink -f /dev/disk/by-uuid/$1) is mounted,"print the full real path of ""/dev/disk/by-uuid/$1"" followed by ""is mounted"""
find / -samefile passwd,locate all the hard links of file `passwd'
"join file{1,2}.txt | awk '$2 != $3 { print ""Age of "" $1 "" is different"" }'","file1.txt and file2.txt both contain a name and a number on each line. for each name whose corresponding number does not match in both files, display the ""age of ... is different"" message."
find . -name '*.xml',find all xml files under current directory
ifconfig eth0 | head -n1 | tr -s ' ' | cut -d' ' -f5,gets mac address of 'eth0' network interface.
"history | awk '{print $2}' | awk 'BEGIN {FS=""|""}{print $1}' | sort | uniq -c | sort -n | tail | sort -nr",print the 10 most used commands
rev file.txt,display each line in file.txt backwards
mkdir -p ${raw_folder} ${split_folder},"make directories and parents as needed to ""${raw_folder}"" and ""${split_folder}"""
"grep -r -H ""text string to search” directory-path","recursively finds strings with""text string to search” in any file within the 'directory-path', following symlinks, and prints found strings with file names."
ls /homes/ndeklein/mzml/*.gz | xargs -I {} gunzip {},"unzip all files matching ""/homes/ndeklein/mzml/*.gz"""
"awk 'FNR==NR { array[$1]++; next } { n = asorti(array,sort); for (i=1; i<=n; i++) if (sort[i] <= $1 + 10 && sort[i] >= $1 - 10 && $1 != sort[i]) line = (line ? line "","" : line) sort[i]; print $0, line; line = """" }' file.txt{,} | column -t","read first column of each row, find all other first columns which have a difference less than 10, and append that comma separated list to the row"
finger | tail -n +2 | awk '{ print $1 }' | sort | uniq,print the sorted unique column of usernames of users who are currently logged in without the header
./yourscript.ksh | sort | uniq,prints only unique lines of './yourscript.ksh' output.
ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub,display the host's ecdsa fingerprint using the sha256 hasing algorithm.
more /etc/hosts | grep `hostname` | awk '{print $1}',"list all ip addresses assigned to current hostname, pausing for user interaction after each page."
mv old tmp,"rename ""old"" to ""tmp"""
"sudo find . -xdev -type f | cut -d ""/"" -f 2 | sort | uniq -c | sort -n","print the number of entries (files, directories, symlinks, etc.) in the subdirectories of the current directory, stopping search at any device mount points."
find . -size -40 -xdev -print,find files smaller than 40 blocks skipping directories on other file systems
find . -size +10k -exec ls -l {} \;,display a long list of all the files that are bigger than 10kb in current folder
mount -t ntfs,mount a read only ntfs filesystem
"echo "" RDBMS exit code : $RC  ""     | tee -a ${LOG_FILE}","print ""rdbms exit code : $rc  "" to the console and append to ""${log_file}"""
"sync --list-only --include ""*2012*.xml"" -exclude ""*.xml"" serveripaddress::pt/dir/files/ --port=111 | awk '{ $1=$2=$3=$4=""""; print substr($0,5); }' >output.txt","list only file names matching ""*2012*"" from ""serveripaddress::pt/dir/files/"" listening on port 111 and write to ""output.txt"""
find / -cmin -60,find all the files in file system which are changed in last 1 hour
find . -type f -mtime +4,find all regular files that reside in the current directory tree and were last modified more than 4 days ago
find -daystart -mtime -7,find all the files that are modified in the last 7 days
script.py $(find /stuff/* -type d),search for all the directories in a folder and limit the search to current folder and give them as input to the python script
find /dir -regex '.*2015.*\(album.*\|picture.*\)',search the /dir directory tree for files whose names match regular expression '.*2015.*\(album.*\|picture.*\)'
find . -newermt “Sep 1 2006” -and \! -newermt “Sep 10 2006”,display all the files in the current folder which have been modified between two dates
echo ./fs*/* | xargs -n 1 cp test,copies file 'test' to each of directories like './fs*/*'.
find -iname 'file*' -exec du -cb {} + | grep total$ | cut -f1 | paste -sd+ - | bc,"find the total size of files whose name begins with ""file"" within the current directory tree"
find . -uid 120 -print,find all files/directories with user id 120 under current directory tree
"find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sh -c 'd=${1##*/}; sudo tar -zcpvf ""$d"".tar.gz ""$d""' - {} \;",find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths excluding the preceding './') into files with .tar.gz extension
find . -user aluno1 -exec chown aluno2 {},change the ownership of all aluno1's files in the current directory and below to aluno2
find . -mtime -1,find all the files that were modified within the last day
find /usr -name temp -atime +7 -print,"search for the files with the name ""temp"" and which have not been accessed in the last 7*24 hours in the /usr folder"
"match=$(echo ""${line}"" | egrep -o 'run-parts (-{1,2}\S+ )*\S+')","finds only parts of echoed string that match with regex 'run-parts (-{1,2}\s+ )*\s+', and saves them in $match variable, each matched part on a separate line."
"sleep $(expr `date -d ""03/21/2014 12:30"" +%s` - `date +%s`)",sleep until a specific date
ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }',"print the ping time of a single request to ""8.8.8.8"""
echo $string | rev | cut -d ' ' -f -20,revert $string value and print first 20 space-separated fields
ls !(b*),"lists all files and folders with its content in a current folder, excluding names starting with 'b'."
comm -12 <(awk '{print $3}' file1 | sort -u) <(awk '{print $3}' file2 | sort -u),"print the common third whitespace separated fields in ""file1"" and ""file2"""
find . -type f -exec ls -s {} \; sort -n |head -5,find command will display top 5 small files from curent directory . most probably you will get zero  bytes files .
find . -exec sh -c 'echo {} | grep -qi /projects/insanewebproject[^/]*$' \; -print,find files/directories under current directory that matches the regex /projects/insanewebproject[^/]*$  in their paths
cd '/cygdrive/c/Program Files (x86)/$dollarsign',"go to directory /cygdrive/c/program files (x86)/$dollarsign using single quotes to escape special characters, including dollar signs"
find /path/to/base/dir -type d -exec chmod 755 {} +,find all directories under /path/to/base/dir and change their permission to 755
find . name *foo,find all *foo files/directories under current directory (error prone)
"find -maxdepth 1 -type f newermt ""$timestamp""'",display all the regular/normal files in the current folder which have been modified after a specific time stamp and do not search in the sub directories
"cat file.json | python -c ""import sys, json, jsonpath; print '\n'.join(jsonpath.jsonpath(json.load(sys.stdin), 'store.book[?(@.price < 10)].title'))""","parse ""file.json"" to print json ""title"" entries whose ""price"" are less than 10"
find . -regex './kt[0-9] ',"find all the directories in the current folder which begin with the words ""kt"" and end with a digit"
mount -l -t nfs4,list all nfs mounts
"find /usr/ -path ""*local*""",display all the files in the usr folder and those that are in the path local
"find tmp -type f -printf ""f %s %p\n""",display all regular/normal files in temp folder and display the filename along with file size
"find $sourcePath -type f -mtime +10 -name ""*.log"" -exec mv {} $destPath \;",move files from $sourcepath to $destpath that have not been modified in the last 10 days
set -f,disable wildcard expansion and name globbing
find ~ -type f -exec file -i {} + | grep video,print the names of all files in the home directory and its subdirectories recursively whose mime type is video
git -c color.status=always status | less -REX,"run the specified git command, paging through the output with raw characters written to the terminal, without initializing the terminal capabilities, and automatically exiting when the end of the output is reached."
"find ../D44203 -iname '2.jpg' | while read fn; do name=$(basename ""$fn"") ; dir=$(dirname ""$fn"") ; mv ""$fn"" ""$dir/$(basename $(pwd))-$name"" ;done",rename all 2.jpg files under ../d44203 by appending present working directory name at the beginning of their names
find / -size +100M -print,show the list of files larger than 100 mb
"find . -type f -name ""*.java"" -exec grep -il 'foo' {} \;",search case insensitively for 'foo' in all the files with '.java' extension under current directory tree and show only the file names
"find . ! -name . -prune -exec sh -c 'mv ""$@"" targetdirectory/' sh  {} +","move all files from the current directory to ""targetdirectory"""
find $directory -type f -name '*',"list all regular files under the directory ""$directory"""
"grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e ""pattern""","finds recursively all files in '/path/' excluding folders dir1, dir2 and all like *.dst, that contain 'pattern', and prints matched strings with string number and file name."
HOSTNAME=$(hostname) make -e,run 'make -e' with an environment variable 'hostname' set to the system hostname
"find / -name ""*.core"" | xargs rm",find all .core files on the system starting from / and delete them
find /path -type f -print0 | xargs -0 md5sum,find all files under /path and calculate their md5sum
find . -type d -exec touch {}/index.html \;,"create an empty index.html in each directory under the current one, updating timestamps of already existing index.html files."
"top -p ""$(pgrep --oldest ProgramName)""",use 'top' to monitor the oldest instance of programname.
"find . -mtime -7 -name ""*.html"" -print",find *.html files in the current directory tree that were modified less than 7 days ago
df .,print file system disk space usage of the current directory's file system
find . -name *.gz -exec gunzip '{}' \;,find all .gz archives in the current directory tree and check if they are valid
find . -type f -empty -print0 | xargs -0 /bin/rm,find all empty files starting from the current directory and delete them
"find -name ""*.txt""",find all text files in the current folder
"find . -name ""*.xml"" -exec grep -HFf <(find . -name ""*.txt"" -printf ""%f\n"") {} \;",find all the xml files in the current folder which are present in the pattern text file
find / -links -2 -print,search  in root  ( / ) directory downwards all files which have less than 2 links.
echo $(/usr/sbin/arp $(hostname) | awk -F'[()]' '{print $2}'),print ip address of the current host
find /tmp/test/ -maxdepth 2 -mindepth 1 -type d,find all directories in maximum 2 levels down the /tmp/test directory
find . -type f -mtime 1 -exec rm {} +,remove all regular files from the current directory tree that were modified a day ago
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg"" -exec rm -rf {} \;","remove the .jpg files from the current directory whose names match regular expression "".+-[0-9]+x[0-9]+\.jpg"""
find . -name \*.c | xargs grep hogehoge,"find all *.c files under and below the current directory that contain ""hogehoge"""
dir=$(dirname $(readlink /proc/$$/fd/255)),"save the directory of the full path to the current script in variable ""dir"""
"grep -v '^$\|^#\|^\s*\#' filename | grep -v ""^[[:space:]]*$"" | more","display the contents of file 'filename' excluding lines starting with # or empty/space-only lines, waiting for user interaction after each page."
touch .bash_profile,"make sure the file "".bash_profile"" exists in current directory, update its timestamp to current date/time."
rsync -a -v --ignore-existing src dst,"archive ""src"" to ""dst"" without overwriting existing files in ""dst"""
"find . -name ""*.c"" -exec wc -l {} \;","display the number of lines in all the "".c"" files in the current folder"
"find . -maxdepth 1 -name ""*.jpg"" -size -50k -exec rm {} \;",force delete all jpg files in current directory which are less than 50kb and do not search in the sub directories
find /source -type f -print0 | xargs -0 -n 1 -P $CORES gzip -9,compress all files under /source directory tree using gzip with best compression method
{ time sleep 1; } 2>&1 | grep real,finds real time report in a 'sleep 1' command execution statistic.
find /home/dm/Video -mtime +10,find all files residing in /home/dm/video or below that were last changed at least 10 days ago
rsync -aqz _vimrc ~/.vimrc,"archive ""_vimrc"" to ""~/.vimrc"" suppressing non-error messages and compressing data during transmission"
comm -12 <(grep -rl word1 . | sort) <(grep -rl word2 . | sort),"print all files containing ""word1"" and ""word2"" in the current directory tree"
cut -d\  -f 2,print second section of space-separated data coming from stdin.
"find /home/jassi/ -name ""aliencoders.[0-9]+"" | xargs -r ls -lrt | awk '{print $9}'",list all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
watch -n 300 du -s path,"execute ""du -s path"" every 300 seconds"
ls | grep android | nl,"search for filenames matching ""android"" in the current directory and number the output"
rsync $OPTS $FIND $BACKUPDIR,"run rsync with options specified by variable opts, copying directory(ies) specified by variable find, and to destination specified by variable backupdir."
"find -name '*.php' -exec grep -in ""fincken"" {} + | grep TODO | cut -d: -f1 | uniq",find all the php files in current folder and search for multiple patterns in these files and display the file names
"find . -name ""*.c"" -o -name ""*.cpp"" -o -name ""*.h"" -o -name ""*.hpp"" > cscope.files",find all c & c++ files in the current directory and save output names to another file
find main-directory -type f,find all the normal/regular files in the folder main-directory
find /tmp/foo -path /tmp/foo/bar -print /tmp/foo/bar,find  files which full path name is /tmpfoo/bar under /tmp/foo directory and print
"sudo mount -i -o remount,suid /home/evgeny","remount ""/home/evgeny"" with the ""suid"" flag set"
grep “HIGHMEM” /boot/config-`uname -r`,"look for any instance of ""highmem"" in the current kernel's compile-time config file."
find -name file1,find all files/directories named file1 under current directory
"find . -type f -iname \*.html -exec grep -s ""Web sites"" {} \;",search the current directory tree for an html file having the text 'web sites' in it
yum install mysql mysql-server,installs packages 'mysql' and 'mysql-server'.
"find . -type f | grep -vP ""\.dll$|\.exe$""",find recursively all regular files in the current directory tree not ending in .dll or .exe
"find / -size +50M -iname ""filename""","return the list of files named ""filename"" that are 50 megabytes or larger"
"find . \( -name *.rb -or -name *.html -or -name *.js -or -name *.coffee -or -name *.css -or -name *.scss -or -name *.erb -or -name *.yml -or -name *.ru \) -print0 | xargs -0 sed -i '' -E ""s/[[:space:]]*$//""","remove trailing white spaces from all *.rb, *.html, *.js, *.coffee, *.css, *.scss, *.erb, *.yml, *.ru files under current directory"
"find /ftp/dir/ -size +500k -iname ""*.jpg""",perform a case insensitive search for *.jpg files which are greater than 500kb in size under /ftp/dir/ directory
find /var/www | more,list recursively all files and directories in /var/www and pass the result to the `more' pager
git ls-files | xargs -d '\n' wc -l,counts the number of lines in each file in a git repository.
find . -depth -name *.zip,find all .zip files in the current directory tree
"subj=""$(date) - $(hostname) - $(echo ""$changes"" | sed ""s/$/,/"" | tr ""\n"" "" "")""","save the current date, system host name, and ""$changes"" with newlines removed to variable ""subj"""
find / -ctime +3,find files/directories in entire file system that had their meta information changed more than 3 days ago
find . -mmin -60,find files in the current directory tree whose content was changed within the last 60 minutes
find . -maxdepth 1 -name *.jpg -print -exec convert,execute the `convert' command for every .jpg file in the current directory
find . -print|xargs grep v\$process,search for the literal string 'v$process' in all files under current directory
find . -ipath '*sitesearch*' -ipath '*demo*',"search for all files with either ""sitesearch"" or ""demo"" in their path names"
find . -name [ab]* -print,find all files which  begin with 'a' or 'b' from current directory downwards and print them.
screen -x main -X title blah,create a named screen session
"find / -iname ""*.mp3"" -type d -exec /bin/mv {} /mnt/mp3 \;","search for all the directories ending with "".mp3"" in the file system and move them to the folder /mnt/mp3"
"path=`readlink --canonicalize ""$dir/$file""`","save the canonical path of ""$dir/$file"" in variable ""path"""
"seq -5 10 | xargs printf ""- - %s"" | xargs  | bc",calculate the sum of all the numbers from -5 to 10
"jobs -l | fgrep $! | perl -ne 'print ""$1\n"" if /\[(\d+)\]/'",get the job number from the stored pid
find /home -type d ! -exec test -e '{}/bin' \; -print,find all directories under /home that doesn't contain a file/directory named 'bin'
find . -type d \( -name media -o -name images -o -name backups \) -prune -o -print,"show all directories in the current folder excluding those that are present in the sub directories of media, images and backups"
find . -type f -iregex '.*\.jpe?g',display all the jpg images in current folder
"find . -name '*.jpg' -exec sh -c 'mv ""$0"" ""$(basename $(dirname $0))-${0%.JPG}$.jpg""' {} \;",rename all *.jpg files to *.jpg$.jpg files under current directory by appending the parent directory name at the beginning of their names
find /home/peter -name *~ |xargs rm,"remove all files whose names end with ""~"" in the /home/peter directory tree"
gzip -dc archive.tar.gz | tar -xf - -C /destination,decompress and extract 'archive.tar.gz' into '/destination'
echo foo | read bar,save 'foo' into variable 'bar' in ksh
"ssh -t example.com ""screen -r""","allocate a pseudo-terminal and execute ""screen -r"" on host ""example.com"""
sudo chown root:wheel com.xxxx.adbind.plist,"change onwer to ""root"" and group to ""wheel"" of ""com.xxxx.adbind.plist"""
find /var/log -size +10M -ls,list files larger than 10mb under /var/log
"find . -name '*txt' -print -exec awk 'BEGIN {nl=1 ;print FILENAME} $9 !="""" {if (nl<11) { print $0 ; nl = nl + 1 }}' {}  \;",run an awk program on every txt file found in the current directory tree
df | grep /dev/disk0s2,"print the file system disk space usage for ""/dev/disk0s2"" if exists"
"find . -name ""*.pdf"" -print0 | xargs -0 rm",recursively finds all '*.pdf' files in a current folder and removes them.
find . -type f -not -iwholename '*.git*' -print0 | xargs -0 perl -pi -e 's/ +$//',remove trailing spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths
pstree -p,prints full process tree with id number of each process.
"find ./js/ -name ""*.js.compiled"" -print0","find all files ending with ""js.compiled"" in current folder (print0 is used to handle files with newlines in their names)"
"source ""$file""","execute commands from ""$file"" in the current shell."
"find . -type f -name ""*html"" | xargs tar cvf jw-htmlfiles.tar -",find all regular file and create jw-htmlfiles.tar
chgrp target_group target_directory,changes group ownership of 'target_directory' to 'target_group'.
yes | command,"continuously send ""y"" to input of ""command"""
"find . -name ""*.txt"" -ok rm {} \;",delete all the text files from the current folder after user confirmation
ls -ald `which c++`,"list file information of the full path of command ""c++"""
find / -name top,find all files/directories named 'top' in the entire filesystem
mount --bind /original/path /new/path,"bind mount ""/original/path"" on ""/new/path"""
chown ftpuser testproject/ -R,"recursively change the owner of all files in ""testproject/"" to ""ftpuser"""
find . -type f -name *.php,find all php files under current directory
"find . -ls|awk 'BEGIN{OFS="",""}$1=$1'","list all files/directories under current directory using comma (,) as the delimiter for different fields in the output"
"find . -maxdepth 1 ! -regex '.*~$' ! -regex '.*\.orig$' \     ! -regex '.*\.bak$' -exec grep --color ""#define"" {} +","search for ""#define"" in all files in the current directory, excluding backup files *~, *.orig, *.bak"
"rsync -zvr --include=""*.sh"" --exclude=""*"" $from/*  root@$host:/home/tmp/","copy all files matching ""*.sh"" in ""$from/*"" to ""root@$host:/home/tmp/"" compressing data during transmission"
mkdir -p tmp/real_dir1 tmp/real_dir2,"create intermediate directories ""tmp"" as required and directories real_dir1 and real_dir2"
read -N $BUFSIZE buffer,store n symbols of input into variable 'buffer'
"find <directory_name> -type d -exec sh -c ""cd {} && [ -d live ] && [ -d test ] && echo \""Deleting test from {}\"" && rm -rvi test "" {} \;",delete all the 'test' directories from all directories under <directory_name> that contain directories named 'test' and 'live'
"find /tmp -type f -perm -002 | awk -- '1{print ""Found world write permissions:"";print};END{if(NR==0)print ""No world writable found.""}'",find files with 002 permission under /tmp and print them with the string 'found world write permissions:' printed as the first line of output or print 'no world writable found' if no such files were found
alias git-root='cd $(git rev-parse --show-cdup)',"set alias ""git-root"" for command 'cd $(git rev-parse --show-cdup)'"
comm -1 -2 <(sort file1) <(sort file2),print only common strings in sorted content of files 'file1' and 'file2'
"find . -type f -execdir bash -c '   dest=${1//[0-9]/}   [[ -f $dest ]] || cp -- ""$1"" ""$dest"" ' _ {} \;","copy files, removing digits from the filename (e.g file123 to file or te12345st to test). do not overwrite any existing file."
"find /usr -newermt ""Feb 1""",find all files/directories that were modified after february 1st under '/usr' directory tree
"find /the/path -depth -name ""*.abc"" -exec rename 's/\.abc$/.edefg/' {} +","change the extension of all the "".abc"" files in the folder ""/the/path"" to "".edefg"" and do not change in the sub directories"
find . -type f -mtime -1 -daystart -exec ls -l {} \;,find all the normal/regular files in the current folder which have been modified in the last day and display a long listing of them
find /path -nouser -or -nogroup,find files/directories that have no owner or group under /path
"hostname  -I | awk -F"" "" '{print $1}'",print the ip addresses for the current host name
"find . -name ""*.t1"" -exec rename 's/\.t1$/.t2/' '{}' \;","recursively search current directory for all files with name ending with "".t1"", change this to .t2"
find /path -iname '*.txt' | perl -lane '$sum += -s $_; END {print $sum}',get the disk space used by all *.txt (case insensitive) files/directories under /path directory
cat 1.txt | xargs dig TXT,get domain names from file '1.txt' and request txt dns record for each one
find /some/path -type f ! -perm -100 -ls,find files under /some/path that are not executable by the owner
"find -exec grep -q fuddel {} "";"" -exec grep -q fiddel {} "";"" -ls",display a long list of the files in the current folder which have the word fuddel in all the files in the current folder and then search for the word fiddel in the previously matched files
find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;,"find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory ."
"date -ujf%s $(($(date -jf%T ""10:36:10"" +%s) - $(date -jf%T ""10:33:56"" +%s))) +%T",compute difference between two dates
sudo cp -a include/gtest /usr/include,"copy file or directory 'gtest' from directory 'include' in current directory to /usr/include, preserving ownerships and permissions."
echo <(true),print the path to the pipe created for process substitution
find -L $path -maxdepth 1 -type l,find all broken symlinks in maximum 1 level down the $path directory
split -l $MAX_LINES_PER_CHUNK $ORIGINAL_FILE $CHUNK_FILE_PREFIX,"split ""$original_file"" into files of at most ""$max_lines_per_chunk"" lines each with a prefix ""$chunk_file_prefix"""
du -h --max-depth=0 * | sort -hr,list each file or directory in the current directory prefixed by its human readable filesize and sorted from largest to smallest
find -L /target -type l | while read -r file; do echo $file is orphaned; done,search for all the links in a folder and display all the broken links
"find . -name ""FILE-TO-FIND"" -exec rm -rf {} +",recursively removes all files and folders like 'file-to-find' from current folder.
split -l 200000 mybigfile.txt,"split ""mybigfile.txt"" into files of at most 200000 lines each"
find -mindepth 3 -maxdepth 5 -name passwd,find the password file between sub-directory level 2 and 4
find . -depth -type f -not -name *.itp -and -not -name *ane.gro -and -not -name *.top -exec rm '{}' +,"recursively finds all files not like *.itp, *ane.gro, *.top in a current folder and removes them."
find .. -type d -print0 | xargs -0 tar cf dirstructure.tar --no-recursion,archive the directory structure under .. directory into dirstructure.tar
TIMEFORMAT=%R && time ls -l,makes 'time' built-in to show only real execution time.
"set | sed -n '/^foobar ()/,/^}/p'","display bash function definition of ""foobar"""
cat my_script.py,"print the contents of ""my_script.py"""
sleep 1,sleep for 1 second
"find / -type d -name ""ora10""","search for the directory ""ora10"" in the entire file system"
find . -iname '*.jpg' -type f -printf '%b\t%D:%i\n' |   sort -u | cut -f1 | paste -sd+ - | bc,find the total size of *.jpg files within the current directory tree
find -print | grep esxcfg-firewall,"find the file with the name ""esxcfg-firewall"" in the current folder"
"rsync --recursive --prune-empty-dirs --include=""*.txt"" --filter=""-! */"" dir_1 copy_of_dir_1",recursively copy all files with names ending with .txt from dir_1 to the same location within copy_of_dir_1
"find . \( -iname ""*.jpg"" -o -iname ""*.jpeg"" -o -iname ""*.png"" \) -ls | awk '{total += $7} END {print total}'","search all jpg,png,jpefg  files in the current folder and calculate the total size of them"
head -c N file.txt,prints the first n bytes of file.txt
find /fss/fin -type d,find all directories under /fss/fin
ssh -L 1234:remote2:22 -p 45678 user1@remote1,"setup a local ssh tunnel from port 1234 to ""remote2"" port 22 via connection to ""remote1"" as ""user1"" on port 45678"
kill -INT $(jobs -p),kill all background processes
find $LOGDIR -type d -mtime +0 -exec compress -r {} \;,compress all directories found in $logdir wherein a file's data has been modified within the last 24 hours
find . -path ./src/emacs -prune -o -print,find files/directories under current directory excluding the path ./src/emacs
"find `pwd` -name ""file.ext"" -printf ""%f\n""","find all files named ""file.ext"" under the current working directory tree and print its filename"
find /home -user bob,find all files in the /home/ directory tree that are owned by bob
"sed -n ""s/^$//;t;p;""",delete empty lines from standard input
gunzip -c 4.56_release.tar.gz | tar xvf -,"unzip and untar ""4.56_release.tar.gz"" to standard output"
"cal 09 2009 | awk 'NR==4{day=""9""; col=index($0,day); print col }'","print position number of day '9' in fourth line of calendar output for september, 2009."
find /target/path -type f -print0 | xargs -0 your_command_here,"execute script ""your_command_here"" passing all regular files from directory tree /target/path as arguments to it"
"find -d MyApp.app -name Headers -type d -exec rm -rf ""{}"" \;",search directory tree `myapp.app' for directories whose name is 'headers' and delete them
mkdir ~/practice,"make directory ""~/practice"""
"find . -iwholename ""*ACK*1""",find all files/directories under current directory tree whose paths match the pattern '*ack*1'  (case insensitive)
find -type f -exec md5sum {} +,find regular files under the current directory and execute an md5sum command on each one
od -t x2 -N 1000 $file | cut -c8- | egrep -m1 -q ' 0d| 0d|0d$',"check if ""$file"" contains dos line endings"
find /home/myfolder -type f -print0 | xargs -0 grep -l -E 'abc.*def.*ghi',find all files under /home/myfolder that match the regex 'abc.*def.*ghi' in their contents
"JAVA_HOME=""$( readlink -f ""$( which java )"" | sed ""s:bin/.*$::"" )""","save java home in variable ""java_home"""
find . -type d -maxdepth 1 -mindepth 1 -exec basename {} \;,display the name of all directories in the current folder and do not search in sub directories ( mindepth ensures that the current folder name is removed from the output)
find Música/* | egrep -Z \/\\. | xargs -0 echo,find all the files in the folder musica and display them in a single line null separated
find . -name file1 -print,find all files/directories named 'file1' under current directory tree
var1=`echo $var1 | tr '[A-Z]' '[a-z]'`,convert the contents of 'var1' variable to lowercase
find . -mmin -5,find files modified in the last 5 minutes starting from the current directory
find . -name *.jpg,find all *.jpg files under current directory
pushd,exchanges the top two directories in the dirs stack.
"find . -type f -not -name ""*.html""",find all files whose filename does not end with *.html.
chgrp -R apache_user files,recursively changes group ownership of everything in 'files' to 'apache_user'.
read -r ans,"read a line from standard input into variable ""ans"" without backslash escapes"
"find . -name ""*.swp"" -print0|xargs -0 rm",remove all *.swp files under current directory ensuring white space safety
"ifconfig en0 | awk '/inet addr/{print substr($2,6)}'",gets ip address of 'en0' network interface.
split -a 4 -d -l 50000 domains.xml domains_,"split ""domains.xml"" into files of at most 50000 lines each with a numeric suffix of length 4 and prefix of ""domains_"""
"find / -iname ""*.mp3"" -exec mv {} /mnt/mp3 \;",search for all the mp3 files in the file system and move them to the folder /mnt/mp3
find . -perm 040 -type f -exec ls -l {} \;,use the octal form to find and print detailed information about all regular files in your home directory and below that have only the group permission set.
"find . -regextype posix-egrep -regex "".*(rb|js)$""","search the current directory tree for files whose names end in ""rb"" or ""js"""
kill -9 `pgrep -f cps_build`,"send sigkill (signal 9) signal to all processes whose command matches ""csp_build"""
head -16482 in.sql | tail -258 > out.sql,extracts 258 lines beginning from line 16482 of in.sql and saves them to out.sql
find ./ -type f -name '*.html' | xargs sed -i 's/<title>/sblmtitle\n<title>/g',replace all ocurrences of '<title>' with 'sblmtitle\n<title>' in all the regular files with '.html' extension under current directory tree
"find . -name ""*.c"" -print0 | xargs -0 cat | wc -l",count all the lines of all '*.c' files in current directory recursively
"find /raid -type d -name "".local_sd_customize"" -ok cp /raid/04d/MCAD-apps/I_Custom/SD_custom/site_sd_customize/user_filer_project_dirs {} \;",copy a files from one folder to all the folder in the /raid which have an extension local_sd_customize.
find . -exec /bin/rm {} \;,delete all files in the current directory.
find . -name 'javac',find all files/directories named 'javac' under current directory
find /etc -size +100k -size -150k,find only files under /etc with the size of 100k-150k
sudo cp -a libgtest_main.so libgtest.so /usr/lib/,"copies 'libgtest_main.so' and 'libgtest.so' to '/usr/lib/', preserving all attributes, and copying symlinks as symlinks, without following in source files."
find . -type f -print0 | xargs -0 chmod 664,"change the permissions of all regular/normal files in the current directory, print0 is used for handling files with newlines in their file name"
ls -tp | grep -v '/$' | tail -n +6 | tr '\n' '\0' | xargs -0 rm --,removes all files but 5 newest ones from current folder.
find -type f |  grep -P '\w+-\d+x\d+\.\w+$' | xargs rm,remove regular files whose names match perl regular expression '\w+-\d+x\d+\.\w+$' from the current directory tree
"find -x data -name ""filepattern-*2009*"" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -",archive all filepattern-*2009* files/directories under data/ into 2009.tar
find . -name '*.txt' | xargs egrep mystring,search for 'mystring' in all *.txt files under current directory
"find -type f -name ""*.htm"" | awk -F'[/]' 'BEGIN{OFS=""-""}{ gsub(/^\.\//,"""") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }'",find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format
"find -type f -regex "".*/.*\.\(shtml\|css\)""","search the current directory tree for regular files whose names end in "".shtml"" or "".css"""
"find / -name ""testfile.txt""",search the system for the file “testfile.txt”
"sort -k1,1 -k2,2 -t';' --stable --unique some_data","sort ""some_data"" by the first and second "";"" delimited entries, outputing unique lines and stabilizing the sort"
unset array[`shuf -i 0-3 -n1`],unsets random one from first four array members.
"find . -type f -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt""","find all the html, javascript and text files in the current folder"
"find . -type d -exec chmod u=rwx,g=rx,o= '{}' \;","change permissions to u=rwx,g=rx,o= for all directories in the current directory tree"
"find . -maxdepth 1 -iname ""*linkin park*""",find all the files in the current directory with “linkin park” in their names
find . -mmin 60 -type f,display all the regular/normal files in current folder which have been modified exactly 60 minutes before
awk 1 ORS=' ' file,display inputfile all on one line (replace newlines by spaces)
uname -s -r -v,"display kernel name, release, and version."
find . -name '*.py' | xargs wc -l,find recursively all python files in the current directory tree and count the number of lines in them
rpm2cpio php-5.1.4-1.esp1.x86_64.rpm | cpio -idmv,"extract the contents of rpm ""php-5.1.4-1.esp1.x86_64.rpm"""
find tmp -maxdepth 1 -name *.mp3 -print0 | xargs    -0 rm,remove all *.mp3 files in tmp directory but not in it's subdirectories
chown -R root:root /var/lib/jenkins,"recursively change the user and group of all files in ""/var/lib/jenkins"" to ""root"""
"find ""Test Folder"" -type d -name '.dummy' -delete","search for the folder .dummy and remove it from the folder ""test folder"""
find / -ctime -1,find all the files (under root file system /) that were changed within the last 24 hours
"read -p ""Are you sure? (y/n) "" -n 1","read a single character from standard input with prompt ""are you sure? (y/n) """
find . -name '*$VERSION*',find all files/directories that contain the string literal '$version' in their names under current directory tree
"find . -exec printf '%s\t' {} \; -exec uuidgen \; | awk -F '\t' '{ sub(/.+\//,"""", $1); print $2, $1 }' | sort -k2",generate uuids for the files from the current directory tree
find . -user my_user -perm -u+rwx,"find all files/directories that have read, write, execution permission for user and belong to the user 'my_user' under current directory tree"
find -type f | xargs head -v -n 1 | grep -B 1 -A 1 -e '^catalina',search for the regex ^catalina in the first line of each file under current directory
"find . -name ""*.jpg""",find all jpg files in the current folder
"find . -maxdepth 1 -name '*.sql' -exec ""sed -e 's/ , );/1,1);/g' '{}' | /usr/bin/mysql -D ootp"" \;","find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command"
find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete,delete files under $location that match $required_files in their names and were modified more than 360 minutes ago
sort -u -o file !#$,sort a file 'file' preserving only unique lines and change the file in-place
cal April 2012 | tee t | more,"prints calendar of april of 2012, and redirects output to 't' file and 'more' pager tool."
find / -atime -1 -amin +60,find files on the system accessed during the last 24 hours but not within the last hour
"find / -type f -name ""your_pattern"" 2>/dev/null","find regular files whose filename is ""your_pattern"", suppressing all error messages."
find . -uid +500 -uid -1000 -type f,find all the regular/normal files in the current folder which belong to the users with the user id's between 500 and 1000
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -print | sed 's@/[^/]\+$@:@' | sort | uniq | tr -d '\n' | sed 's/^/:/; s/:$//',find all files under ~/code that are executable by owner without descending into hidden directories and print their parent directories appended with : at the beginning and remove all newlines and the last : (colon)
"echo ""$1"" | od -xcb","print a 2 byte hexadecimal value, printable character, and octal value of ""$1"""
/usr/bin/time -f%e ls >/dev/null,uses the time utility to report only real execution time of 'ls' command.
find /usr \( -name doc -and -type d \),find directories named `doc' in /usr and below
sudo find . -type f -exec chmod 644 {} +,change the permissions of all the regular/normal files in the current folder
find / -cmin -60 | head,find all the files which are changed in last 1 hour in entire file system and show a few lines of output from the beginning
find . -maxdepth 1 -type d | xargs -I X mkdir '/new/directory/X',find all the directories in the current folder excluding search in the sub directories and create these directories in another path
mkdir TestProject,"make directory ""testproject"""
"find . -type f \( -name ""*.dat"" \) -exec tail -n+5 -q ""$file"" {} + |tee concat.txt","find ""*.dat"" files recursively in the current directory, print the lines starting on line 5 to the console and save to ""concat.txt"""
find /usr -name date,find all files/directories named 'date' under /usr
find ${DIRECTORY} -type f -print | sed -e 's@^.*/@@' | grep '[aeiouyAEIOUY]' | wc -l,count the number of regular files in directory tree ${directory} that contain a vowel in their names
find ~ -type d -exec chmod +x {} \;,"add ""execute"" to the permissions of all directories in the home directory tree"
"FOLDERS=$(find . -type d | paste -d, -s)","save all directories under the current directory as a comma separated list in variable ""folders"""
tree,print the current directory tree
find  -mtime -1,display all the files in the current folder that have been modified in the last 24 hours
"find path/ -name '*.log' -print0 | xargs -r0 -I {} bash -c 'grep -q ""string that should not occur"" ""{}"" || echo ""{}""'","find all *.log files under path/ that do not contain ""string that should not occur"""
find -L /home/peter -name *~ -print0 |xargs -0 -r rm,"find all files whose names end with ""~"" in the /home/peter directory tree, following symlinks, and delete them"
find ./lib/app -type f | sort,find all files under ./lib/app and sort them
"cal=$(echo $(cal ""$month"" ""$year""))","saves calendar of $month, $year in the 'cal' variable."
find . -name \*.txt -print0 | xargs -0 process,find all *.txt files/directories under current directory and execute process once with all of them as arguments
"echo 595a | awk -niord '$0=chr(""0x""RT)' RS=.. ORS= | od -tx1c","convert ""595a"" into characters and then print the hexadecimal and printable characters of each byte"
fold -b16 | sed 's/../& /g',print every 16 bytes of standard input in groups of two followed by a space
"find . -name ""*.txt"" -exec rm {} \;",remove all .txt files in and below the current directory
watch wc -l <filename>,displays line count in 'filename' every 2 seconds.
"find . -name ""*.pyc""|xargs rm -rf",recursively removes all files like '*.pyc' in a current folder.
"echo ""$(date): "" $line","print the current date followed by "": $line"""
chown $1:httpd .htaccess,"change owner to ""$1"" and group to ""httpd"" of "".htaccess"""
find . -maxdepth 1 -type d -print0 | (cd /SomeWhere/Else; xargs -0 mkdir),find all the directories in current folder and do not search in sub directories and create the same directory structure in another folder
"ssh someone@somehost ""cd /export/home/someone && find . -name '*' -print| xargs -n1 curl -u someone:password ftp://somehost/tmp/ -vT""",find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/
find [path] -type f -not -name 'EXPR' | xargs rm,recursively removes all files in a 'path' folder but 'expr' files.
find -type f -printf %P\\n | sort | comm -3 MANIFEST - | xargs rm,"remove all files except the ones listed in ""manifest"""
yes 1 | command,"answer ""1"" repeatedly until ""command"" exits"
sed --in-place '/some string here/d' yourfile,"delete all lines matching ""some string here"" in ""yourfile"""
yes '#' | head -n 10 | tr -d '\n',"print 10 ""#"" characters in a row"
alias 12np='ssh mydomain\\stephencheng@userxyz@host.com',"set alisa ""12np"" for command 'ssh mydomain\\stephencheng@userxyz@host.com'"
"find /var/www/ -type f -iname ""*.php"" -exec chmod 700 {} \;",change the permission of all the php files in the folder /var/www/ to 700
"find / -perm /u+w,g+w,o+w","find all files/directories in entire file system that have  ""write"" bit set for either the owner, the group, or others"
find . -type f -name '*' -exec sed --in-place 's/[[:space:]]\+$//' {} \+,remove trailing whitespaces from all regular non-hidden files in the current directory tree
"for f in `find -name \*.jsp` ; do echo ""==> $f"" >> out.txt ; grep ""TODO"" $f >> out.txt ; done","searche jsp's for ""todo"" lines and append them all to a file with a header showing what file they came from"
"find <directory_name> -type d -exec sh -c ""cd {} && [ -d live ] && [ -d test ] && cd ../ && echo \""Deleting {}\"" && rm -rvi {} "" {} \;",delete all directories under <directory_name> that contain directories named 'test' and 'live'
"mkdir -p ""$TARGET_PATH""","make directories to ""$target_path"" as needed without causing an error if it exists"
find /usr/local/man /opt/local/man -name 'my*',search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'
"find . -iname ""*.bak"" -type f -print | xargs /bin/rm -f",find all .bak files starting from the current directory and delete them
"find /user/directory/ -name ""*txt"" -mtime 0 -type f -exec printf '%s: ' {} \; -exec tail -1 {} \;",find all text files in user/directory/ which have been modified today and display the last line of these files
find `pwd` -name file.ext |xargs -l1 dirname,"find all files named ""file.ext"" in the current directory tree and print the path names of the directories they are in"
"find /var/www/ -type f -iname ""*.pl"" -print",find all the perl files in /var/www ( case insensitive search )
find . -perm -a+r -perm /a+w ! -perm /a+x,"search for files that are readable for everybody, have at least on write bit set but are not executable for anybody"
shopt -s nocaseglob,enables shell option 'nocaseglob'.
"find /path/to/dir -type l -exec sh -c 'cp --remove-destination ""$(readlink ""{}"")"" ""{}""' \;",find all symlinks under /path/to/dir and replace them with the actual files they are pointing at
"PacketLoss=$(ping ""$TestIP"" -c 2 | grep -Eo ""[0-9]+% packet loss"" | grep -Eo ""^[0-9]"")",set variable packetloss to first digit of percentage of packet loss occurring when pinging host specified by testip
"PS1=""`hostname`:\!>""",set prompt to the system host name and history number
"find kat -printf ""%f\n""",display all the files in the kat folder
"find . -name '*.jpg' -execdir bash -c 'd=""${PWD##*/}""; [[ ""$1"" != ""$d-""* ]] && mv ""$1"" ""./$d-$1""' - '{}' \;",rename all *.jpg files under current directory by appending parent directory name at the beginning of their names if the name doesn't already contain the parent directory name
find / -perm 644,find all files/directories in entire file system with 644 permission
"bind $'""\x61""':self-insert","bind key ""\x61"" to insert itself"
find ./ -type f -exec chmod 644 {} \;,find all regular files in the current director and set their permissions to '644'.
find . -name .git  -prune -o -name file  -print,"find recursively the files named ""file"" in the current directory ignoring all .git directories"
join -t $'\t' file1 file2,"run 'join' on file1 and file2, using a literal tab character as field separator."
"cd ""$(node app)""","running javascript program ""app"" with node outputs the name of a directory, go into that directory."
"echo -e ""length(FOO_NO_TRAIL_SPACE)==$(echo -ne ""${FOO_NO_TRAIL_SPACE}"" | wc -m)""","reports count of characters in the value of ${foo_no_trail_space} variable as follows: ""length(foo_no_trail_space)==<counted number of characters>"""
echo -n teststring | gzip -1 | pigz -lv,"calculate the crc32 of ""testring"""
scp -c blowfish -r user@your.server.example.com:/path/to/foo /home/user/Desktop/,"connect via ssh to ""your.server.example.com"" and recursively copy directory ""/path/to/foo"" on this host to direcotry ""/home/user/desktop"" on local host, using ""blowfish"" cipher algorithm."
shopt -s checkwinsize,set shell option 'checkwinsize'.
history 300 | grep scp | grep important$,"search the first 300 commands in history containing ""scp"" and ending in ""important"""
"find . -name ""*.trc"" -ctime +3 -exec rm -f {} \;","search the current directory tree for the files with extension ""trc"" and remove them if they are more than three days old"
find . -mtime -7 -type d,find all directories that have been modified in the last seven days.
"ls -alFt `find . -name ""bla.txt""` | rev | cut -d"" "" -f1 | rev | head -1",print 'bla.txt' if at least one file with such name is present below the current directory.
find . -perm +220  -exec ls -l {} \; 2> /dev/null,"find files that are writable by the user, the group, or both"
echo '1234567890  *' | rev | cut -c 4- | rev,cut off three last symbols from string '1234567890  *'
"find $(pwd)/* -type f -exec stat -c ""f%15s %n"" {} +",print the names and sizes of regular files residing in the current directory tree
shopt -s progcomp,enables shell option 'progcomp'.
"find /usr/src -name ""*.html"" -exec grep -l foo '{}' ';' | wc -l","count the *.html files residing in the /usr/src directory tree and containing string ""foo"""
base=$(dirname $(readlink $file)),saves folder path where target of symbolic link $file file is located in 'base' variable.
find bills -type f -execdir sort -o '{}.sorted' '{}' ';',"sort each file in the bills directory, leaving the output in that file name with .sorted appended"
"sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}","recursively change the owner of npm's directories(lib/node_modules, bin and share) to the current user"
cp -n,copies defined file to the target folder without overwriting existing files.
echo 35 53 102 342|tr ' ' '\n'|tac|tr '\n' ' ',"reverse the space separated words in ""35 53 102 342"""
diff -Naur dir1/ dir2,"compare files in ""/tmp/dir1"" and ""/tmp/dir2"", treat absent files as empty and all files as text, and print 3 lines of unified context"
"seq 1 10 | perl -e '@x=("""")x3;while(<>){print shift @x;push @x,$_}'","print all lines of ""seq 1 10"" except the last 3"
find . | xargs sed -i ‘s/foo/bar/g’,"replace ""foo"" with ""bar"" in all files in the current directory tree"
"cat ""text1;text2;text3"" | sed -e 's/ /\n/g'","print the file 'text1;text2;text3' replacing each space("" "") with a newline"
find . -name 'sqlite.db' | xargs your_script.sh,"execute ""your_script.sh"" passing all ""sqlite.db"" files from the current directory tree as arguments to it"
find /var/www -type f -print0 | xargs -0 chmod 644,set permissions for all regular files under /var/www to 755
rsync -rvz -e 'ssh -p 2222' --progress ./dir user@host:/path,"archive ""./dir"" to ""user@host:/path"" via ssh on port 2222 and display progress"
ls -l /bin/echo,lists long format information about file '/bin/echo'.
"find . -type f -not -newermt ""$date_time""",find files under current directory that are not newer than $date_time in regards of modification time
"find FOLDER1 -type f -print0 | xargs -0 -I % find FOLDER2 -type f -exec diff -qs --from-file=""%"" '{}' \+",compare the files in 'folder1' and 'folder2' and show which ones are indentical and which ones differ
cat file1 file2 ... file40000 | split -n r/1445 -d - outputprefix,"split the contents of ""file1 file2 ... file40000"" into 1445 files in a round robin fashion with prefix ""outputprefix"" and numeric suffixes"
find / -type f -perm 777,find all files whose permission are 777
sudo chown -R `whoami` /usr/local/lib/node_modules,"recursively change ownership of ""/usr/local/lib/node_modules"" to the current user"
find . -name '*.gz' | xargs gzip -l | tail -n +2 | head -n -1 | sort -k 2 | tail -n 1 | awk '{print $NF}',"find the largest original "".gz"" file in the current directory tree"
"find /home/dm -name ""*uniform*""",look in /home/dm and below for files with 'uniform' in their names
find $dir -type -f size +$size -print0 | xargs -0 ls -1hsS,display a list of files with sizes in decreasing order of size of all the regular files under $dir directory tree that are bigger than $size in size
split --numeric-suffixes=1 --additional-suffix=.csv -l100 data.csv data_,"split ""data.csv"" into files with at most 100 lines each and using a prefix ""data_"" and numeric suffixes starting with 1 and ending with "".csv"""
"find . -not -regex "".*test.*""","search the current directory tree for files without ""test"" in their path names"
find . -size -500k -print,find files in the current directory and below that are less than 500 kb in size
echo | ssh-keygen -P '',remove the passphrase from user's ssh key without prompting.
read -r a,"read a line from standard input into variable ""a"" without backslash escapes"
find ~ -iname '*.jpg' -exec ls {} +,display a long list of all the jpg files in the home folder(plus at the end is used to give bulk data as input)
find /tmp/dir1 -exec basename {} \;,print the names of all files from the /tmp/dir1 directory tree
n_max=`ls . | wc -l`,saves number of lines of current directory listing in 'n_max' variable.
"find /path/to/inputfiles -name ""*.txt"" -exec /path/to/myprogram.sh {} \; > Out.txt","search for all text files in the directory ""/path/to/inputfiles"" and pass them as input to the shell script in exec command and save the output to the file out.txt"
tree --help,print the help message for tree
find /mnt/hda1/zdjecia/test1/ -iname “*.jpg” -type f -exec cp {} -rv /mnt/hda1/test{} ‘;’,"search for all the jpg files in the folder ""/mnt/hda1/zdjecia/test1/"" and copy these files to the folder  /mnt/hda1/test/<same name as the found file>"
find /tmp -type f -mtime -30 -exec cp {} /tmp/backup \;,copy all the regular/normal files from temp folder which have been modified in the last 30*24 hours to /tmp/backup
"find . -name ""*sub*.cpp""","find all *.cpp files in the current directory tree that contain ""sub"" in their names"
find . -name *.less,find all .less files in the current directory tree
find . -type f -name 'abc*' ! -name '*.py',"find with combine multiple search criterias , in this command serach  files that begin with abc in there name and dont have .py extension ."
which file | file -f -,"print file type of the executable file of command ""file"""
"cp -Rp ""$appname.app"" Payload/","recursively copies ""$appname.app"", preserving symlinks as symlinks to the 'payload' directory."
"find . -name ""foo.*""",find file which name like 'foo.*' in current directory.
rsync -av /path/to/files user@targethost:/path,"archive ""/path/to/files"" to ""user@targethost:/path"""
"find . -exec grep -i ""pw0"" {} \;","find all the files in the current directory and search for the word ""pw0"" in them."
find . -mtime +10 -print,find all files in the current folder that are not modified in the last 240 hours
"sudo echo ""deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen"" | sudo tee -a /etc/apt/sources.list.d/10gen.list","write ""deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen"" to standard output and append to ""/etc/apt/sources.list.d/10gen.list"" as root"
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    -n1 rm,remove all *.mp3 files in tmp directory but not in it's subdirectories
"date -d ""Oct 21 1973"" +%s","print epoch seconds for given time string ""oct 21 1973"""
find -name '*.html' -print0 | xargs -0 rename 's/\.html$/.var/',rename all *.html files under and below the current directory to *.var
"find . -name ""core"" -exec rm -f {} \;","delete all files (files, directories, links, pipes...) named 'core' under current directory"
find . -type d |xargs tar rf /somewhereelse/whatever-dirsonly.tar --no-recursion,archive the directory structure under current directory into /somewhereelse/whatever-dirsonly.tar
LANG=en_US cal,set lang variable to 'en_us' and prints calendar for a current month.
find . -name bin -prune -o -name src -prune -o -type f -print | xargs egrep -il '^From:.*unique sender',"list the files from the current directory tree that contain lines matching regular expression '^from:.*unique sender', ignoring ~/src and ~/bin"
find $dir_name -size $sizeFile -printf '%M %n %u %g %s %Tb %Td %Tk:%TM %p\n',list all files/directories under $dir_name with size $sizefile and print them according to the format string  '%m %n %u %g %s %tb %td %tk:%tm %p\n'
ssh -f user@gateway -p 24222 -L 3307:1.2.3.4:3306 -N,forward port 3307 on localhost to port 3306 on 1.2.3.4 via 'user@gateway' on port 24222
sed 100q datafile | split -C 1700 -,"split the first 100 lines of ""datafile"" into files with at most 1700 bytes each preserving lines"
find . -type f -wholename \*.mbox -print0,list regular files under the current directory ending in .mbox putting a null between each file found
find аргумент [опция_поиска] [значение] [значение],"find all files in the current directory аргумент and its sub-directories with the optional constraints of опция_поиска, значение and/or значение."
"cat <(fgrep -i -v ""$command"" <(crontab -l)) <(echo ""$job"") | crontab -",create new crontab set including $job and only jobs from current crontab that don`t contain $command
"find . -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | bash","rename the *.so files in the current directory tree prepending their names with ""lib"""
find . -type f -exec grep -i “redeem reward” {} \; -print,"search for the word ""redeem reward"" in all the regular/normal files in the current folder"
"watch -n 300 -t '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`'","execute '/usr/bin/fbi -noverbose -a -t 4 -u `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`' every 300 seconds and display without title"
find /home -mindepth 1 -maxdepth 1 -type d -name '*[aeiou][aeiou]*' -printf '*' | wc -c,find all directories in 1 level down the /home directory that have two consecutive vowels in their names and count them
any_command_what_produces_relative_path_names | cpio -pamVd /new/parent/dir,"copy files printed by ""any_command_what_produces_relative_path_names"" to ""/new/parent/dir"" preserving the directory hierarchy"
paste -s -d+ infile | bc,"mathematically sum each line in ""infile"""
apropos -s 3 . | grep ^[a-z],"searches the manual pages with descriptions in section 3, that name begins with lowercase letter."
"DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )""",store absolute path of executing script
find . -exec echo {} ;,list files in the current directory tree using echo
find . -type f -exec ls -s {} + | sort -n -r | head -3,display the three largest files by size in current folder
"find /etc -name ""*.txt"" -exec ls -l {} \;",list all *.txt files/directories under /etc
find . -mtime 30 -print,get all the files that are exactly 30 days old
find . -name \*.c -exec grep wait_event_interruptible {} /dev/null \;,"find all *.c files under and below the current directory that contain ""wait_event_interruptible"""
{ time ls; } 2>&1 |  cat > time.txt,saves 'ls' output together with time report to a file 'time.txt'.
find . -size +24000c,find files in the current directory tree whose size is greater than 24000 bytes
dig $domain,get a record for domain $domain
chown -R $1:httpd *,"recursively change owner to ""$1"" and group to ""httpd"" of all files in the current directory"
"find / \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \  \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)","find setuid files and directories writing the details to /root/suid.txt , and find large files writing the details to /root/big.txt, traversing the filesystem just once"
find . -maxdepth 1 -type d -print0,find all the directories in current folder and do not search in sub directories
export PS1='$(whoami)@$(hostname):',"export variable ""ps1"" as the current username ""@"" the hostname"
"basename ""$(pwd)""","get current directory name without full path, ie. the part after the last /"
"fold -w79 yourfile | sed -e :a -e 's/^.\{0,78\}$/& /;ta'","wrap each line in ""yourfile"" to fit in 79 characters and right pad any lines shorter with spaces"
sort file_a file_b|uniq -u,"print unique lines in ""file_a"" and ""file_b"""
find /usr -inum 1234 -print,search  all directory from /usr downwards for files whose inode number is 1234 and print them .
ls -C1 -t| awk 'NR>5'|xargs rm,removes all files from current folder but 5 newest ones.
shopt nullglob,shows status of a shell option 'nullglob'.
sort --random-sort $FILE | head -n 1,prints a random line from $file
find -type f -exec printf '\n' \; | wc -l,counts all files in a current folder and subfolders.
rm `find ./ -name '.DS_Store'` -rf,recursively removes all files like '.ds_store' from current folder.
find ./ -type d -exec rmdir --ignore-fail-on-non-empty {} 2>/dev/null \;,finds and deletes all empty folders (ones that contain no files or subfolders).
dirname `pwd -P`,print the directory name of the physical current working directory
mount --bind /tmp/fakerandom /dev/random,"bind mount ""/dev/random"" on ""/tmp/fakerandom"""
"find . -name ""*.html"" -exec grep -lR 'base\-maps' {} \; | xargs grep -L 'base\-maps\-bot'","list .html files in the current directory tree that contain string ""base\-maps"" but do not contain string ""base\-maps\-bot"""
date -d @$TIMESTAMP,format time string @$timestamp according to default time format
find . -type f -size -10k,display all the regular files in the current folder that are less than 10kb
find . -mindepth 1 -maxdepth 1 -type d -print -exec git -C {} pull \;,run 'git pull' in every subdirectory of the current directory
read PASSWORD,"read a line from standard input into variable ""password"""
find sourceDir -mindepth 1 -print0 | xargs -0 mv --target-directory=destDir,move all files from the `sourcedir' directory tree to the `destdir' directory
command 2>&1 | tee /path/to/logfile,"write output and error of ""command"" to standard output and to ""/path/to/logfile"""
"find . \( ! -regex '.*/\..*' \) -type f -name ""whatever""",find all regular files named 'whatever' under current directory tree excluding all paths that contain any hidden directory
"tree -if | grep \\.[ch]\\b | xargs -n 1 grep -H ""#include""","find "".c"" and "".h"" files in the current directory tree and print lines containing ""#include"""
"ver=`echo -ne ""$1\n$2"" |sort -Vr |head -n1`","save the greater version number of ""$1"" and ""$2"" into variable ""ver"""
"for f in `find -name '*company*'` ; do mv ""$f"" ""`echo $f | sed s/company/nemcompany/`"" ; done",rename all *company* files/directories under current directory to *nemcompany* files/directories
"find / -user root -iname ""*.txt"" | head",find all *.txt (case insensitive) files of user root under / directory and show a few lines of output from the beginning
find / -name composer.json,find all files on the system whose names are 'composer.json'
find {} -name 'upvoter-*' -type f -or -type l -maxdepth 1 -perm +111,find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory
"big_lines=`cat foo.txt | grep -c ""$expression""`",save number of strings with $expression pattern in 'foo.txt' to 'big_lines' variable.
"find . -name ""*.txt"" | parallel -j1 --tty vim",find all .txt files in the current directory tree and edit them with `vim'
"b=`echo ""$a"" | awk '{ print tolower($1) }'`","set variable ""b"" to the first word of ""a"" converted to lowercase."
"var=""$(find . -name 'gen*.bt2')""",search for all the files in the current folder which start with gen and end with bt2 and assign the output list to the variable var.
find . -mindepth 2,find all files in and below all subdirectories of the current directory
"find . -name test -exec rm -R ""{}"" \;","remove all files and directories called ""test"" from the current directory tree"
"find . -iname ""*notes*"" | xargs grep -i mysql","search for the word ""mysql"" in all the files in the current containing the word ""notes"" in their name"
find . -name '*.txt' -exec process {} \;,find all *.txt files/directories under current directory and execute process command for each of them
find httpdocs -type d,find all directories in directory tree `httpdocs'
hostname  -I,print the ip addresses for the current host name
"tac a.csv | sort -u -t, -r -k1,1 |tac",filters unique lines by matching against the first column of a .csv file
"grep -Ril ""text-to-find-here"" /","finds recursively and following symlinks from root folder all files that contain ""text-to-find-here"" and prints files names."
ln -sn git-stuff/home/profile .profile,"create a symbolic link named "".profile"" to ""git-stuff/home/profile"" without dereferencing "".profile"""
cd /some/where/long,go to directory /some/where/long
"find . -lname ""`pwd`*"" -exec sh -c 'ln -snvf `python -c ""from os.path import *; print relpath(\""$(readlink {})\"",dirname(\""{}\""))""` {}' \;",converts all absolute symbolic links to relative symbolic links
find . — type f -exec ls -1 {} \;,display a long listing of all the files in the current folder
find $HOME -mtime +365,search the home directory tree for files last modified more than a year ago
"find /home/jul/here -type f \( -iname ""*.php"" -o -iname ""*.js"" \) ! -path ""/home/jul/here/exclude/*""",find all *.php (case insensitive) and *.js files (case insensitive) under /home/jul/here excluding  /home/jul/here/exclude/* paths
"find . -name ""*album*"" -a -name ""*vacations*"" -a -not -name ""*2015*""","search the current directory tree for files containing ""album"" and ""vacations"" in their names and not containing ""2015"""
find . -exec file {} \; | grep text | cut -d: -f1,"find all files whose name or type description includes ""text"", display only paths to files."
find . -type l -! -exec test -e {} \; -print,find all broken symlinks under current directory
find ./subdirectory/ -type f,display all the regular/normal files in a folder
find . \( -size +700k -and -size -1000k \),find files in the current directory tree of size between 700k and 1000k
grep ^malloc `find src/ -name '*.[ch]'`,search all the lines that start with the word malloc in the files ending with .c or .h or .ch
yes | cp * /tmp,"answer ""y"" to all ""are you sure?"" prompts from command ""cp * /tmp"""
screen -x main -p oldwindow -X title blah,create a named screen session
$ my_temp_dir=$(mktemp -d --tmpdir=$temp_dir -t $template),"creates temporary folder in a $temp_dir folder with name pattern defined by $template, and stores path to created folder in 'my_temp' variable."
find MyApp.app -name Headers -type d -prune -exec rm -rf {} +,search non-recursively directory tree `myapp.app' for directories whose name is 'headers' and delete them in an optimized way
unzip -l some-jars-and-textfiles.zip | tr '[:blank:]' \\t | cut -f 5 | grep jar,"clean up the output of ""unzip -l"" and print only the ""jar"" files"
find . -name *.pdf | xargs tar czvf /root/Desktop/evidence/pdf.tar,create a tar ball of all pdf files in current folder
"find Cam2/2013* -name ""*.jpg"" -print0 | xargs -0 cat | ffmpeg -f image2pipe -framerate 30 -vcodec mjpeg -i - -vcodec libx264 -profile:v baseline -level 3.0 -movflags +faststart -crf 19 -pix_fmt yuv420p -r 30 ""Cam2-2013-30fps-19crf.mp4""",find all *.jpg files in cam2/2013* paths and send the contents to a ffmpeg command to create a video file
find . -name '*.cpp' | sed -e 's/\/[^/]*$//' | sort | uniq,search for al cpp files in current folder and replace all expect the parent directory name of these files and display it them sorted order
"find . -regex "".*\(\.txt\|\.pdf\)$""",display all the text and pdf files in the current folder
find . -type d -exec chmod 777 {} \;,change permissions to 777 for all directories in the current directory tree
nl,number each non-blank line of standard input
yum --enablerepo=remi upgrade php-mbstring,"upgrades 'php-mbstring' package, enabling 'remi' repository."
read XPID XUSERID XPRIORITY XVIRTUAL XRESIDENT XSHARED XSTATE XCPU XMEM XTIME XCOMMAND,read a line from standard input and save received words sequentially in variables xpid xuserid xpriority xvirtual xresident xshared xstate xcpu xmem xtime xcommand
find -regex '.*/modules\(/.*\|$\)' \! -regex '.*/modules/.*/modules\(/.*\|$\)' -type d -links 2,"find all leaf directories that include only one occurrence of ""modules"""
cat infile | paste -sd '  \n',"write every two lines in ""infile"" on a single line separated by a space"
find . -type f -print | xargs ls -l,list all files in the current directory tree invoking xargs only once
"find . -name ""*"" -exec chgrp -v new_group '{}' \; -exec chmod -v 770 '{}' \;","change the group to ""new_group"" and permissions to 770 for all the files in the current folder"
find . -type d -exec chmod 2770 {} +,set permissions to 2770 for all directories in the current directory tree
cp --remove-destination `readlink file` file,"copy file linked to by ""file"" to ""file"""
find . -type f -size +2G,find regular files that are larger than 2gb
echo ee | tee /dev/pty/2 | foo,"write ""ee"" to standard output on ""/dev/pty/2"" and as input to command ""foo"""
"find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -Z -i --label=""{}"" ""perry sound"" | xargs -0 -I{} grep -i -l --label=""{}"" ""October 26, 2004"" ""{}""' \;","find *.pdf files in the pdfs directory tree that contain text ""perry sound"" and ""october 26, 2004"""
"find . -type f -name ""*.txt"" ! -path ""./Movies/*"" ! -path ""./Downloads/*"" ! -path ""./Music/*""","find *.txt files in the current directory tree, ignoring paths ./movies/*, ./downloads/*, and ./music/*"
"find . -type f -printf '%p %s\n' | perl -ane '$sum+=$F[1];END{print ""$sum\n""}'",get the total sizes of all files under current directory
"find  / -type d -iname ""apt"" -ls",find not case sensitive all directories that names are 'apt' and display details
ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' /cygdrive/c/Users/Mic/mypics,"create a symbolic link with absolute path ""/cygdrive/c/users/mic/mypics"" to file ""/cygdrive/c/users/mic/desktop/pending - pics/"""
zcat number.txt.gz | { zcat xxx.txt.gz | comm -12 /dev/fd/3 - ; } 3<&0,"print shared lines in ""number.txt.gz"" and ""xxx.txt.gz"""
find . -type f -exec sh -c 'echo first; false' \; -exec echo second \;,find all files in current directory and execute 'echo first; false' for each file
find  . -type d -mindepth 1 -print -exec chmod 755 {}/* \;,find all directories under minimum 1 level down the current directory and set their permission to 755
find . -iname '*sitesearch*' | grep demo,"search for files with ""sitesearch"" in their names and ""demo"" in their path names"
find . -type f -not -name ‘.*’ -mtime +500 -exec ls {} \;,display the list of all the normal files excluding hidden files which have been accessed in the last 500 days
find / -mmin +90,find files on the system modified more than 90 minutes ago
sed -i 's/foo/bar/g' file,"modify and rewrite 'file' replacing all instances of ""foo"" with ""bar"""
find . -mindepth 2 | xargs chmod 700,change permissions to 700 for files and directories deeper than the current directory
find -type f -name '*.au',"search for files in the current folder ending with "".au"""
find -name '*.[ch]' -exec sed -i 's/\<foo\>/bar/g' {} +,"replace all occurrences of word ""foo"" with ""bar"" in *.c and *.h files from the current directory tree"
"history ""$@"" | tac | nl | tac | sed 's/^\( *\)\([0-9]\)/\1-\2/'","prepend the reverse history number as negative values to the output of the history command with arguments ""$@"""
"find ./ -type f -name ""*"" -not -name ""*.o""",search the current directory tree for all regular non-hidden files except *.o
find . -name foo.mp4 -exec dirname {} \;,find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories
"find foo bar baz -name ""*.rb""","search three folders named foo, bar, and baz for all ""*.rb"" files"
find /home -type d -name testdir,search for the directory testdir in the folder /home
"find . -type d -name ""*log*"" | xargs -I {} sh -c ""echo {};ls -la {} | tail -2""","find all directories matching pattern ""*log*"" in the current directory tree and print the last 2 lines of their 'ls' listing"
"mv {,new.}original.filename","rename ""original.filename"" to ""new.original.filename"""
find * /home/www -type f,find all regular files in current directory and /home/www directory
"find /dir/to/search/ -name "".*"" -ls","display list of all the hidden files in the directory ""/dir/to/search/"""
find . \( -path '*/.*' -prune -o ! -name '.*' \) -a -name '*.[ch]',find *.c and *.h files under the current directory tree skipping hidden directories and files
find ./ -name Desktop,find all files/directories named 'desktop' under current directory
df -h /dir/inner_dir/,report file system containing path to /dir/inner_dir/ disk usage human-readable.
find -amin 30,find all files/directories under current directory that were accessed 30 minutes ago
find / -user user1,find all files starting from / that belong to user1
finger $USER_NAME | grep Directory | expand | cut -d ' ' -f 2,"print the home folder of ""$user_name"""
yes | head -n10 | grep -n . | cut -d: -f1 | paste -sd:,"print numbers 1 through 10 separated by "":"""
"find . -type f \( -iname ""ES*"" -o -iname ""FS_*"" \)",find all es* and fs_* files under current directory
ps -p $$ | awk '$1 == PP {print $4}' PP=$$,get the current shell's executable name from the output of 'ps'.
find . -type f -exec ls -s {} \; | sort -n -r | head -5,display the 5 largest files in the current directory and its sub-directories.
find ./ -daystart -mtime -10 -and -mtime +1,find files whose data was modified within the given days of the month
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do awk '{ sub(""\r$"", """"); print }' $path > $path""_new""; done","remove the ""^m"" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names"
grep  $USER file |nl,"find all lines matching ""$user"" in ""file"" and number the output"
find . -name \*.java | tr '\n' '\0' | xargs -0 wc,"print newline, word, and byte counts of each '*.java' file within current directory, and total newline, word, and byte counts"
"find . -name ""*.VER"" -exec grep -P 'Model-Manufacturer:.\n.' '{}' ';' -print","search the .ver files from the current directory tree for perl regular expression ""model-manufacturer:.\n."""
"find ./ -regex ""./cmn-.\.flac""","find "".flac"" files in current folder using regular expressions"
alias go='ssh $(pbpaste) -l pete',"set alias ""go"" for command 'ssh $(pbpaste) -l pete'"
"find . -name '*.php' | xargs wc -l | sort -nr | egrep -v ""libs|tmp|tests|vendor"" | less","gives longest '*.php' files with line count first, and excludes directories with ""libs"", ""tmp"", ""tests"" and  ""vendor"" in their paths."
find / -mtime +31 -print,show the list of files modified more than 31 days ago
find . -size 0 -ls,display list of all the files in the current folder which are empty.
tar cfvz --exclude='<dir1>' --exclude='<dir2>' target.tgz target_dir,create a compressed archive of a target directory excluding '<dir1>' and '<dir2>'
find /usr -iname centos,search for the file centos in /usr folder ( case insenstive search )
find xargstest/ -name 'file?B' | sort | xargs head -n1,print the first line of every file matching pattern 'file?b' in the xargstest/ directory tree
find $YOUR_DIR -type f,find all files under $your_dir
$(dirname $(readlink -e ../../../../etc/passwd)),prints path to folder that contains target of the symbolic link ../../../../etc/passwd.
cat file | paste -d' ' - -,"print every two lines in ""file"" on a single line separated by a space"
"alias rm100m=""find / -type f -name *.tar -size +100M -exec rm -i {} \;""",assign the alias rm100m to a find command that removes any .tar file larger than 100m.
"echo -e ""Testing\r\nTested_Hello_World"" | awk -v RS=""_"" '{ print $0; }' | od -a","replace ""_"" with newlines in ""testing\r\ntested_hello_world"" and display the named characters"
split --lines $lines_per_file complete.out,"split ""complete.out"" into files with at most ""$lines_per_file"" lines each"
find . -type d -print0 | xargs -0 chmod 2775,"change the permissions of all the directories in the current folder, print0 is used for handling files with newlines in their file name"
ps axu | grep jbos[s] | tr -s ' ' | cut -d' ' -f5,"print virtual memory usage of all processes owned by ""jbos[s]"""
find . -name '*.gz' ! -name '*dvportgroups*' ! -name '*nsanity*' ! -name '*vcsupport*' ! -name '*viclient*' ! -name 'vsantraces*' -exec gunzip -vf {} \;,"unzip all "".gz"" files in the current directory tree excluding files containing ""dvportgroups"", ""nsanity"", ""vcsupport"", ""viclient"", and ""vsantraces"""
find /home/baumerf/public_html/ -mmin -60 -not -name error_log,find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding error_log files/directories
"netstat -rn | gawk '/UG/ {print $NF}' | xargs ifconfig | gawk 'match($0,/inet addr:(.*) B/,a) {print a[1]}'",finds ip address of default network interface.
which studio | xargs ls -l,"print file information of command ""studio"""
find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir -p,"create a copy of the current working directory structure in the usr/project directory,"
find . -type f -perm +111 -print,search the current directory tree for files executable by at least someone
"echo ""http://www.suepearson.co.uk/product/174/71/3816/"" | cut -d'/' -f1-3","extract and print hostname and protocol part from url like ""http://www.suepearson.co.uk/product/174/71/3816/""."
find . -size +1000k,list all files in the current directory tree larger than 1000 kb
find . -name 'test*',find all files/directories that start with 'test' in their names under current directory tree
mount --bind /absolute/path/to/some/where/else project1/link1,"mount ""project1/link1"" as a bind directed at ""/absolute/path/to/some/where/else"""
"find ./test -printf ""././%f\n""| cpio -o -F newArch",create an archive named newarch from the contents of ./test directory
find ./cms/djangoapps/contentstore/views -iname *.css | xargs sed -i s/[Ee][Dd][Xx]/gurukul/g,replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/views directory
zcat /proc/config.gz | grep CONFIG_64BIT,"search for ""config_64bit"" in gzip compressed file ""/proc/config.gz"""
comm -23 <(find dir1 | sed 's/dir1/\//'| sort) <(find dir2 | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/',"print all unique file paths under ""dir1"" compared to ""dir2"""
find . -type f -group sunk,"display all the users in the current folder that belong to the group ""sunk"""
"find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name ""*.txt"" -delete",remove all *.txt files under the given directory modified more than 5 minutes ago
cat -n file.txt | less,"display file.txt with lines numbered, and page interactively through the result."
find -type l,find all symbolic links in the current directory tree
"touch -d ""$(date -r ""$filename"") - 2 hours"" ""$filename""",adjust the timestamp of file $filename by subtracting 2 hours from it
"tmux_version=""$(tmux -V | cut -c 6-)""",saves 'tmux' version in the 'tmux_version' variable.
find /etc /srv \( -path /srv/tftp/pxelinux.cfg -o -path /etc/mtab \)  -prune -o -print,display all the files in the folders /etc /srv excluding the paths /etc/mtab and  /srv/tftp/pxelinux.cfg
mv $1 `echo $1 | tr '[:upper:]' '[:lower:]'`,rename uppercase file or folder name $1 to lower case name
mount --bind /usr/bin /path/to/chroot/jail/usr/bin,"remount subtree ""/usr/bin"" on ""/path/to/chroot/jail/usr/bin"" as a bind"
cat files.txt | xargs du -c | tail -1,"print the grand total disk usage of all files listed in ""files.txt"""
"find . -perm u=rwx,g=rx,o=rx","search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx"
alias foo='BAR=baz',"set alias ""foo"" for command 'bar=baz'"
find bugzilla -type d -exec chmod 775 {} \;,make all the bugzilla subdirectories permission 775
"find ./default/files -type d -exec chmod ug=rwx,o= '{}' \;","set permissions to ug=rwx,o= for directories inside the ./default/files tree"
"find ""$d"" -type f -printf ""%T@ :$f %p\n"" | sort -nr | cut -d: -f2- | head -n""$m""","prints $m latest modified files within the $d folder, using $f format for printing timestamp."
unset $(/usr/bin/env | /usr/bin/cut -d = -f 1 | /usr/bin/xargs),unsets all environment variables.
find /usr -type b -name backup -print,search  all block spacial files called backup from /usr directory downwards and print them .
tail -n 100 file1 | bar | wc -l,counts lines in file file1 and shows progress bar while doing.
"find . -name ""*.txt"" -print0 | xargs -0 egrep mystring",search for 'mystring' in all *.txt files under current directory
pstree -a -p 20238,show process tree with command-line arguments of a process that has id 20238.
find /var/named -type f -name *.db,find all the database files in the folder /var/named
find . -name '*' -exec file {} \; | grep -o -P '^.+: \w+ image',"find all files under current directory whose file type description contains ""image"", display the paths to files and file type descriptions."
printf '%-10s%-10s%-10s%s\n' $(yes x | head -n 10),"print 10 space padded ""x""s to a width of 10 with at most 4 per line"
find . -type f -name INPUT.txt -print0 | xargs -0 sed -i.bak '/^#/d',"find all files called ""input.txt"" in the current directory tree and remove lines starting with # in them, saving backup copies as input.txt.bak"
kill $(ps -o pid= -s $(ps -o sess --no-heading --pid 21709)),send sigterm signal to entire session of processes containing process whose id is 21709.
find . -maxdepth 1 -ctime +1 -name file,find all files named 'file' in 1 level down the current directory whose status were changed more than 1 day ago
"rsync -rave ""ssh -i /home/test/pkey_new.pem"" /var/www/test/ ubuntu@231.210.24.48:/var/www/test","archive ""/var/www/test/"" to ""/var/www/test"" on host ""231.210.24.48"" as user ""ubuntu"" via ssh using identity file ""/home/test/pkey_new.pem"""
"find dir -name '*.jpg' -exec ln -s ""{}"" \;","create symbolic links in current directory for all files located in ""dir"" directory and have filename extension ""jpg"""
"ssh askapache 'nice -n 19 sh -c ""( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )""'","execute ""chown -r ask:ask /www/askapache.com"" in the background on server ""askapache"" with a niceness of 19"
find /myDir -name 'log*' -and -not -name '*.bz2' -ctime +7 -exec bzip2 -zv {} \;,"finds all the log* files in /mydir recursively that are more than 7 days older, skipping already created .bz2 archives and compresses them."
find -type d -exec find {} -maxdepth 1 \! -type d -iname '.note' \;,"search the current directory tree for files whose name is "".note"", case insensitive"
find . -perm -0002 -print,find all files in the current folder which have only the write permission for the others
find /home/luser -type f -name ‘*.mpg’ | parallel rm -f,remove all .mpg files in the /home/luser directory tree
"find `pwd` -name ""*.log"" -exec grep ""The SAS System"" {} \;","search the .log files in the current directory tree for string ""the sas system"""
find ~music -type f -iname *.mp3 | wc -l,count all the mp3 files in the music user's home and subdirs.
"ssh -t example.com ""screen -r -X ls""","allocate a pseudo-terminal and execute ""screen -r -x ls"" which executes ""ls"" within the screen session on host ""example.com"""
"tmux new-session -s vims -n vim0 -d ""vim foo""",starts new detached tmux session 'vims' with new windows 'vim0' and opens file 'foo' within.
find ~/Library -name '* *' -print0 | xargs -0 tar rf blah.tar,create a tar file containing all the files in ~/library folder that contain spaces in their names
find /usr -newer /tmp/stamp$$,find files/directories under '/usr' directory tree that are newer than /tmp/stamp$$ by modification time
"find . -type f \! -name ""*.Z"" \! -name "".comment"" -print | tee -a /tmp/list",find all the regular/normal files in the current directory which do not have the extension comment and and redirect the output to /tmp/list
yes | rm -ri foo,"answer ""y"" to all prompts of ""rm -rf foo"""
"find /path -name 'pattern' -exec bash -c 'for file; do somebashstatement ""$file""; done' -- {} +","run a somebashstatement with the filename as argument, inside a for loop that iterates over a number of filenames found recursively in /path that match 'pattern'"
find . -mtime -1 -type f -print,find all the normal/regular files in the current directory which have been modified in the last 24 hours
chmod 644 `find -type f`,set 644 permission to all regular files under current directory
cpio -i -e theDirname | md5sum,calculate md5 checksum of thedirname
"find . -iname ""$srch1*"" -exec grep ""It took"" {} \; -print",search for 'it took' in all $srch1* (case insensitive) files under current directory
echo $(yes % | head -n3),print 3 space separated '%'
find /some/directory -type l -print,find all symbolic links under '/some/directory' driectory tree
rsync -r --verbose --exclude 'exclude_pattern' ./* /to/where/,"recursively copy all files and folders in the current directory excluding ""exclude_pattern"" to ""/to/where/"""
alias h='history',"set alias ""h"" for command ""history"""
"find .  -name ""*.txt"" -type f -daystart -mtime -91 -mtime +2 | xargs cat | sort | uniq",sort and display the unique lines display the contents of all the files that have been modified in the last 91 days and not in the last 2 days
"find / -name ""*.conf"" 2>>/dev/null",find all the *.conf files under / (root) redirecting error messages to /dev/null
mkdir tata,"make directory ""tata"""
ls -t | head -n1,returns the single most recent file in a directory
cd ${CURR_DIR} && find .,find all files/directories under ${curr_dir} directory
"find . -type f -name "".*"" -newer .cshrc -print",find any hidden regular files in the current directory and its sub-directories that were modified after .cshrc was last modified.
"DIR_PATH=`readlink -f ""${the_stuff_you_test}""`","remove symbolic links and get absolute path of ""${the_stuff_you_test}"" and save to variable ""dir_path"""
cp $(ls -1tr * | tail -1) /tmp/,copies newest file under the current folder to the '/tmp/'
"nl | sort -R | cut -f2 | head -""${1:-10}""","print ""$1"" or default 10 random lines from standard input"
find ./ -name blah,find files/directories named blah under current directory
find . -type f -exec grep California {} \; -print | wc -l,"find all files under and below the current working directory with the word california in the file, and count the number of lines in the output"
"echo ""$list"" | uniq -c","show the value of variable ""list"", discarding consecutive duplicates and adding number of occurrences at the beginning of each line."
find . -type f -exec grep -n -i STRING_TO_SEARCH_FOR /dev/null {} \;,search for the case insensitive regex 'string_to_search_for' in all files under current directory
"find /home/family/Music -name '*.m4a' -exec ffmpeg -i ""{}"" -acodec libvorbis -aq 6 -vn -ac 2 ""{}.ogg"" \;",find all *.m4a files under /home/family/music directory and convert them to ogg
find path/to/folder -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum,calculate the sha1 sum for the contents of the regular files in the path/to/folder directory tree
ssh -Y $ssh_user@$ssh_server,invoke a trusted x11 forwarding ssh connection with the server $ssh_server as user $ssh_user
nl -ba infile,"add a line number to every line in ""infile"""
scp -Bpqr /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/*ela*L1*TE* dalvarado@localhost:/var/www/html/sbo/2010/teacher/ela/level1,"recursively copy all files and directories matching ""*ela*l1*te*"" in localhost's directory /tdggendska10/vig-preview-dmz-prod/docs/sbo/pdf/ to /var/www/html/sbo/2010/teacher/ela/level1 on localhost connecting as ssh user ""dalvarado"", in batch mode (no prompt for passwords) preserving file permissions and timestamps, and without displaying progress information."
set `cal $month $year`,"saves printed calendar for $month, $year in positional variables."
"mount | grep -i ""/dev/sd.*"" | awk '{ print NR ""\t"" $1 ""\t"" $3 }' > mount_output &","print list of disk and mountpoint of disks matching ""/dev/sd*"" into ""mount_point"" as a background task"
"zcat file.gz | grep -o '""searchstring"":""[^""]*""'| sort | uniq -c | sort -n","unzip ""file.gz"", list the unique lines matching regex pattern '""searchstring"":""[^""]*""' prefixed by the number of occurrences, sort from least frequent to most frequent"
find /dir -mmin -60,find all files under and below /dir that were modified less than 60 minutes ago
"DBPREFIX=""$(hostname -s).mysqldb""","save the short host name appended with "".mysqldb"" in variable ""dbprefix"""
yum remove subversion,removes 'subversion' packages from system.
yes 'UUUUUUUUUUUUUUUUU' | tr -d '\n' > /dev/to/overwrite,"continuously write ""uuuuuuuuuuuuuuuuu"" without newlines to ""/dev/to/overwrite"""
find / -type f -perm -002 -print0,find files with 002 permission in entire file system with the null character as the delimiter
find . -wholename '/lib*',"find all the files in the current directory that have the word ""lib"" in them"
find media/ -type f -exec chmod 600 {} \;,find all files under media/ directory and change their permission to 600
find /var/tmp/stuff -mtime +90 -print | xargs /bin/rm,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
od -cvAnone -w1 | sort -bu,print a unique list of characters from standard input showing backslash escapes for non-displayables
find mydir -mindepth 2 -type d,find all directories under minimum 2 levels down the mydir directory
find /myDir -mtime 7 -exec rm -rf {} \;,delete all files in the /mydir directory tree that were last modified 7 days ago
"find . -name ""foo*""","find recursively all files whose names begin with ""foo"""
ifconfig en0 | grep inet | grep -v inet6,gets string with ip4 address of en0 network interface.
find /foo/bar -name '*.mp4' -print0 | xargs -0 mv -t /some/path {},move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path
find -ds . -mindepth 1 -type f -print0; printf '\0';,display all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directories
nl -ba | sed 786q | grep . | awk '{print $2$1}',output the standard input followed by the line number until line 786
find . type -f -atime -2,search the current directory recursively for regular files last accessed less than 2 days ago
find /tmp -name '*.swp' -exec rm {} \;,search for swap files (.swp files) in temp folder and remove them
"PS4='+$(date ""+%s:%N"") %N:%i> '","set trace prompt to print seconds, nnoseconds, script name, and line number"
"grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e ""pattern""","finds recursively all files having extension .c, .h in '/path/' that contain 'pattern', and prints matched strings with string number and file name."
"find . -type f | xargs grep -l ""search-pattern""","search for the word ""search-pattern"" in all the regular/normal files in the current folder and display the matched file name"
find . -print0 | xargs    -0 echo,find files/directories under current directory and print them
top,start 'top' to monitor all processes with the default settings.
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u;,find all of the distinct file extensions in current directory
"find / -perm 777 -iname ""Dateiname""","find all the files in the file system which have the permission 777 and with the name ""dateiname"""
"grep -r -l ""foo"" .","finds strings with text ""searched-string"" recursively in all files of current folder and prints names of files with matched strings."
"I'm assuming you only want to zip files that match names in $Namese. In your script, try replacing the find command with:  export Namese  find /var/tmp/ -type f -name '*.xml'",search for all xml files in some directory
"find . -type f  -name '*.java' -exec sh -c 'iconv -f cp1252 -t utf-8 ""$1"" > converted && mv converted ""$1""' -- {} \;",change the encoding of all *.java files in a directory and subdirectories from cp1252 to utf-8
find var/log -print0 -iname 'anaconda.*' | tar -cvf somefile.tar -T -,search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found ensuring white space safety
"find / -user root -iname ""*.txt""",find all txt files that belong to user root
"find . -name ""*.js.compiled"" -exec rename -v 's/\.compiled$//' {} +","find all files ending with ""js.compiled"" in current folder and rename them."
ls *.html | xargs -I {} sh -c 'mv $1 `basename $1 .html`.txt' - {},renames all *.html files in a current directory to *.txt files.
find . \( -name '*.bak' -o -name *.backup \) -type f -atime +30 -exec rm '{}' ';',remove all *.bak and *.backup files that were accessed last time more than 30 days ago
"me=""$(whoami)""","save the user name of the current user to variable ""me"""
curl http://www.example.com --proxy http://125.119.175.48:8909,"download contents from ""http://www.example.com"" using a proxy server"
find / -user edwarda -print | xargs chown earnestc,change the ownership of all the files in the file system from edwarda to earnestc
"ps -eo pcpu,pid,user,args | sort -r -k1 | less","page through a list of all running processes on the system, with those taking most cpu at the top of the list."
"finger -l | grep ""Name:"" | tr -s ' ' | cut -d "" "" -f 2,4- | sort | uniq",print each logged in user's username and full name
diff -q <(sort set1 | uniq) <(sort set2 | uniq),"print whether the unique contents of ""set1"" and ""set2"" differ"
find * -mtime -1 -daystart -print0 | cpio -pd0 ../changeset,"find all files and directories last modified less than a day ago and copy to ""../changeset"" creating directories as needed"
"find . -type f -name ""*.jpg""",search all jpg files in current folder
a=$(false),returns exit code 1 and terminates shell if 'set -e' was applied.
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs -n1 rm,remove all tmp/*.mp3 files
find -L /usr/ports/packages -type l -delete,remove all broken symbolic links in /usr/ports/packages
"basedir=$(cygpath -am ""$(dirname ""$0"")"")","takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable."
kill -9 $(lsof -i:3000 -t),immediately kill all processes using tcp port 3000 on the system.
"find . — name ""*.txt"" — print",find all the text files in the current folder
sudo chown -R  $USER:$GROUP /var/lib/cassandra,"recursively change the owner to ""$user"" and group to ""$group"" of ""/var/lib/cassandra"""
find ~/Images/Screenshots -size +500k -iname '*.jpg',find *.jpg screenshots that are bigger than 500k
find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf '{}' ';',delete all files/directories taken by the glob pattern * except the ones with the name 'b'
"find / -iname ""*.mp3"" -type f -exec /bin/mv {} /mnt/mp3 \;",search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3
find . -name '*~' -ok rm {} \;,remove all *~ files under current directory with confirmation prompt
find /myfiles -exec ls -l {} ;,list all files in the /myfiles directory tree
"find $(pwd) -name YourProgram -exec dirname {} \; | while read d; do cd ""$d"" && pwd; done","print on the standard output the names of all directories that reside in the current directory tree and contain file ""yourprogram"""
"find  /usr/lib/ /usr/lib64/ -lname ""*libstdc++*""","find symbolic links in /usr/lib and /usr/lib64 to files whose pathnames contain ""libstdc++"""
"find / -iname ""*.mp3"" -type f -print0 | xargs -0 -I '{}' /bin/mv ""{}"" /mnt/mp3/",search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3
find . -type f -not -empty | wc -l,display the count of total number of non empty files in the current folder
"find / -user tutonics -name ""file.txt""",find files/directories named 'file.txt' that belong to user 'tutonics' in the entire filesystem
"find . -type f |xargs ls -la| awk '{print ""chmod ""$1"" ""$NF}'>./filesPermissions.sh",create script filespermissions.sh that restores the original permissions of the regular files in the current directory tree
find /home -type f -name '*.aac',find all files with extension .aac in the /home directory tree
find ~ -name 'top*' -newer /etc/motd,find all files/directores that are newer than /etc/motd and conain the string 'top' at the beginning of their names under user's home directory tree
find <path> -type f -exec sh -c 'for f; do echo process $f;  done' sh {} +,find all regular files in <path> and execute process with all of them as arguments
shopt -p globstar,prints shell option 'globstar' with indication of its status.
find . -newer first -not -newer last -type d -print0 |  xargs -0 rmdir,"removes all empty folders under current path, aged between 'first' and 'last' timestamps."
find . -type f -exec perl -pi -e 's|xxx|yyy|g' {} ;,find and replace xxx with yyy in whole directory tree
top -b -p `pidof a.out`,use 'top' to monitor process 'a.out'
"find . \( -name ""foo"" -o -name ""bar"" \)","find files under the current directory called ""foo"" or ""bar"""
"find /home/*/public_html/ -type f -wholename *includes/constants.php -exec grep -H ""PHPBB_VERSION"" {} \;",identify cms version/releases accross all your phpbb installations
uname -o,"display operating system type, ie. gnu/linux"
sudo kill -15 $( sudo lsof -i:6000 -t ),send sigterm (signal 15) to all processes using tcp port 6000 on the system using root account.
su - jetty -c sh runProgram.sh,"run command ""sh runprogram.sh"" as user jetty"
"find ""$dir"" -maxdepth 1 -type f | sed 's#.*/#   #'",find all files in $dir directory without going into sub-directories and print only their names preceded by 3 spaces
find . -exec command {} \;,run `command' on each file from the current directory tree
find | xargs,find all files/directories under current directory
du -ksh * | sort -n -r,prints kb size of all top-level files and folders in a current folder in descending order in human readable format.
find $dirname -type f  > $tempfile,search directory $dirname for regular files and save the result to $tempfile
find plsql -type f  -perm -220 -exec ls -l {} \; 2>/dev/null,find files that are writable by both the “other” and the group
find . -mtime -7,find all files and directories that have been modified in the last seven days.
"yes ""this is the text I want to add to a file""|head -200>myFile.txt","write 200 lines of ""this is the text i want to add to a file"" to myfile.txt"
"find . -name ""*.rb"" -type f",find all *.rb (regular) files under current directory
tar tf nginx-1.0.0.tar.gz | xargs dirname | sort | uniq,print the sorted uniqe list of folders in compressed archive nginx-1.0.0.tar.gz
"find -name '*.php' -exec grep -iq ""fincken"" {} \; -exec grep -iq ""TODO"" {} \; -print",search for php files  in current directory and search for a word in all these files
head -c 100 file,returns the first 100 bytes in the file
echo $(ls -l $(which bash)),"print file information of command ""bash"""
find / -name expect 2>/dev/null,find all instances of a specific file in the entire file system and discard the errors
find . -type d -exec ls -dlrt {} \;,list all directories under current directory
ssh app1,"ssh into server ""app1"" as the current user"
"find $DIR -name ""*.txt"" -exec wc -l {} \;",print the number of lines for each *.txt file from the $dir directory tree
find -perm -644,find all files/directories under current directory which have read-write permission for owner and only read permission for group and others
"find . -name ""*.html"" -print",display all the html files in the current folder
find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print,display all the directories in the folder /path/to/dest except tmp and cache directories
find / -name composer.json -exec grep -n drush {} /dev/null \;,"find all files on the system whose names are 'composer.json' and search them for ""drush"""
find . -name '*.java' -mtime +7 -print,search the current directory tree for all .java files that were last modified at least 7 days ago
cat --help,print help on 'cat' command usage
read -n1 ans,"read a single character from standard input into variable ""ans"""
ping -c 4 www.stackoverflow.com | sed '$!d;s|.*/\([0-9.]*\)/.*|\1|',"print the average time of 4 ping requests to ""www.stackoverflow.com"""
top -p 18884 -p 18892 -p 18919,"monitor 3 specific process ids: 18884, 18892, and 18919 (gnu specific)"
head -c1024 /dev/urandom | xxd -p | tr -d $'\n',"convert the first 1024 bytes of ""/dev/urandom"" to a string of hexadecimal bytes"
find . -name custlist\* | perl -ne '$path = $_; s?.*/??; $name = $_; $map{$name} = $path; ++$c; END { print $map{(sort(keys(%map)))[$c-1]} }',get only the latest version of file from the 'custlist*' files under current directory
"find . -type f -name ""Tes*"" -exec ls -l {} \;","long list all the files in the curent folder starting with ""tes"""
"find ""$1""/.hg -type d -print0 | xargs chmod g+s",find all directories under $1/.hg and set their sgid bit
find ~/code -type d -name '[^\.]*' | tr '\n' ':' | sed 's/:$//',find all directories under ~/code excluding hidden directories and replace all newlines with : in the output then remove the last :
set -o history -o histexpand,enable history and history expansion within a script
ssh user@server 'DISPLAY=:0 nohup xeyes < /dev/null > std.out 2> std.err &',"start ""xeyes"" in the background on the remote server and exit the ssh session"
who | sed -e 's/[ \t].*//g',print list of all user names who are logged in
"find . -type f ! -iname ""*.txt"" -delete",delete all text files from current folder
find /data1/Marcel -size +1024 \( -mtime +365 -o -atime +365 \) -ls,list all files/directories under /data1/marcel which are greater than 524288 bytes and were modified or accessed more than 1 year ago
"alias lvim=""vim -c \""normal '0\""""","set alias ""lvim"" for command ""vim -c \""normal '0\"""""
find . \( ! -regex '.*/\..*' \) -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g',find all regular files under current directory (excluding hidden directories) and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files
find test,find all files/directories under test directory
find . -exec echo ' List of files & Direcoty'   {} \;,"find command will list of all files & directories from current directory , before listing echo command will display ' list of files & directory '"
find /mp3-collection -name 'Metallica*' -or -size +10000k,"display all the files in the folder /mp3-collection which are bigger than 10mb or which start with the name ""metallica"""
day=$(od -t x1 --skip-bytes=9 --read-bytes=1 file.moi | head -1 | awk '{print $2}'),"save hexadecimal byte 10 in binary file ""file.moi"" to variable ""day"""
"find . -name ""*.txt"" -printf ""%M %f \t %s bytes \t%y\n""",find all the text files in the current folder and display their permissions and size along with their name
find $2 -type f -exec bzip2 {} \;,recursively compresses all files within $2 folder.
"join -1 2 -2 1 -t, BigFile.csv LittleFile.csv",output all lines in bigfile.csv whose secondn comma-separated second field matches first field of a line in littlefile.csv.
find . -perm -20 -exec chmod g-w {} ;  or  find . -perm -20 -print | xargs chmod g-w,"find all files & directory which have write permission for group , remove the permission from group"
read -e -p '> ' $1,"read a line from standard input into the first argument (""$1"") using an interactive shell with prompt ""> """
find media/ -type d -exec chmod 700 {} \;,find all directories under media/ directory and change their permission to 700
find / -type f -atime -10 > March.files,save the list of all regular files accessed less than 10 days ago as `march.files'
"PROMPT_COMMAND='echo ""$(date +""%Y/%m/%d (%H:%M)"") $(history 1 |cut -c 7-)"" >> /tmp/trace'","append the date and command ran to ""/tmp/trace"" after every command"
wc -l $(git ls-files | grep '.*\.cs'),counts the number of lines in each *.cs file in a git repository.
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n'  | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$',list all ipv4 addresses found in all files under /etc directory
"sort -u -t, -k1,1 file","sort "","" delimited lines in ""file"" by the first field preserving only unique lines"
tail -n 1000 /var/spool/cron/*,"print the last 1000 lines of all files matching ""/var/spool/cron/*"""
cat | od -b,display standard input as octal bytes
cp --help,display detailed usage help of the 'cp' (copy) command.
find /usr -name filename.txt -print,"find the file ""filename.txt"" in the usr folder"
cat submission.cpp | astyle -bj | cpp - | md5sum,"calculate the md5 sum of ""submission.cpp"" with less sensitivity to superficial changes like comments or whitespace"
"GZIP=""$(which gzip)""","set variable gzip to the full path of command ""gzip"""
find / -perm 2644,find all the sgid bit files whose permissions set to 644
"zcat ""$file"" | awk '{print NF}' | head","print the column count of compressed file ""$file"""
find $something,find all files/directories under $something directory
find $STARTDIR -name '*.ps' -print,find all *.ps files under $startdir
find /mydir | xargs -I{} basename {},"search recursively through /mydir, outputting only the base (leaf) name of each file, directory, symlink etc. without any containing directories, that is the part following the last slash."
sudo chown root file.sh,"change the ownership of ""file.sh"" to ""root"""
find /usr/ -lname *javaplugin*,find all symbolic links containing 'javaplugin' in their names under '/usr' directory tree
find . -name 'my*',search the current directory for files whose names start with my
"find  /home/mine -iname ""*.png"" -printf ""%P\n "" | xargs  -I % -n1 cp %  /home/mine/pngcoppies/copy%",copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/' directory with new names constructed by prepending 'copy' in their names
find . -exec grep PENWIDTH {} \; | more,"search for files containing string ""pendwidth"" and view the result using the more command"
ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o LogLevel=quiet -i identity_file machine.example.org gcc -dumpversion,"print the gcc version installed on ""machine.example.com"" using identity file ""identity_file"" and suppressing the known hosts check and warnings"
"tar xvf ""$myarchive"" && cd ""${myarchive%.tar.gz}""",extract tar.gz archive and go into the directory that would normally be created by extracting it.
CC=$(which cc) ./configure,"run ""./configure"" with a new environment variable cc set to the full path of the command 'cc'"
find /usr/ports/ -name Makefile\* -exec grep -l QTDIR '{}' '+' | wc -l,find all files whose names begin with 'makefile' in the /usr/ports directory tree and count how many of them contain 'qtdir'
"find . -name ""*.java"" -exec grep ""String"" {} \+",find all *.java files under current directory containing the string 'string'
"find . -not -name ""*.exe"" -not -name ""*.dll"" -not -type d","search the current directory tree for files whose names do not end in "".exe"" and "".dll"""
"find $FOLDER -name "".*""",find all hidden files starting from the directory given as variable $folder
find `pwd` -type f -exec ls -l {} \; | wc -l,counts all files in a current folder and subfolders.
find ./ -type f -print | xargs    -i mv -f {} ./newdir,move all regular files under current directory to ./newdir
find /dev/sd*[a-z] -printf . | wc -c,count the number of files in the directory trees whose pathnames match pattern '/dev/sd*[a-z]'
read -sk,read a single character from standard input in zsh
"find /var -maxdepth 2 -type d -exec stat  -c ""%n %y"" {} \;",display the directory name along with the modified time for all the files /var
less -N file.txt,"display file.txt with lines numbered, and page interactively through the result."
find . -type f -name '*.js' \( -exec grep -q '[[:space:]]' {} \; -o -print \),find all .js files in the current directory tree that do not contain a whitespace
find . | sort,find all the files in the current folder and display them in the sorted order of their name
"find . -print | xargs grep -l -i ""PATTERN""",search for the case insensitive pattern 'pattern' in all files under current directory tree and display the matched files
sed 's/$/p/' file_of_line_numbers | sed -nf - source,"display only line numbers listed in 'file_of_line_numbers"" from file 'source'."
find . -mindepth 1 -type d | xargs chmod 700,change permissions to 700 for directories at the current level and deeper
find /starting/path -name target.out | xargs /path/to/simpleGrepScript.sh,find target.out files starting from /starting/path and pass them as arguments to /path/to/simplegrepscript.sh
"find . -name ""*.c"" -exec grep -ir ""keyword"" {} "";""",search for a word in all the .c files in the current directory
find . -name some_pattern -print0 | xargs -0 -i mv {} target_location,"find files in the current directory tree that are named ""some_pattern"" and move them to directory ""target_location"""
find /var/log/ -iname anaconda.*,search for files/directories with the case insensitive pattern anaconda.* in /var/log
"find `pwd` -name ""*log"" -type f","search the current directory tree for regular files whose names end in ""log"""
pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/',prints all child processes of a process with id 20238.
"paste -d"" "" file1 file2 | paste -d'|' - file3 | sed 's,|, ,g'","print each line in ""file1"" and file2"" separated by tabs and ""file3"" separated by a space"
find . -type f | xargs stat --format=%s | awk '{s+=$1} END {print s}',get the total size in bytes of all files in the current directory tree
paste --delimiter=\\n --serial *.txt,"print each "".txt"" file in the current directory"
find ./ -exec sed -i 's/apple/orange/g' {} \;,replace the word apple with orange in all the files in the current folder
find /tmp/a1 | xargs tar cvf foo.tar,"create tar archive ""foo.tar"" and copy all files from directory tree /tmp/a1 to it"
find ./ -depth -print | cpio -pvd newdirpathname,"copy the current directory tree to ""newdirpathname"" preserving directory hierarchy"
find /path/to/look/in/ -type d -name '.texturedata' -prune,find all first occurrences of directories named '.texturedata' under '/path/to/look/in' directory tree
grep -o '^\S\+' <(comm file1 file2),print first word of lines unique for 'file1' file
find /path/to/directory -type f -mtime 61 -exec rm -f {} \;,search the /path/to/directory tree for regular files modified 61 days ago and then remove them
"find . -name ""*.txt"" | parallel 'ext=""{/}"" ; mv -- {} foo/{/.}.bar.${ext##*.}'",find all the text files in current folder and change the extension of these files and move them to another folder
set -x,echo each command before running
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$"" -print0 | xargs -0 -n 1 ls","list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names"
find /path -name file_name,"search for the file ""file_name"" in the folder /path"
"find /somefolder -type f '(' ""${ARGS[@]}"" ')'",find regular files under '/somefolder' directory tree satisfying the options/conditions/operations provided in ${args[@]} array with find command
"find . -name ""article.xml"" -exec rename 's/article/001_article/;' '{}' \;","rename recursively all files in the current directory tree that are called ""article.xml"" to ""001_article.xml"""
find /home -type d -perm 777 -print -exec chmod 755 {} \;,find directories with permissions 777 and change them to 755 recursively
"PATH=$(echo $PATH | tr "":"" ""\n"" | grep -v $1 | tr ""\n"" "":"")",remove the path $1 from the path environment variable
"find / -name ""apache-tomcat*""","display all the files in the entire file system which begin with ""apache-tomcat"""
DIR=`pwd`/`dirname $0`,"save the current working directory and the directory name of the current script to variable ""dir"""
"hostname -I|cut -d"" "" -f 1",print ip addresses of the current host
pstree -p user,prints process tree of user 'user' processes.
diff /destination/dir/1 /destination/dir/2 -r -X exclude.pats,"display differences between /destination/dir/1 and /destination/dir/2 excluding files that match any pattern in file ""exclude.pats""."
find / -name '<name_pattern>' -type d | sort | uniq,print a sorted list of unique directory paths in entire file system that match the pattern '<name_pattern>' in their names
find dir -not -path '.git' -iname '*.py',find all *.py (case insensitive) files/directories under dir directory ignoring .git path
ps -o pid= --ppid $PPID | xargs kill -9,immediately kill all child processes of parent process whose id is specified by the variable ppid.
chmod 600 file,"set permission of ""file"" to read only for the owner"
chmod +x pretty-print,"add executable permission to ""pretty-print"""
"ifconfig en0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'",gets mac address of en0 network interface.
content_dir2=$(mktemp),creates temporary file and saves path to it in 'content_dir2' variable.
nl -n ln log.txt | sed ...,"left justify number each non-blank line in ""log.txt"" as input to ""sed ..."""
fold -w1 file | pr -4t | tr -d '\n\t\- ' | sed '$a\',"print each column in ""file"" with ""-"" character removed"
find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i cp /dev/null {},truncate all non-empty regular files under the current directory
command | tee /path/to/logfile,"write output of ""command"" to standard output and to ""/path/to/logfile"""
"gzip ""$file""",compress $file file using gzip
find . -path './pma' -prune -o -path './blog' -prune -o -path './punbb' -prune -o -path './js/3rdparty' -prune -o -print | egrep '\.php|\.as|\.sql|\.css|\.js' | grep -v '\.svn' | xargs cat | sed '/^\s*$/d' | wc -l,"recursively counts non-blank lines in all files in a current folder, that match regex '\.php|\.as|\.sql|\.css|\.js', but skip folders './pma', './blog', './punbb', './js/3rdparty' and files like '*.svn'."
find images -type f,find all files under images directory
"find -printf ""%P\0"" -exec uuid -v 4 \; | sort | awk -F'\0' '{ print $2 "" "" $1}'",generate uuids for the files from the current directory tree
"find /home/john/script -name ""*.sh"" -type f -exec chmod 644 {} \;",change permissions of all the script files in a directory
sort ips.txt | uniq -c,"sort the contents of file ""ips.txt"", eliminate duplicate entries, and prefix each entry with number of occurrences."
find . type -f -mtime -2,search the current directory recursively for regular files last modified less than 2 days ago
"find . -type f -name ""*cache.html"" -exec sh -c ""gzip < {} > {}.gz"" \;","compress every file in the current directory tree that matches ""*cache.html"" and keep the original file"
"awk 'NR==1 {print $0, ""foo"", ""bar""; next} {print $0, ($2==""x""?""-"":""x""), ($4==""x""?""-"":""x"")}' file | column -t","append ""foo"" and ""bar"" column in file ""file"" with values dependent on the current table contents"
"find . -mindepth 1 -maxdepth 1 -type d -printf ""%P\n""",list the names of the directories in current directory without going into sub-directories
find / -size +1000 -mtime +30  -exec ls -l {} \;,display a long ilsting of all the files in the file system which are bigger than 1kb and which have not been modified in the last 30*24 hours
find /etc/ -mtime -30 | xargs -0 cp /a/path,find all files in the /etc folder that have been modified within the last 30 days and copy them to /a/path/.
chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR,"recursively change owner and group to ""$jboss_as_user"" of ""$jboss_as_dir"""
find . -type f -exec echo chown username {} \;,display the change owner command for all the regular files in the current folder.
ls -al file.ext,prints long listing of file 'file.ext'.
find /var/tmp -uid 1000,find all files in the /var/tmp directory tree with uid=1000
"find . -maxdepth 1 -name ""*.pdf"" -print0 | xargs -0 rm",non-recursively finds all '*.pdf' files in a current folder and removes them.
find / -name foo.txt -type f,find regular  file named foo.txt under root / directory.
"find ""$(pwd -P)"" -type d \( -path '/path/to/dir1' -or -path '/path/to/dir2' \) -prune  -or -not \( -path '/path/to/file1' -or -path '/path/to/file2' \) -print0 | gnutar --null --no-recursion -czf archive.tar.gz --files-from -",archive present working directory excluding several files and directories
shopt -s execfail,enables shell option 'nullglob'.
rename 's/_h.png/_half.png/' *.png,"rename all .png files, changing the string ""_h.png"" into ""_half.png""."
tmux set-option -g renumber-windows on,"when a window is closed in a session, automatically renumbers the other windows in numerical order (since v1.7)."
find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo $(find {} | wc -l) \\t {}' | sort -rn | less,"counts all files in a current folder and in subfolders one-level lower, sorts result and pipes to the less pager."
"find . -name '*.rb' ! -wholename ""./vendor/*"" -print","search the current directory tree for .rb files ignoring the ""./vendor"" subdirectory"
"find ~/dir_data -type d -exec chmod a+xr,u+w {} \;",add the execute and read permission for all and the write permission for the user to the dir_data directory and all of its sub-directories.
find | xargs ipython nbconvert,run ipython nbconvert with all the file/directory paths under current directory as arguments
source $(dirname $0)/incl.sh,sources script incl.sh in the folder where current script is located.
find . -type f \( -name '*.c' -or -name '*.h' -or -name '*.cpp' \) -exec ls {} \;,"list all *.c, *.h and *.cpp files under current directory"
mkdir $dir,make directory expanded by $dir variable
"find . -name ""*.pl"" -exec ls -ld {} \;",give a long listing of all the  *.pl files (perl files) beneath the current directory.
touch filename_`/bin/date +%Y%m%d%H%M%S`.txt,create empty file (or update timestamp to current date/time if file already exists) named with full timestamp (year/month/day/hour/minute/second).
find / -type d  -perm 777 -print -exec chmod 755 {} \;,filnd all directory in root directory with 777 permission and change permision755  with chmod commad .
"find . -name ""*rc.conf"" -exec chmod o+r '{}' \;","set the read bit for ""other"" on all *rc.conf files in the current directory tree"
find -mmin 60,list all files in the current directory tree that were modified 60 minutes ago
"find . -name ""$1"" -type f -print0 | xargs -0 grep -i ""$2""",search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory
"find /user/directory/* -name ""*txt"" -mtime 0 -type f",display all text files in the folder /user/directory which have been modified in today
find . -not -iwholename '*.svn*',search the current directory tree for all files except svn ones
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs>    -p rm",find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt
"find . -maxdepth 1 -name ""*.jpg"" -size -50k | xargs echo rm -f",display the commands to force delete all jpg files in current directory which are less than 50kb and do not search in the sub directories
find -name foo.txt -execdir vim '{}' ';',search for the file foo.txt in the current folder and open it in vi editor
find -type d -printf '%T+ %p\n' | sort,sort all directories under current directory placing the file with least modification time at first
"cat $1 | ssh $2 ""mkdir $3;cat >> $3/$1""","copy local file ""$1"" to host ""$2"" into host directory ""$3"""
find . -type f -name '*.txt' | xargs --replace=FILE sed --in-place 's/foo/baz/' FILE,"replace the first occurrence of ""foo"" with ""bar"" on every line in .txt files from the current directory tree"
grep pattern file | tr '\n' ' ',search for 'pattern' in file 'file' and print the matched lines by separating them with spaces instead of newlines
find . -name custlist\*,find all  'custlist*' files under current directory
ifconfig | grep HW,prints strings with mac address configuration of each network interface in system.
mkdir ~/temp,"make directory ""~/temp"""
dig @ns1.newnameserver domain. a,print a record for domain 'domain.' from 'ns1.newnameserver' nameserver
find ./ -type f -name '*.c*' -print0 | xargs -0 rm -rf &>> log_del.txt,find all the regular files in the current folder which have specific word in their name and force delete all these files and save the log to the file log_del.txt
cd `find . -name Subscription.java | xargs dirname`,find all subscription.java files/directories under current directory and enter into the parent directory of the first one found
find / -amin -60,find all the files in file system which are accessed in last 1 hour
find -s,find all files/directories under current directory bypassing file hierarchies in lexicographical order
find . -print0 | xargs -0 stat -f '%i ',"find all files and directories under the current directory and display the inode of each one, using the stat command on freebsd/osx"
echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev,"display the last dot-separated field, in this case ""com""."
more YourFile.txt,"display the content of yourfile.txt, waiting for user input at each page."
"bind '""\e[24~"":""pwd\n""'","bind word ""pwd\n"" to key code ""\e[24~"""
find . -name .svn -exec ls {} \;,list all .svn files/directories under current directory
