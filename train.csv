cmd,nl
find / -name document -print,find all files/directories named 'document' in the entire filesystem
"find . -name ""sample*"" | xargs -i echo program {}-out {}",find all sample* files/directories under current directory and print 'program {}-out {}' where {} will expand to file paths
"find /dir -name ""filename*"" -type f -delete",delete all filename* files under /dir directory
df /full/path | grep -q /full/path,"check whether ""/full/path"" is a mount point with no output and using the exit code"
diff file2 file1 | grep '^>' | sed 's/^>\ //',"output all lines from file1 except those present in file2, assuming both files are sorted."
"pstree -a ""$PID""",prints process tree with command line arguments of a process having id $pid.
find . -type f -perm 0777 -print,find all the files in the current directory recursively whose permissions are 777
"find /usr /home  /tmp -name ""*.jar"" 2>/dev/null","list all *.jar files/directories under /usr, /home and /tmp directory without reporting errors"
kill -9 $(lsof -t -i:8080),"send sigkill signal to all processes using tcp port 8080, terminating them instantly."
find . -not -path '*/\.*' -type f -print0 | xargs -0 sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g',find all files ignoring hidden files under current directory and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files
find  /   -print > masterfilelist.out,find all files/directories in the entire file system and redirect the output to masterfilelist.out file
find / -name filename -exec nano '{}' \;,open all files named 'filename' with 'nano' editor in the entire filesystem
mount --make-rprivate /,"recursively make all mounts under ""/"" private"
"alias my_command=""$oldalias -option 3""","set alias ""my_command"" for command ""$oldalias -option 3"""
find test -empty,find empty files in the test directory
find . -name \? -mtime +0,find all files in the current folder that have a single letter in their name and have not been modified today
find / -not -newer /tmp/t,search for all files not newer than file /tmp/t
find /path/to/dir ! -perm 0644 -exec chmod 0644 {} \;,change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set
find / \( -name 10_Recommended* -o -name share \) -prune -o -type f -name java -print 2>/dev/null,search for the regular/normal file java in the entire file system excluding search in the directories share and those starting with 10_recommended and discard all the errors
cd /cygdrive/c/Program\ Files\ \(x86\),go to directory /cygdrive/c/program files (x86) using backslashes to escape special characters
find . -type d -user harry -exec chown daisy {} \;,change the ownership to the user daisy for all directories under current directory that are owned by harry
"find /home/*/public_html/ -type f -iwholename ""*/wp-includes/version.php"" -exec grep -H ""\$wp_version ="" {} \;",identify cms version/releases accross all your wordpress websites
"find . -name ""*.txt"" -exec ls -la {} \; -exec ./myScript.sh {} \;",display long listing of all the text files in the current folder and then execute the script myscript.sh by passing the output of previous exec as input
find . -maxdepth 1 -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g',find all regular files under current directory (no subdirectories) and replace every occurrences of 'toreplace' with 'replace' in those files
"read -p ""`pwd -P`\$ "" _command","read a line of standard input into variable ""_command"" with the prompt as the current working directory followed by ""$"""
find / -type d -perm 0777,find all directories starting from / that have permissions 777
find /var/log/ -mtime +7 -mtime -8,find files in the /var/log folder which were modified modified 2 weeks ago
foo=$(false)$(true),returns exit status 0.
find . -type f -exec chmod 664 {} \;,change the permissions of all regular/normal files in the current directory
"me=`basename -- ""$0""`","set the variable ""me"" to the name of the running script, or shell, login shells have a hyphen appended to the beginning of the name, such as ""-bash""."
od -xcb input_file_name | less,"dump ""input_file"" as a 2 byte hexadecimal, character, and octal value and view the contents in ""less"""
cat filename,"print the contents of ""filename"""
crontab filename,"add cron lists from ""filename"" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab."
"find -printf ""%P\n""| sort | xargs -I '{}' bash -c 'echo $(uuid) {}'",generate uuids for the files from the current directory tree
"line_to_be_replaced=`cat itemlist.json | nl |  sed -n '/""item_1""/,/""item_2""/p' | grep -in ""}]"" | awk '{print $2}'`","save the line number matching ""}]"" in lines starting with ""item_1"" to ""item_2"" in ""itemlist.json"" to variable ""line_to_be_replaced"""
find /home -size +100000 -ls 2>/dev/null,dispaly a long listig of all the files in the home folder which are bigger than 100kb and discard any errors
sudo rm -rf /usr/local/bin/npm /usr/local/share/man/man1/node* /usr/local/lib/dtrace/node.d ~/.npm ~/.node-gyp /opt/local/bin/node opt/local/include/node /opt/local/lib/node_modules,removes all listed folders with content in sudo mode.
"read -e -i ""yes"" -p ""Enter your choice: "" choice","read a line from standard input with prompt ""enter your choice: "", arrow keys enabled, and ""yes"" as the default input, and save the response to variable ""choice"""
find . -depth -empty -type d -delete,remove empty directories from the current directory tree
"echo ""$b"" | grep --only-matching ""[$a]"" | xargs | tr --delete ' '",print the characters in $b that match with any character in $a without printing any whitespace in-between
"rsync -auve ""ssh -p 2222"" . me@localhost:/some/path","archive current directory to ""/some/path"" on localhost, using ssh to authentify as user ""me"", only update files that are newer in the source directory."
find . -maxdepth 4 -name 'restore.php',locate all files named 'restore.php' in the current directory and 3 levels below
path=$(basename $(pwd) | tr 'A-Z' 'a-z' ),set variable 'path' to name of current directory (without the containing directories) converted to lowercase.
date --date='1 days ago' '+%a',print the day 1 day ago
cat $(echo $FILES | sort) | md5sum,"calculate the md5 sum of the contents of the sorted list of files ""$files"""
"sh -c ""find / -name myfile -type f -print 2> /dev/null""","create a sub shell and search for regular/normal file with the name ""myfile"" in the entire file system and discard all the errors"
"cp -r `ls -A | grep -v ""c""` $HOME/",recursively copies all files in the current directory but ones with 'c' in name to the home directory.
mount --rbind /dev /var/snmp3/dev,"recursively bind ""/dev"" to ""/var/snmp3/dev"""
find . -ls,list all files/directories under current directory
split -b 10 input.txt /tmp/split-file,"split ""input.txt"" into files of at most 10 bytes each with prefix ""/tmp/split-file"""
df -k /some/dir,report file system containing path to /some/dir disk usage in kilobytes.
"find . -name ""*.old"" -exec mv {} oldfiles \;",find all *.old files and move them to directory oldfiles
find /work -user olivier -print,"find all the files in the folder /work which belong to the user ""olivier"""
comm -3 a b | sed 's/^\t//',"print unique lines of sorted file ""a"" and ""b"" and remove leading tabs"
"find ~/.personal/tips -type f -iname ""*.pdf""  -exec pdftotext '{}' - ';'  | grep hot","search all .pdf files  from directory tree ~/.personal/tips for ""hot"""
find . -prune -print,display all files in the current folder after pruning those in the current folder ( dot is the output of this command )
find . -name '*.pdf' -print,search the current directory and all of its sub-directory for any pdf files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.
"bind -x '""\eW"":""who""'","execute command ""who"" when key ""\ew"" is pressed"
"find -type f -name ""STATUS.txt"" -exec grep -q ""OPEN"" {} \; -exec dirname {} \;",recursively finds all 'status.txt' files containing text 'open' and prints containing folder of them.
"find / -type f -size +20000k -exec ls -lh {} \; 2> /dev/null | awk '{ print $NF "": "" $5 }' | sort -nrk 2,2",find files on the system that are bigger than 20 megabytes and show the sorted list of their filenames
find / -path /usr/share -prune -o \( -name rsync -o -name bash \) -print 2>/dev/nul,search for bash and rsync files in the entire file system excluding search in the path /usr/share folder and discard all the errors
find -type d > dir-list,find all the files in the current folder and save the output to the file dir-list
groups                                        //take a look at the groups and see,prints groups list that current user belongs to.
find ./ -name *.undo | xargs wc,"find all the undo files in the current folder and display the toal lines, words, characters"
split bigfile /lots/of/little/files/here,"split ""bigfile"" into files of at most 1000 lines each with prefix ""/lots/of/little/files/here"""
diff -r dir1/ dir2/,display differences between directories dir1 and dir2.
find . -maxdepth 1 -name 'onlyme*',find all files/directories startring with 'onlyme' in their names under current directory without going into sub-directories
watch elinks -dump file.html,"execute ""elinks -dump file.html"" every 2 seconds"
find . -type d ! -iname '*.*' | while read d; do mv $d/* .; done,find all directories in the current directory tree whose names do not contain '.' and move their contents to the current directory
find /usr -type f -name backup -print,search normal files called ' banckup '  from /usr directory downward and print them.
"find . -type d -name bin | cut -d/ -f1,2 | sort > b",find the top level directories that contain a 'bin' directory in it or in one of it's sub-directories and print a sorted list to file b
"find . -printf ""%P\n"" | sort | while IFS= read -r f; do echo ""$(uuid) $f""; done",generate uuids for the files from the current directory tree
find $some_directory '.*' -delete,delete all hidden files/directories under $some_directory including $some_directory
"find /path -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep --with-filename --label=""{}"" --color ""your pattern""' \;","find all pdf files in /path and search for ""your pattern"" in the converted text output and print the paths to the matching files"
tar czvf mytarfile.tgz `find . -mtime -30`,archive all files in a current directory modified in the last 30 days
"find ${x} -type f -exec chmod ug=rw,o= '{}' \;",find all files under $x directory and set read-write permission for owner and group and no permission for other for those files
rev input | uniq -f1 | rev,remove adjascent duplicate lines from file 'input' comparing all but last space-separated fields
"file=$( basename ""$1"" )","set variable 'file' to the base name of first argument to script or function, that is the part following the last slash."
find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo  $(find {} | wc -l) {}' | sort -n,"counts all files in a current folder and in subfolders one-level lower, and sort folder list by number of files within."
"find .|grep ""FooBar""|xargs -I{} cp ""{}"" ~/foo/bar",find all files/directories under current directory with 'foobar' in their paths and copy them to ~/foo/bar
watch --color 'tput setaf 1; echo foo',execute 'tput setaf 1; echo foo' with color support every 2 seconds
"cat filename | awk '{print length, $0}'|sort -nr|head -1",prints the length and contents of the longest line in filename
git status --branch --porcelain | grep '##' | cut -c 4- | cut -d'.' -f1,print git branch currently checked out in a working directory.
DISPLAY=`hostname`:0 skype,"set the environment variable ""display"" to the system host name followed by "":0 skype"""
shopt -u extglob,unsets shell option 'extglob'.
find / -maxdepth 2 \( -fstype vfat -or -fstype ntfs \) 2> /dev/null,search the root directory and its subdirectories for files risiding on ntfs or vfat filesystems
find /home/www/ ! -executable,find not-executable files under /home/www
watch ls -l,"execute ""ls -l"" every 2 seconds"
yes | tr \\n x | head -c $BYTES | grep n,"use ""$bytes"" amount of ram with no output"
dig @some.other.ip.address domain. a,print a record for domain 'domain.' from 'some.other.ip.address' nameserver
find . -type f -exec stat {} \; > /dev/null,display file status for all regular files in the current directory tree suppressing error messages
sed 's/^/.+/' infile | bc | tail -1,"mathematically sum all lines in ""infile"""
comm -23 <(sort fileA) <(cut -d' ' -f1 fileB | sort -u),"extract any line in ""filea"" which does not appear as the first word of any line in ""fileb"""
fgrep --include='STATUS.txt' -rl 'OPEN' | xargs -L 1 dirname,recursively finds all 'status.txt' files containing text 'open' and prints containing folder of them.
find . -type d -exec /path/to/script.sh '{}' \;,find all directories under current directory and run  /path/to/script.sh for each of them
echo 127.0.0.1 ad.doubleclick.net | sudo tee -a /etc/hosts,"write ""127.0.0.1 ad.doubleclick.net"" to the console and append to ""/etc/hosts"" as root"
mount | tail -1 | sed 's/ on .* ([^)]*)$//',print the last mounted drive
find ~ -type f -name test-a -execdir mv {} test-10 \;,"find all the files in the current folder with the name ""test-a"" and move them to the folder test-10. execdir runs the command in the directory where the file is found."
find * -type f -print -o -type d -prune,find all the files in the current directory
"find A \! -path ""A/a/*"" -a \! -path ""A/a""",find all files/directories under 'a' directory tree excluding directory 'a/a' and all of it's contents
"gnuplotscript=$(mktemp /tmp/gnuplot_cmd_$(basename ""${0}"").XXXXXX.gnuplot)","creates temporary file with file name formatted like /tmp/gnuplot_cmd_$(basename ""${0}"").xxxxxx.gnuplot and saves path to it in a variable 'gnuplotscript'."
find . -depth -path './.*' -prune -o -print,find all files under current directory excluding hidden files
find . -name \*.mp3 -print0 | xargs -0 mplayer,find all *.mp3 files under current directory and run mplayer with these files
"fold -w3 ""$1"" | sort | uniq -c | sort -k1,1nr -k2","list unique series of 3 characters in file ""$1"" prefixed by the number of occurrences and sorted from most frequent to least frequent"
mount -t proc none /var/snmp3/proc,"mount ""proc"" file system on ""/var/snmp3/proc"""
"md5sum ""$source_file"" ""$dest_file""",calculate md5 sum of files $source_file and $dest_file
rest_cmd=$(shopt -p dotglob),gets state of shell option 'dotglob' and saves it in 'rest_cmd' variable.
find . -type f -print0 | xargs -0 chmod go+r,find all files under current directory and set read permission for group and other for these files
find relative/path/to/dir -type f -exec md5sum {} + > sums.md5,"find all files under relative/path/to/dir, calculate their md5sum and redirect the result to sums.md5"
sudo ln -s /usr/bin/perl /usr/local/bin/perl`echo -e '\r'`,"create a symbolic link to file ""/usr/bin/perl"" named with escaped characters ""/usr/local/bin/perl\r\n"""
"find . -type d -mtime 14 -printf ""%P\n"" > deploy.txt",save the list of directories modified a fortnight ago to `deploy.txt' removing the leading ./ from the file names
$dig -x 8.8.8.8 | grep  PTR | grep -o google.*,get domain name from dig reverse lookup.
"comm -23 ""File 1"" ""File 2""","print unique lines of sorted ""file 1"" compared with sorted ""file 2"""
"echo ""abcdefg"" | fold -w1","print each character of ""abcdefg"" on a line"
"ruby -e ""$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)""","silently download contents from https://raw.github.com/homebrew/homebrew/go/install and show an error if failed, execute with ruby after the download is completed"
"find / -type f -printf ""\n%AD %AT %p"" | head -n 11",display top 11 files along with the last access date for all the files in the file system
"find . -name ""orm.properties""",find all files/directories named orm.properties under current directory
ping youhostname.local,"send ping requests to ""yourhostname.local"""
"find . -type f -name ""*.java"" | xargs    tar cvf myfile.tar",find *.java files under current directory and compress them to myfile.tar  (unsafe)
mv * /foo,"move all files and directories in the current directory to ""/foo"""
set -v,set the 'verbose' shell option causing bash to print shell input lines as they are read
find /var/log/ -iname anaconda*,search for files/directories with the case insensitive pattern anaconda* in /var/log
find . -perm /g+s | head,find all sgid set files under current directory and show a few lines of output from the beginning
"find . -maxdepth 1 -type f -printf '%T@ %p\0' | sort -r -z -n | awk 'BEGIN { RS=""\0""; ORS=""\0""; FS="""" } NR > 5 { sub(""^[0-9]*(.[0-9]*)? "", """"); print }' | xargs -0 rm -f",removes all files from current folder but 5 newest ones.
"cal 09 2009 | awk '{day=""9""; if (NR==4) {col=index($0,day); print col } }'","print position number of day '9' in fourth line of calendar output for september, 2009."
shopt -s nullglob extglob,sets shell options 'extglob' and 'nullglob'.
find . -maxdepth 3 -type f,display all the normal/regular files in the current folder and do not go beyond 3 levels
cat ${TMP}/${SCRIPT_NAME}.pid|sort -rh;,"reversibly sorts content of the '${tmp}/${script_name}.pid' file, comparing human readable numbers in file strings."
sudo chown -R :laravel ./storage,"recursively change the group ownership to ""laravel"" in ""./storage"""
find / -name *.class -printf '%h\n' | sort --unique,list the unique parent directories of all .class files found in the entire filesystem
rsync /dev/null node:existing-dir/new-dir/,"create a new directory ""existing-dir/new-dir/"" on host ""node"""
cat `which ~/f`,"display the content of file ""f"" in home directory if it exists and is executable"
find / -type f -name *.zip -size +100M -exec rm -i {} \;,search for .zip files that are larger than 100m found anywhere in the file system and delete those files.
find . -atime +1 -type f -exec mv {} TMP \;,move files older than 1 day to directory tmp
"echo ""bla@some.com;john@home.com"" | sed -e 's/;/\n/g'","replace all instances of "";"" with ""\n"" in ""bla@some.com;john@home.com"""
find -executable,search the current directory tree for executable files and searchable directories
crontab -l | sed '/anm\.sh/s#\/5#\/10#' | crontab -,"change all cron jobs running ""anm.sh"" to be run every 10 minutes instead of 5 minutes."
"find /path/with/files -type f -name ""*txt*"" -exec ln -s {} . ';'","create symbolic links in the current directory for all files located in directory ""/path/with/files"" with a name containing ""txt"""
"pdfunite `find . -name ""*.pdf"" | sort` all.pdf",concatenate all pdf files under current directory into all.pdf
ln -s $HOME/downloads/fnord $HOME/bin/,"create a symbolic link named ""$home/bin/"" to ""$home/downloads/fnord"""
"find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -i --with-filename --label=""{}"" --color ""perry sound""' \;","search the *.pdf files from directory tree pdfs/ for text ""perry sound"", ignoring the case"
basename $(pwd),print the base name of the current working directory
finger `id -un` | head -1 | cut -d: -f3-,print the full name of the current user
nohup rm -rf cache &,"run a ""rm"" process to recursively remove ""cache"", making it immune to all sighup signals sent to it."
find . -type f -print0 | xargs -0 ls -l,list all regular files in the current directory tree
find /usr /bin /sbin /opt -name sar,"find files/directories named 'sar' under '/usr', '/bin', '/sbin' and '/opt' directory tree"
ls -mR * | sed -n 's/://p',lists all paths to all subfolders in a current folder.
cd /the/project/root//data,"go to /the/project/root//data, which in most filesystems/operating systems will be the same as cd /the/project/root/data"
"find / -name ""*.old"" -delete",search the entire file hierarchy for files ending in '.old' and delete them.
du --summary --human-readable *,display summary of each specified file in human readable form
mount --rbind /something /new_something,"recursively bind mount ""/something"" on ""/new_something"""
find directory -mindepth 1 -type d -empty -delete,delete all empty directories in minimum 1 level down the directory 'directory'
mount /dev/shm,"mount ""/dev/shm"" using /etc/fstab entry"
find <directory> -type f -size +1M -delete,remove files that are greater than 1mb in size under <directory>
find . -type f \( -exec command1 \; -false -o -exec command2 \; \),find all files in current directory and execute command1 and command2 for each file
sed '/^$/d;s/ /\//g' struct.txt | xargs mkdir -p,"remove blank lines and replace "" "" with ""/"" in ""struct.txt"" as input to make directories with parents as needed"
find -name file -print,"search for a file ""file"" in current folder and display all instances of this file"
"rm -rf `find . -type d -name "".svn""`",delete all .svn subdirectories under current directory
find . -name \*.php -type f,find all php files in the current directory recursively
find . -name 'abc*' -exec echo {}' OK' \; | column -t,"find all files matching ""abc*"" in the current directory and append a column with ""ok"""
"finger -s | awk '{printf(""%s %s\n"", $1, $2);}'",print only name and login columns of the currently logged in users
more /var/log/syslog,"display the contents of /var/log/syslog one page at a time, pausing for user interaction between each."
find . -name ‘*.c’ | xargs egrep stdlib.h,find all the .c files in the current directory tree that contain the string ‘stdlib.h’
"tac files | sort -t- -k2,2 -n","numerically sort file ""files"" by the second ""-"" separated value of each line ordered from least value to highest value"
"find . -name ""*.php"" | xargs wc -l",counts lines in each of *.php files in a current folder and subfolders and prints total count as well.
ls -alR -I dev -I run -I sys -I tmp -I proc /path | md5sum -c /tmp/file,"calculate md5 checksum of the list of all files/dirs in /path recursively including dot files and excluding the patterns 'run', 'sys', 'tmp' and 'proc', then check the checksum against the checksum saved in /tmp/file"
exit -1,exits from process with exit code 255.
"find /dir \( -name node_modules -prune \) -o -name ""*.sh"" -exec grep --color -Hn ""your text to find"" {} 2>/dev/null \;","find all the files ending with "".sh"" in the folder /dir excluding those wth the name node_modules and search for a pattern in these files"
find . type -f -amin 2,search the current directory recursively for regular files last accessed 2 minutes ago
df -k /dir/inner_dir/,report file system containing path to /dir/inner_dir/ disk usage in kilobytes.
history 10 | cut -c 8-,print last 10 commands in history with the first 7 characters removed
find . -mtime -1 -ls,display a long listing of all the files in the current folder which have been modified in the last 24 hours
"find . -type f | sed 's/.*/""&""/' | xargs ls -E | awk '{ print $6,"" "",$7,"" "",$9 }' | sort | tail -1",find recursively the latest modified file in the current directory
"find /mnt/usb -name  ""*.mp3"" -print",search for all .mp3 files in the /mnt/usb directory tree
"find . -exec echo {} "";""",find all files/directories under current directory and print their paths
"find ./ -name ""foo.mp4"" -exec echo {} \;",find all foo.mp4 files in the current directory tree
"echo -e ""length(FOO_NO_LEAD_SPACE)==$(echo -ne ""${FOO_NO_LEAD_SPACE}"" | wc -m)""","reports count of characters in the value of ${foo_no_lead_space} variable as follows: ""length(foo_no_lead_space)==<counted number of characters>"""
"echo ""$a"" | awk '{print tolower($0)}'","display the contents of variable ""a"" converted to lowercase."
read -r -d $'\0',"read standard input until a null character is found and save the result in variable ""line"""
"ssh askapache 'sh -c ""( ( nohup chown -R ask:ask /www/askapache.com &>/dev/null ) & )""'","execute ""chown -r ask:ask /www/askapache.com"" in the background on server ""askapache"""
ln /media/public/xampp/mysql/data/my_db -s,"create a symbolic link in current directory named ""my_db"" to file ""/media/public/xampp/mysql/data/my_db"""
"find ""$STORAGEFOLDER"" -name .todo -printf '%h\n' | xargs ls -l","display a long list of all the directories which have files ending with "".todo"""
"find data/ -name ""filepattern-*2009*"" | cpio -ov --format=ustar > 2009.tar",archive all filepattern-*2009* files/directories under data/ into 2009.tar
find . -name ‘*.mp4’ >> /tmp/$$,find all the mp4 video files in the current folder and save the output to the file /tmp/$$
find /path/to/base/dir -type f,find all regular files in the /path/to/base/dir tree
"find /etc -name ""*.txt"" -ls",list all *.txt files/directories under /etc
"find . -name ""*shp*"" -exec mv {} ../shp_all/ \;",find all *shp* files/directories under current directory and move them to ../shp_all/
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------'),"print a randomly sorted list of numbers from 1 to 10 to file ""/tmp/lst"" and the screen followed by "" -------"""
echo '2-1' |sudo tee /sys/bus/usb/drivers/usb/unbind,"write ""2-1"" to standard output and to ""/sys/bus/usb/drivers/usb/unbind"""
find /tmp -type f -name sess* -exec rm -f {} \;,force remove all the regular/normal files which begin with sess in the temp folder
"find . -type f \! -iregex '.\|./.git' -exec perl -i'' -pe ""s/$1/$upper2/gi"" {} +",find all files under current directory that match the case insensitive regex .\|./.git and replace (all occurrences) the text matching the case insensitive regex expanded by $1 with $upper2 in these files
"find /var/adm/logs/morelogs/* -type f -prune -name ""*.user"" -print","display all the files ending with "".user"" in /var/adm/logs/morelogs/ and excluding all regular files"
"find . -printf ""%y %p\n""",print out the names and types of all files in the current directory tree
find folder_name -type d -exec chmod 775 ‘{}’ \;,"find all directories under and below directory ""folder_name"", and change their permissions to 775"
find / -group group2,find all files owned by group `group2'
find /path/to/look/in/ -type d -name '.texturedata',find all directories named '.texturedata' under '/path/to/look/in/' directory tree
find -user michel,find all files/directories owned by user 'michel' under current directory
find /home -type f -name *.sxw -atime -3 -user bruno,"display all the files in the home folder which belong to the suer ""bruno"" and end with "".sxw"" and have been accessed in the last 3*24 hours"
split -d -l $SPLITLIMT $INFILE x_,"split ""$infile"" into files of at most ""$splitlimt"" with a numeric suffix and a prefix ""x_"""
"join -t, -o 1.1,1.2,2.3 -a1 in1 in2","merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2', also outputting unmatched lines from 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2."
find . -inum 31246 -exec rm [] ';',remove file with inode number 31246
"find ""`echo ""$some_dir""`"" -maxdepth 0 -empty",check if directory $some_dir is empty
"ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS",prints list of processes in system ascending by memory usage.
find . -name 'test*' -prune,find all files/directories under current directory tree that start with 'test' in their names without descending into directories with the same name pattern
mkdir -p `file -b --mime-type *|uniq`,make directory and parents as needed for each unique mime type in the current directory
"ln -sf ""$(readlink -f ""$1"")"" ""$*""","force create a symbolic link named ""$*"" to the canonical absolute path of ""$1"""
cal -h | cut -c 4-17 | tail -n +3  | wc -w,counts all business days in a current month.
"IFS=$'\n' read -d '' -ra files < <(find /foo -name ""*.txt"")",read all *.txt file paths under /foo into a bash array ($files)
"seq 10 | xargs -i --max-procs=4 bash -c ""echo start {}; sleep 3; echo done {}""","run 10 bash processes at most 4 at a time of ""echo start n; sleep 3; echo done n"" for n ranging from 1 to 10"
uname -i,"display hardware platform, ie. x86_64 even if current kernel uses 32-bit addressing."
rand_str=$(mktemp --dry-run ${str// /X}),creates random file name formatted like expression in variable ${str// /x} and saves it in 'rand_str' variable.
"joblist=$(jobs -l | tr ""\n"" ""^"")",list jobs and their process ids and print them by replacing newline with '^'
find /var/www/vhosts/*/httpdocs -type f \( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \$RELEASE\s+= .([\d.]+).;/; $dev = $1 if m/ \$DEV_LEVEL\s+= .(\d+).;/; } print qq( = $release.$dev\n);' {} \;,search for all the joomla's version.php files in various directories and display the latest versions of it.
su - jetty cp file1 file2,make a copy of file file1 named file2
find /var/www -name *.gif -o -name *.jpg,find all .gif and .jpg files in the /var/www directory tree
sed -i '/pattern/d' filename,"delete all lines matching ""pattern"" in ""filename"""
"sed -i.bak ""s#https.*\.com#$pub_url#g"" MyHTMLFile.html","replace all urls in ""myhtmlfile.html"" with ""$pub_url"" and create a backup with suffix "".bak"""
ionice -c 3 find  . -type f -amin -1440 -mmin +1441 -not -path custom/ -print0,find all the regular/normal files in the current folder which have been accessed in the last 1440*24 hours and not modified in 1441*24 hours excluding those which are in the custom sub directory tree
"find /var/www -type f -name ""*.html""",find all regular .html files in the /var/www directory tree
find /home/ -type f -size +512k -exec ls -lh {} \;,display list of all the regular/normal files in the home folder which are bigger than 512 kb
find . -name Chapter1 -type f -print,find all regular files named 'chapter1' under current directory tree
yes image.png | head -n10 | xargs echo,"repeat ""image.png"" 10 times on a single line"
"yes x | head -10 | awk 'BEGIN { RS = ""%%%%%%%"" } { split($0,a,""\n""); for (i=1; i<length(a); i+=4) print a[i], a[i+1], a[i+2], a[i+3] }'","print 10 space separated ""x""s with at most 4 per line"
find .,find all files and directories starting from the current directory
find . -mtime +180 -exec du -sh {} \;,search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the disk usage of them
find /mnt/naspath -name .snapshot -prune -o \( -type f -mtime 0 -print0 \),find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter
rename 'y/A-Z/a-z/' *,rename all files in current directory to lowerase.
"find /home/jassi/ -type f -name ""aliencoders.[0-9]+""",find all aliencoders.[0-9]+ files under /home/jassi/ directory
"find . -name ""*fink*"" |xargs ls -l",list all *fink* files/directories under current directory
"echo ""$DIREC"" | od -c","print a hex dump of ""$direc"" as characters"
grep PROBES /boot/config-$(uname -r),display all lines containing probes in the current kernel's compile-time config file.
find . -type d –print | wc -l,display the count of all the directories in the current folder
"find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d"" "" | sed 's/.*/""&""/' | xargs ls -l",find recursively the latest modified file in the current directory
set `od -j $o -N 8 -t u1 $pkg`,"extract 8 bytes as an unsigned integer that is ""$o"" offset into ""$pkg"""
sort foo.txt,"sort file ""foo.txt"" by line to standard output"
find . -name myfile.txt -print,search the file myfile.txt in the current folder
find / \( -perm -006 -o -perm -007 \) \( ! -type -l \) -ls,find all files that have wrong permission
find . -iregex '.*sitesearch.*' -iregex '.*demo.*',"search for all files with either ""sitesearch"" or ""demo"" in their path names"
zcat input.gz | sed -n 's/.*\(userAgent=[^=]*\) [^ =][^ =]*=.*/\1/p',"unzip and extract ""*\(useragent=[^=]*\) [^ =][^ =]*=.*"" from ""input.gz"""
"find . \( -name ""my*"" -o -name ""qu*"" \) -print","look in the current directory and below for all files whose names begin with either ""my"" or ""qu"""
find .  -ctime +7 -print,search  in current directory downwards all files whose status has changed more then 7  days ago
"find . -type f -printf ""%s + "" | dc -e0 -f- -ep",get the total size in bytes of all files in the current directory tree
find . -name \*.php -type f -exec grep -Hn '$test' {} \+ | wc -l,search for a word in all the php files in the current folder and display the count of all matching lines.
find /etc -iregex '.*xt.*',find all files/directories case insensitively containing 'xt' in their names under '/etc' directory tree
find . -iregex './\(RT\|ED\).*' | head,find all files/directories under current directory that match the case insensitive regex ./\(rt\|ed\).* and show several lines of output from the beginning
find . -name '*bills*' -exec grep put {} \;,"search the files residing in the current directory tree whose names contain ""bills"" for ""put"""
"diff /tmp/ksh-{9725,9781}.log | grep ^\<","display differences in ""/tmp/ksh-9725.log"" when compared to ""/tmp/ksh-9781.log"""
"find . -name ""*.flac"" -exec basename \{\} .flac \;","display the base name(name without extension) of all the "".flac"" files in the current folder"
"rsync -rcn --out-format=""%n"" old/ new/","recursively copy ""old/"" to ""new/"" as a dry run skipping files that have matching checksums and output the name only"
"find . -name 'php.ini' -exec sed -i 's/log_errors = Off/log_errors = On/g' ""{}"" \;","replace all occurrence of ""log_errors = off"" with ""log_errors = on"" in all 'php.ini' files in the current directory tree"
rm $(<xaa),removes files that are listed in file 'xaa'.
tempfile=XXX-$(od -N4 -tu /dev/random | awk 'NR==1 {print $2} {}'),"save ""xxx-"" followed by a random 4 byte unsigned integer to variable ""tempfile"""
find .  -type f  -exec ls -lrt {} \; |awk -F' ' '{print $9}',"find all file name in curent directory ,  -exec will file all file output  awk used here for print only file name ."
find -iname '*~' | xargs rm,"remove all files from the current directory tree whose names end in ""~"""
cat file1 file2 |sort -t. -k 2.1,sort content of files 'file1' and 'file2' by second of dot-separated fields.
sudo find /var/www/some/subset -print0 | xargs -0 chown www-data:www-data,find all files/directories under /var/www/some/subset and change their owner and group to www-data
find -mindepth 4 -name file,find all files/directories named file in minimum 4 levels down the current directory
find /users/al -name Cookbook -type d,find directory which name is cookbook under /users/al
find path_to_dir -type f,find all files under path_to_dir
find main-directory -type f -exec mv -v '{}' '{}'.html \;,find all the regular/normal files in the current folder and rename them to html files
"find . -type f -exec sh -c 'cp ""$@"" /tmp' {} +",copy all regular files from the current directory tree to /tmp
find /path/to/file -type f -size +51200c 2>/dev/null,find all files under /path/to/file which are greater than 25600kb
"ssh -N -i <(echo ""privatekeystuffdis88s8dsf8h8hsd8fh8d"") -R 16186:localhost:8888 hello.com","forward port 16186 on hello.com to 8888 on localhost using private key ""privatekeystuffdis88s8dsf8h8hsd8fh8d"" for login"
screen -list,list screen session ids
find /students -type l -print 2> /dev/null,find all the links in the directory students and print them. do not display any errors.
comm -12 <(find ~/bin/FilesDvorak/.* -maxdepth 0) <(find ~/.PAST_RC_files/.*),list all ~/bin/filesdvorak/.* (non-recursive) and ~/.past_rc_files/.* (recursive) files/directories and take common entries between these two lists
"find -name ""*.flac"" -exec ffmpeg -i {} -acodec libmp3lame -ab 128k {}.mp3 \;","find all the "".flac"" files in the current folder and convert them to mp3 with 128k bit rate"
du -s $i | read k,"read the first line of output from ""du -s $i"" into variable ""k"" in ksh"
find ~/code -name '.*' -prune -o -type d -printf ':%p',find all directories under ~/code without descending into hidden directories and print them appended with : (colon)
"ssh -n -f user@host ""sh -c 'cd /whereever; nohup ./whatever > /dev/null 2>&1 &'""","execute ""/wherever/whatever"" in the background on target machine ""user@host"""
find . 2>/dev/null > some_file,"list all files under the current directory, writing the output to the file some_file, suppressing all error messages"
find . -name foo.mp4 -printf '%h\n',find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories
comm -2 -3 f1 f2,"print unique lines of sorted file ""f1"" compared to sorted file ""f2"""
$ file /bin/bash,"display the file type description of /bin/bash, ie. symbolic link, elf executable, etc."
find . -name \*.txt -exec process {} \;,find all *.txt files/directories under current directory and execute process for each of them
find . -name FOLDER1 -prune -o -name filename,"find all files named ""filename"" in the current directory tree, not descending into ""folder1"" directories"
"find . -type f -mtime +30 -name ""*.log"" -exec cp {} old \;",copy all the log files in the current folder which have not been accessed in the last 30*24 hours to the folder old
"ssh $USER@$SERVER ""cd ${REMOTE_PATH}; mkdir -p $i"" < /dev/null","execute ""cd ${remote_path}; mkdir -p $i"" on host ""$server"" as user ""$user"" and connect standard input to ""/dev/null"""
find . -name 'filename' | xargs -r ls -tc | head -n1,get only the latest version of the file 'filename' under current directory
find . -name foo.rb,find all files/directories named 'foo.rb' under current directory tree
find /usr/share/man/ -regex grep.*,serach for all the files starting with grep in man pages
"for D in `find . -iname ""*.php~""`; do mv ${D} /mydir; done",move all *.php~ (case insensitive) files under current directory to /mydir
find . -name '*.txt',locate all *.txt files in the current directory tree
find dir2 ! -type d |xargs wc -c,get the sizes (and total size) of all files under dir2 directory
"find ${DIR} -type f -name ""*.css"" -exec sed -n '/\.ExampleClass.{/,/}/p' \{\} \+","find all *.css files under $dir and print the lines matching the regex '\.exampleclass.{/,/}' from those files"
scp -P 1234 user@[ip address or host name]:/var/www/mywebsite/dumps/* /var/www/myNewPathOnCurrentLocalMachine,"connect to port 1234 of specified ip address or hostname as ssh user ""user"", and copy all visible files in /var/www/mywebsite/dumps/ on this host to local directory /mynewpathoncurrentlocalmachine - this directory must already exist on local host."
find . -size +9M,list files larger than 9mb residing in the current directory and below
find . -exec grep -l -e 'myregex' {} \; >> outfile.txt,find files matching the regex 'myregex' in their contents and append the list of these files to outfile.txt
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -print0 | xargs -0 grep -H ""debug (""","find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string ""debug ("""
find . -gid 1003,find files and directories with group id 1003
find . -name heapdump*|xargs rm,"delete all the files found in the current directory tree whose names begin with ""heapdump"""
"mkdir ""$@"" |sed -e""s/mkdir: created directory /$USER created folder /""","make directories ""$@"" and replace ""mkdir: created directory "" with ""$user created folder "" in the output"
shift `expr $# - 1`,"shifts all positional arguments but last one, keeping it in $1 variable."
"find . -name ""*bash*"" | xargs",search the current directory tree for *bash* files printing them on a single line
find / -name filename.txt -print,"find the file ""filename.txt"" in the entire file system"
rpm2cpio libstdc++-4.9.2-1.fc21.x86_64.rpm |cpio -idmv,"extract rpm ""libstdc++-4.9.2-1.fc21.x86_64.rpm"""
find . -type f -name 'btree*.c',find all btree*.c files under current directory
"find /data/ -name 'command-*-setup' | sort -t - -V -k 2,2","list all paths to files or directories under ""/data/"" that start with ""command-"" and end with ""-setup"", sort the result by the version number specified between ""command-"" and ""-setup"" (least to greatest)"
watch --interval=10 lynx -dump http://dslrouter/stats.html,"execute ""lynx -dump http://dslrouter/stats.html"" every 10 seconds"
find $HOME \( -name a.out -o -name '*.o' \) -atime +7 -exec rm {} \;,remove all files 'a.out' and *.o in the home directory tree that were accessed more than 7 days ago
fhost=`hostname -f`,"save the fqdn host name of the system in variable ""fhost"""
"find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -i --with-filename --label=""{}"" --color ""perry sound""' \;","search the *.pdf files from directory tree pdfs/ for text ""perry sound"", ignoring the case, and print the list of matched files"
sudo find /var/www -type d -print0 | xargs -0 chmod 755,find all directories under /var/www directory and set their permission to 755
find / -iname '*python*',search for files having python in filename
dig mx example.com | grep -v '^;' | grep example.com,"request mx record of 'example.com' domain, and filter out all comment strings"
find /path/to/search -daystart -ctime -1,find things changed today
find . -exec echo {} ';',find all files/directories under current directory and print their paths
find *-name hi.dat,search all non-hidden files in the current directory and all non-hidden sub-directories for the file hi.dat.
"find */201111 -name ""*.jpg""",find all *.jpg files in */201111 paths
find . -size -500k,find and show all files in the current directory tree that are smaller than 500 kb
find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08,"find all files modified on the 7th of june, 2007, starting from the current directory"
chmod -R +xr directory,"recursively add read and execute permissions to all files and folders in ""directory"""
find /path -type f -delete,find all the regular/normal files in the /path folder and delete them
sudo find / -iname '*.ogg',find all *.ogg (case insensitive) files/directories in entire file system
sudo find /var/www/some/subset -type d -print0 | xargs -0 chmod g+s,find all directories under /var/www/some/subset and set their sgid bit
"gzip -d --stdout file.gz | bash -s -- ""-n wordpress localhost""","unzip ""file.gz"" to standard output and execute in bash with arguments ""-n wordpress"""
find . -name '*.log'  -type f  -readable  ! -size 0 -exec sed -n '1{/The SAS System/q0};q1' {} \; -print,"search the current directory tree for .log files containing the string ""the sas system"" on the first line"
ssh -o ConnectTimeout=10  <hostName>,"set the setup connection timeout to 10 seconds for connecting to ""<hostname>"" via ssh"
comm -12 <(sort set1) <(sort set2),"print common lines in files ""set1"" and ""set2"""
"find . -name "".txt"" | grep ""foo"" | xargs rm",find all text files in current folder and delete all the files that have the word foo in their name
"find . -type f -name ""*.jpg"" -print0 | xargs -0 rename ""s/Image_200x200_(\d{3})/img/""",search all jpg images in current folder and rename them
find . -name FOLDER1 -prune -o -name filename -print,"list all files named ""filename"" from the current directory tree, ignoring directory ""folder1"""
"find . -name test -prune -regex "".*/my.*p.$""",search all the files in the current folder excluding those that are present in the folder test and using regex
"sudo find -name ""*[!0-9][1-9].txt"" -exec chmod 744 '*' {} \; -a -exec ls -l {} \; | sort | parallel ls -l","find files with pattern ""*[!0-9][1-9].txt""  and execute chmod and ls command with and condition then sort the output"
ssh -i keyfile.rsa -T -N -L 16379:localhost:6379 someuser@somehost,"create a local ssh tunnel from ""localhost"" port 16379 to ""localhost"" port 6379 using key ""keyfile.rsa"" and disables the interactive shell"
"find . -type f -newermt ""2013-06-01"" \! -newermt ""2013-06-20""",finds all files modified within a certain time frame recursively
"find . -name ""*.bash"" |xargs grep ""echo""",search for the word echo all the bash files(files ending with .bash) in the current folder
"find . -type f -path ""*src/main/*\.scala""","display all scala files in the directory ""src/main"""
ln -sfvn source target,"forcibly and verbosely create a symbolic link named ""target"" to file ""source"""
gzip -kr .,recursively compress every file in the current directory tree and keep the original file
find /home/*/public_html/ -type f -iwholename “*/wp-includes/version.php” -exec grep -H “\$wp_version =” {} \;,perform a default cpanel configuration
mv -t target file1 file2 ...,"move ""file1"", ""file2"", ""..."" to ""target"" directory"
find /srv/${x} -type d -empty -exec rmdir {} \;,remove empty directories from directory tree /srv/${x}
find . -print|xargs command,run `command' passing the files from the current directory tree as arguments
"find . -name ""*.txt"" -print0 | xargs -0 egrep 'string'","search the *.txt files from the current directory tree for ""string"""
top -b -d 1 | grep myprocess.exe | tee output.log,"run 'top' in batch mode (don't accept user input) with delay of 1 second between updates, and duplicate the standard output to file 'output.log' in current directory."
paste -d' ' <(sed -n 'p;n' num.txt) <(sed -n 'n;p' num.txt),"print every two lines in ""num.txt"" on a single line separated by a space"
find ~ -size +20M,find files bigger than 20 megabytes in the home directory tree
read VARNAME,"read a line from standard input and save response in variable ""varname"""
"find . -name ""*.jar"" -exec jar -tf {} \;|grep  ""message_track.properties""",find all jar files in current folder and search for a file in all these jar's
"find -name ""*text""",find all *text files/directories under current directory
"find . -name ""*foo""","find recursively all files whose names ends with ""foo"""
"find /var/www -type d \( ! -wholename ""/var/www/web-release-data/*""  ! -wholename ""/var/www/web-development-data/*"" \)",find all directories under '/var/www' directory tree excluding '/var/www/web-release-data' and '/var/www/web-development-data' directories and their sub-directories
mount --bind olddir newdir,"remount part of the file hierarchy from ""olddir"" to ""newdir"""
"find ./ -name ""*TextForRename*""","search the current directory tree for files whose names contain ""textforrename"""
chsh -s $(which zsh),"change login shell to the full path of ""zsh"""
find ./ -type f -exec wc -l {}  \; | cut -d' ' -f1 | paste -sd+ | bc,count all the lines of code in the current directory recursively.
cat /etc/fstab | wc -l,"count the number of lines in ""/etc/fstab"""
mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0'),"check if a drive with uuid ""09b8f1ab-8d4b-4c5f-b395-40be09c090b0"" is mounted"
find /usr -type d -name My\ Files -exec rsync -avR '{}' /iscsi \;,"search all of /usr for any directory named 'my files', for each directory found, copy it to /iscsi preserving full paths and attributes."
diff -r dir1 dir2 | grep 'Only in' | grep dir1 | awk '{print $4}' > difference1.txt,"write list of files present only in dir1 to file ""difference1.txt""."
find / -group root,find all files that belong to group root
"find ${START_DIR} -mtime -${DAYS} |xargs stat -c ""%s""|awk '{sum += $1}END{print sum}'","display the size of all the files in the folder ""${start_dir}"" which  have been modified in the last ""${days}""*24 hours"
"find . -name ""*.bam"" | xargs rm",delete all .bam files in the current directory tree
find /var/ftp/mp3 -name '*.mp3' -type f -exec chmod 644 {} \;,change the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3
ls -d /home/alice/Documents/*/,lists all directories in '/home/alice/documents/'.
find /home -xdev -samefile file1 -print0 | xargs -0 rm,find and delete all hard links in the /home directory to file1
find / -lname foo.txt,find links to any file that happens to be named `foo.txt'
find file -prune -cmin +60 -print | grep -q .,test if a file named 'file' in the current directory is more than 1 hour old
"find /usr -name ""*.c""",find all filenames ending with .c in the /usr directory tree
"su -s /bin/bash -c 'bash --rcfile <(echo ""source ~/.bashrc; source myfile"")'","run command 'bash --rcfile <(echo ""source ~/.bashrc; source myfile"")' as user root with a bash shell"
find -type f | xargs chmod 775,find all files under current directory and set their permission to 775
"echo ""fifo forever"" | cat - fifo | tee fifo","write ""fifo forever"" infinitely using the named pipe ""fifo"" by writing its contents to standard output and to ""fifo"""
"find / -type f -printf ""\n%Ab %p"" | head -n 11",display the file name and creation month of top 11 files in the entire file system
find -type f -exec chmod 644 {} \;,change the permission of all the normal/regular files to 644 in the current folder
"find . -type f -name ""*.html"" | zip -j all-html-files -@",search for all html files in current folder folder and create a zip file of all these files
"find / -name ""[Xx]*""",find files on the system whose names begin with either x or x
find /apps -group accts -print,find all files/directories that belong to the group 'accts' under '/apps' directory tree
sudo su -c 'ls -hal /root/ > /root/test.out',run command 'ls -hal /root/ > /root/test.out' as user root
find /tmp/ -type f -mtime +1 -exec rm {} +,delete all the regular files in the temp folder which have not been modified in the last 24 hours + at the end gives bulk input to the rm command
find . -type d -empty -print0 | xargs -0 /bin/rmdir,find all empty directories recursively starting from the current one and delete them
"find . -type f -exec chmod ug=rw,o= {} \;",find all files under current directory and set read-write permission for owner and group and no permission for other for those directories
"find . -name ""*.xml"" -exec grep -HFf /tmp/a {} \;","find all the xml files in current folder and which are present in the pattern list file ""/tmp/a"""
"curl -v --get --data-urlencode ""access_token=$(cat .fb_access_token)"" https://graph.facebook.com/me/feed","send get request to ""https://graph.facebook.com/me/feed"" using url-encoding ""access_token=$(cat .fb_access_token)"""
find . -mindepth 1 -type d -print0,display all the directories in the current folder which are atleast one level deep
"find . \! -path ""*CVS*"" -type f -name ""*.css""","find css files omitting results containing ""cvs"""
find . -atime -1 -print,find all files/directories under current directory that were accessed less than 1 day ago
"printf "" %02d"" $(seq 1 30)",print numbers from 1 to 30 with 0 padding to a width of 2
"find . -type f -exec chmod u+r-wx,g+rw-x,o-rwx {} \;","find all files under current directory and make them read-only for owner, read & writable by group and remove read-write-execute permission"
find . -iregex '.*/\(EA\|FS\)_.*',find all files/directories under current directory that match the case insensitive regex .*/\(ea\|fs\)_.*
"find / -maxdepth 3  -name ""*log""",find *log files/directories within a maximum of 3 levels of directories
"find /path/to/dir -name ""test"" -type d -exec rm -rf {} \;","remove all directories called ""test"" from the /path/to/dir directory tree"
"find . -name ""*.NEF"" -exec basename \{\} .NEF \;","display the base name(name without extension) of all the "".nef"" files in the current folder"
yes | rm,"continuously send ""y"" to all prompts of command ""rm"""
"find . -name ""*.java"" -exec grep -Hin TODO {} \;",search the .java files from the current directory tree for todo lines
cd /nfs//office/ && find . -name '.user.log',change to a directory and search for a file in that directory
ping -c 5 -q 12.34.56.78 | tail -n 2,send 5 ping requests to address 12.34.56.78 and print only the last 2 lines of the summary output.
find . /home/admin/data/ -type f -exec chown admin.admin {} \;,change the owner and group of all the normal/regular files in the current folder and /home/admin/data/ to admin & admin
"watch -n 300 -t `find -type f | egrep -i ""(jpg|bmp|png|gif)$""`","execute `find -type f | egrep -i ""(jpg|bmp|png|gif)$""` every 300 seconds and display without title"
find . -type d | xargs chmod 2775,change the permissions of all the directories in the current folder
find .  -name .git -prune -o -type f -print,"find all regular files in the current directory tree, except git files"
"find ""$d/"" -type f -print0 | xargs -0 chmod 777",find all regular files under $d directory tree and change their permissions to 777
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') \ <(tac),generates a randomly sorted list of numbers from 1 to 10.
seq 1 10000 | head -1,"print the first line of ""seq 1 10000"""
find . \( -name omit-directory -prune -o -type f \) -print,search the current directory tree for regular files omitting directory `omit-directory'
find ${1:-.} -mindepth 1 -maxdepth 1 -type d,find all directories under ${1:-.} directory without descending into any sub-directories
"find . -mtime +7 -name ""*.html"" -print",find *.html files in the current directory tree that were last modified more than 7 days ago
"find test -name "".DS_Store"" -delete","delete all "".ds_store"" files/directories under test directory"
find . -type f -atime +30 -print,list all files that have not been read in thirty days or more
"rsync -av --files-from=- --rsync-path=""sudo rsync"" /path/to/files user@targethost:/path","archive all files specified on standard input under ""/path/to/files"" to ""/path"" on host ""targethost"" as user ""user"" with escalated privileges"
"find . -name ""*.txt"" -print -exec awk '$9 != """" {print; if(NR > 9) exit; }' {} \;",run an awk program on every txt file found in the current directory tree
find . -name '*.py' -exec grep 'something' {} \; > output.txt,"search the .py files residing in the current directory tree for ""something"" and save the output to output.txt"
curl 'http://www.multitran.ru/c/m.exe?CL=1&s=hello&l1=1' | iconv -f windows-1251 | tr -dc '[:print:]',"download ""http://www.multitran.ru/c/m.exe?cl=1&s=hello&l1=1"" and convert encoding to ""windows-1251"" and print only printable characters"
"find . -name "".aux""",search the current directory tree for .aux files
packet_loss=$(ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)'),"save the percentage of packets lost of the 5 packets sent to ""$host"" in variable ""packet_loss"""
export git=$(which git),"export full path of command ""git"" to variable ""git"""
"find -name ""*"" | xargs rm -f",remove all non-hidden files in the current directory tree
"find ""$DIR_TO_CLEAN"" -type -f -mtime ""+$DAYS_TO_SAVE"" -exec rm {} \; -exec printf '.' \; | wc -c",delete and count files in $dir_to_clean that are older than $days_to_save days
chown -R tomcat7:tomcat7 webapps temp logs work conf,"recursively change owner and group to ""tomcat7"" of ""webapps"", ""temp"", ""logs"", ""work"", and ""conf"""
find . -size +4096k -print,find all files in the current directory which are bigger than 4mb
"ln -s ""$source"" -t ~/newlinks","create a symbolic link in target directory ""~/newlinks"" to ""$source"""
ls -d -1 $PWD/**/*/* | cat -n,print numbered list of all third-level files under the current directory
"find . -mindepth 1 -maxdepth 1 -type f -print0 | xargs -0 -I {} echo ""{}""",get the list of regular files in the current directory
find . -name \*.rb,find all *.rb files/directories under current directory
find var/ -type d -exec chmod 700 {} \;,find all directories under var/ directory and change their permission to 700
find . -type f -empty,find all empty regular files in the current directory and below
find . -type f -mtime +1000 -print0 | cpio -dumpl0 /home/user/archives,"create links for all files in the current directory tree that are more than 1000 days old in ""/home/user/archives"""
find . -name \*.xml | grep -v /workspace/ | tr '\n' '\0' | xargs -0 tar -cf xml.tar,archive all *.xml files under current directory tree to xml.tar excluding the files that match '/workspace/' in their paths
alias cd-='cd ${${(z)$(fc -l -1)}[3]}',"set alias ""cd-"" for command 'cd ${${(z)$(fc -l -1)}[3]}'"
cat new.txt  | nl,"print ""new.txt"" with line numbers prepended"
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -printf ""%T+\t%p\n"" | sort",list all files with their modification time in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time and sort them according to file modification time
echo $b|grep -q $a,"finds $a pattern in a $b string, and returns exit code 0 if found, suppressing any visible output."
"find / -name ""имя_файла""",find all files/directories named 'имя_файла' in the entire filesystem
find /path/to/dir -mindepth 1 -maxdepth 1 -type d -execdir sudo tar -zcpvf {}.tar.gz {} \;,find all directories under /path/to/dir (no sub-directories) and archive them (with relative paths) into files with .tar.gz extension
find -type d -name a -exec rmdir {} \;,finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within.
grep -o . file | sort -f | uniq -ic,"list each unique case insensitive character in ""file"" prefixed by number of occurrences"
"$ find . -name ""*mp3"" -print0 | xargs -0 mid3iconv -e EUR-KR -d",search for all the mp3 files in the current folder and change the character encoding of them to  eur-kr (korean characters)
find /var/www -type d -print0 | xargs -0 chmod 755,set permissions for all direcotries under /var/www to 755
find / -type f \( -perm -4000 -o -perm -2000 \) -ls,list all sgid and suid files in entire file system
chmod 555 /home/sshtunnel/,"change permissions of directory ""/home/sshtunnel/"" to 555"
mkdir ~/Labs/lab4a/folder{1..3},"make 3 directories named ""~/labs/lab4a/folder"" followed by the number 1, 2, or 3"
find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt) | xargs -i{} cp {} /path/to/dir,"find all the png files in current folder which are present in the pattern list file ""search.txt"" and copy them to another directory"
find .  -type f  -name '*.txt' -exec wc -w {} \; | awk '{total += $1} END{print total}',find & calculate total number of worlds in all .txt file from current directory
me=$(readlink --canonicalize --no-newline $0),"save the canonical filename of the script in variable ""me"""
"mkdir -p $(seq -f ""weekly.%.0f"" 0 $WEEKS_TO_SAVE)","make $weeks_to_save+1 directories named ""weekly.n"" where n ranges from 0 to ""$weeks_to_save"""
"find ../<dirname> -name '*.jpg' -exec sh -c 'mv ""$0"" ""$(basename $(dirname $0))-${0%.JPG}$.jpg""' {} \;",rename all *.jpg files to *.jpg$.jpg files under ../<dirname>  directory by appending the parent directory name at the beginning of their names
"find . -type f -name ""*.txt""",display all text files in the current folder
find . -type d -maxdepth 1 -exec basename {} \;,display the name of all directories in the current folder and do not search in sub directories
find /var/log,find all files/directories under /var/log directory
set | grep VARIABLE_NAME | sed 's/^.*=//',"show all values (without the names) of variables whose name or value contains ""variable_name"""
find bar -path /foo/bar/myfile -print,display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)
find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +,"change all file permissions to 664 and all directory permissions to 775 in directory tree ""htdocs"""
find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir,find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir
"find . -type d -name "".svn"" -print | xargs rm -rf",clean the current directory from all subversion directories recursively
fold -w 76 -s file.txt | pr -T --indent=4,"wrap each line in ""file.txt"" to fit in 76 characters breaking only at spaces and indent the output"
"find . -name ""*.pdf"" -print0 | xargs -0 rm -rf",recursively finds all '*.pdf' files and folders in a current folder and removes them without prompting.
ssh -p 22 myName@hostname,"ssh into ""hostname"" on port 22 as user ""myname"""
"find . -name '*.txt' -not -name ""all.txt"" | xargs cat > all.txt",concatenate all .txt files residing in the current directory tree
"find . -name ""*.txt"" -exec egrep -l '^string' {} \;","search the current directory recursively for *.txt files with lines that match regular expression ""^string"""
"split -b 1024m ""file.tar.gz"" ""file.tar.gz.part-""","split ""file.tar.gz"" into files of size 1024 mb with a prefix of ""file.tar.gz.part-"""
kill `jobs -lp`,kill group leader
find / [опция_поиска] [значение] 	[опция_действия],"find all files throughout the entire file hierarchy with the optional constraints of опция_поиска, значение and/or опция_действия."
find . -amin -30,find all files in the current folder which have been accessed in the last 30 minutes
tee,print received input to the terminal
find . -maxdepth 1 -type d -print | parallel -X echo Directories:,show the subdirectories of the current directory
"echo ""$FILE"" | cut -d'.' -f1",print file name without extension assuming there is only one dot in the file name.
cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32,"print the first 32 hexadecimal characters from ""/dev/urandom"", determining c locale for character handling functions"
cat $i | xargs mv -t dir.$count,move all files listed in $i file to dir.$count directory
"find ""/proc/$pid/fd"" -ignore_readdir_race -lname ""$save_path/sess_\*"" -exec touch -c {}",find all symbolic links under '/proc/$pid/fd' directory tree with name pattern '$save_path/sess_\*' and update their timestamps
find / -uid 1005 2>/dev/null,find all the files  in the entire file system which belong to the user with the uid 1005 and discard all the errors
df -k /example,report file system containing /example disk usage in kilobytes.
"tempFile=""$(mktemp ""${TMPDIR:-/tmp/}$(basename ""$0"")-XXXXX"")""","creates temporary file in a tmpdir folder or /tmp folder if tmpdir doesn`t defined, with file name like current shell name and '-xxxxx'-formatted suffix, and saves created path to the 'tempfile' variable."
find . -type s,find all socket files in the current directory and its sub-directories.
find / -maxdepth 1 -xdev -type f  -exec grep -li stringtofind '{}' \;,find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions
find $OUTPUTDIR -type f -mtime +7 -delete,"delete all regular files that reside in directory $outputdir and below, and were last modified more than 7 days ago"
find /home/myuser -mtime +7 -print,find all files in the /home/myuser directory recursively that are older than 7 days
"find . -printf ""%h/%f : dernier accès le %Ac\n""",display all files in the current folder along with their last access timestamps
"sort -u -t : -k 1,1 -k 3,3 test.txt","sort "":"" delimited lines in ""test.txt"" by the first and third field preserving only unique lines"
"diff -rqx ""*.a"" -x ""*.o"" -x ""*.d"" ./PATH1 ./PATH2 | grep ""\.cpp "" | grep ""^Files""",find .cpp files that differs in subdirectories path1 and path2.
diff --brief -r dir1/ dir2/,"print which files differ between ""dir1/"" and ""dir2/"""
alias -p | cut -d= -f1 | cut -d' ' -f2,print list of bash command aliases.
find . -type f -exec grep -Iq . {} \; -and -print,search the current directory recursively for text files containing at least one character
yes > backingfile &,"constantly write ""y"" to backingfile as a background process"
sudo ssh $USERNAME@localhost -L 80:localhost:3000 -N,set up a local ssh tunnel from port 80 to port 3000
find mydir -type d,find all directories under mydir
"echo ""$url"" | cut -d':' -f1",extract protocol part from url.
chown root:root it,"change the owner and group of ""it"" to ""root"""
"find . -type d | sed -e 's/\.\///g' | awk '{print $1, $1}' | xargs chgrp",change the group of all directories (except those with a '.') under current directory tree to a group with the same name as the directory name
find /path/to/files -iname '*.jpg' -exec mogrify -format pdf {} +,convert multiple *.jpg files from jpeg to pdf format
chown user3:user3 -R subdir3,"recursively change the owner and group of ""subdir3"" to ""user3"""
"cal $(date +""%m %Y"") | awk 'NF {DAYS = $NF}; END {print DAYS}'",prints number of days in a current month.
find ./cms/djangoapps/contentstore/management/commands/tests -iname *.css | xargs sed -i s/[Ee][Dd][Xx]/gurukul/g,replace all occurrences of edx (case insensitive) with gurukul in all *.css (case insensitive) files under ./cms/djangoapps/contentstore/management/commands/tests directory
od -cAn;,display standard input as printable characters or backslash escapes with no addressing radix
find / -type f -name *.mp3 -size +10M -exec rm {} \;,find all *.mp3 files in entire file system greater than 10mb and delete them
find / -name ”*filename*”,"search for the file in the entire file system which has the words ""filename"" in its name"
find . -daystart -mtime -1 -ls,find all the files in the current folder which have been modified in the last one day
tac file | awk '/pattern/{print;exit}1' | tac,print all lines from the last occurrence of the regex 'pattern' to the end of the file 'file'
find /home/luser -type f -name '*.mpg' | xargs rm -f,remove all .mpg files in the /home/luser directory tree
find ~ -type f -mtime 0 -ls,display a list of all the files  in the home folder which have been modified today
"find . -type f -exec chmod u=rw,g=r,o= '{}' \;","change permissions to u=rw,g=r,o= for all files in the current directory tree"
"find -iname ""query""",find all files/directories named 'query' (case insensitive) under current directory
find . -mtime -1.5 | xargs tar --no-recursion -czf myfile.tgz,get all files in a current directory modified in the last day and a half
"find /home/feeds/data -type f -not -path ""*def/incoming*"" -not -path ""*456/incoming*""",find all files under /home/feeds/data without descending into *def/incoming* and *456/incoming* paths
"find . -iname "".*"" -exec bash -c ""fgrep {} /tmp/list_files >/dev/null || rm -i {}"" \;",find all hidden files under current directory and remove them excluding the files specified in /tmp/list_files
env | grep '^variable=',display name and value of 'variable' if it exists.
"find . -name ""*rb"" -print0 | xargs -0 head -10000","find all the files ending with ""rb"" and display the first 10000 lines from these files."
find /dir -cmin -60,find all files under and below /dir that were changed or created less than 60 minutes ago
find -type d -exec chmod 755 {} \;,change the permission of all the directories to 755 in the current folder
yum -v repolist enabled,lists enabled repositories along with debugging information.
tee foobar.txt,"write standard input to standard output and to ""foobar.txt"""
shopt -s nocasematch,enables shell option 'nocasematch'.
CLEAN=`echo -n $CLEAN | tr A-Z a-z`,convert the content of variable 'clean' to small letters
tree -d,recursively print all directories in the current directory tree
file *.php | grep UTF,"show filename and filetype description of all php files in current directory whose name or filetype description includes ""utf"""
"find . -wholename \*.mbox | awk '{new=$0; gsub(""\.mbox$"", """", new) ; system(""mv \"""" $0 ""\"" \"""" new ""\"""") }'","find regular files under the current directory, whose name ends in .mbox and using awk run multiple system commands to rename each matched file, to the same name without .mbox at the end"
"mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test","mount partition with label ""white"" on ""/mnt/white"" with read and write permission and have it accessible by user and group ""test"""
ipcs -mb | awk 'NR > 3 { print $7 }' | paste -sd+ | bc,"calculate the sum of the 7th column of ""ipcs -mb"""
find MyApp.app -name Headers -type d -delete,search directory tree `myapp.app' for directories whose name is 'headers' and delete them
find . -type f -exec ls -s {} \; | sort -n -r,list files under current directory according to their size in descending order
bzip2 -kv */*/*/*/*/*,verbosely compresses all files on fifth and sixth depth level keeping original files in place.
cat -vet file | less,"page through the contents of yourfile, adding a $ at the end of each line and replacing tab characters by ^i."
"nl -s ""prefix_"" a.txt | cut -c7-","add ""prefix_"" to every non-blank line in ""a.txt"""
"man bash | less -Ip ""\\\'""","display the 'bash' manpage, going to the first occurence of \' sequence of characters."
find /etc -mtime -1,show all the files in the folder /etc which have been modified in the last 24 hours
dig TXT +short o-o.myaddr.l.google.com @ns1.google.com,print short txt record of domain o-o.myaddr.l.google.com from nameserver ns1.google.com
"crontab -u user -l | sed ""$my_wonderful_sed_script"" | crontab -u user -","filter the cron list of user ""user"" through ""my_wonderful_sed_script"" and re-apply the resulting output."
yum list zsh,prints brief information about available package with word 'zsh'.
"find . -name ""*.txt"" -printf ""%T+ %p\n""",find all *.txt files under current directory and print their timestamps and paths
"env | awk -F= '/[a-zA-Z_][a-zA-Z_0-9]*=/ { if (!system(""[ -n \""${"" $1 ""+y}\"" ]"")) print $1 }' | sort | uniq",list all existing environment variables in the current shell.
"sort -nk 2,2 file.dat | tac","numerically sort file ""file.dat"" by the second word of each line and output from greatest value to least value"
find $from_dir -mindepth 3 -maxdepth 3 -type d,find all directories at level 3 of directory tree $from_dir
find . -type f -name test,"search in the current folder for all the regular/normal file with the name ""test"""
"df -h -B 1M | grep dev/sda | tr -s ' '| cut -d' ' -f3 |python -c ""import sys; print sum([int(num) for num in sys.stdin.readlines()])""","count used space on device ""/dev/sda"" in megabytes"
"find /path -type f -iname ""*.txt""",search the /path directory recursively for txt files
"find . -name ""$pattern""",search files in current folder using name patterns
find /home/calvin/ -mindepth 2  -name “*.txt”,find all the text files in the folder /home/calvin which are atleast below 2 levels
"find . -print | grep ""/${prefix}${ypatt}""",display the files/directories under current directory tree matching the regex '/$prefix$ypatt' where $prefix and $ypatt expands in the current shell
find -exec <script> {}\;,find all files/directories under current directory and run <script> for each of them
find / -type f -user root -perm -4000 -exec ls -l {} \;,display a long listing of all the regular files in the file system which belong to user 'root' and which have suid bit set
cal,prints calendar for a current month.
yum install mysql,installs package 'mysql'.
find -type f | wc -l,find all regular files in the current directory tree and count them
comm -3 <(printf '%s\n' */ | sed 's|/.*||' | sort) <(find */ -type d -name bin | cut -d/ -f1 | uniq),find all top level directories under current directory that doesn't contain a file/directory named 'bin'
find asia emea -name \*.gz,find all *.gz files/directories under asia and emea directory
pv data.gz | gunzip -c | ./complicated-perl-script-that-reads-stdin,"use the uncompressed contents of ""data.gz"" as input to ""./complicated-perl-script-that-reads-stdin"" and print a status"
yum provides zsh,displays what package provides value 'zsh'.
"find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -l -Z -i --with-filename --label=""{}"" --color ""perry sound"" | xargs -0 -I{} cp -v {} Found/' \;","find *.pdf files in the pdfs directory tree that contain text ""perry sound"" and copy them to folder found/"
find / -readable,find all of the files that are readable
"find ~ -iname ""screen*""",find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree
find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test',search for files only that end with .php and look for the string $test inside those files
find . \( -type d -name '.svn' -o -type f -name '*.html' \) -prune -o -print0,"find all files in the current directory tree except .html, ignoring .svn directories"
find /usr/src -name fprintf.c,find all files/directories named 'fprintf.c' under '/usr/src' directory tree
find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime -30,find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified less than 30 days ago
find . -iname '*blah*' -mtime -2,find all files/directories containing 'blah' (case insensitive) in their names that were modified in less than 2 days ago uder current directory tree
more /etc/hosts | grep '[[:space:]]*'`hostname`'[[:space:]]*' | awk '{print $1}',"list all ip addresses assigned to current hostname, pausing for user interaction after each page."
tmpfile=`mktemp`,creates temporary file and saves path to it in a 'tmpfile' variable.
find . -name mmm -prune -o -print,display all the files in the current folder excluding the files with the name mmm
"chown -- ""$user:$group"" ""$file""","change owner to ""$user"" and group to ""$group"" of ""$file"""
tr '[:blank:]' \\t,replace any blank character from standard input with a tab
"find ""$d"" -mindepth 1 -prune -empty",search the directory given as variable $d for empty subdirectories
"yes ""Hidden"" | tr '\n' '\0' | dd of=/dev/sdb","continuously write ""hidden"" separated by null terminators over the entire ""/dev/sdb"" disk"
set | grep ^fields=\\\|^var=,finds strings matching pattern '^fields=\\\|^var=' in a 'set' output.
"find ""${S}"" -type f",find all regular files under ${s} directory
tail -f file | grep --line-buffered my_pattern,"print appended data in ""file"" that match ""my_pattern"""
find / -type f -print | xargs file,display the type of all the regular/normal files in the entire file system
find . -name '*' | xargs rm,forcefully delete all files in the current directory
sort <(cd $CURR_DIR && find . -type f -ctime $FTIME) <(cd $CURR_DIR && find . -type f -atime $FTIME) <(cd $CURR_DIR && find . -type f -mtime $FTIME) | uniq,"list files under $curr_dir which were modified, accessed or whose status were changed $ftime ago and sort them and remove duplicate entries"
gzip -l compressed.tar.gz,list file contents of compressed file 'compressed.tar.gz'
"find test -regex ""[course*]"" -type d",find all directories under 'test' directory tree that match the regex '[course*]' in their paths
find /mountpoint -type f -links +1,find all files under /mountpoint and below which have hard links
find . -name “*.jpg” | xargs gimp,find all jpg files residing in the current directory tree and edit them in gimp
sudo mount -o loop /dev/loop0 test,"mount image ""test"" to loop device ""/dev/loop0"""
"find ./ -name ""*.sqlite""",find all sqlite files in the current directory.
zcat file.tar.gz |tar x,"unzip and untar ""file.tar.gz"""
cat file.txt | xargs  | sed -e 's/\ /+/g' | bc,"mathematically sum all numbers in ""file.txt"""
"sed -e 's/\t/_|/g' table.txt |  column -t -s '_' | awk '1;!(NR%1){print ""-----------------------------------------------------------------------"";}'","print a tab separated table in ""table.txt"" with cell borders"
"find -type f -name ""*.htm""",find all *.htm files under current directory
comm -12 ignore.txt input.txt | wc -l,"count the number of equal lines in sorted files ""ignore.txt"" and ""input.txt"""
ssh-keygen -pf private.key,"request changing the passphrase of key file ""private.key"""
"find . -type f \( -name ""*.[sS][hH]"" -o -name ""*.[pP][lL]"" \)",display all the .sh scripts and perl files in the current folder
find /home/ -exec grep -l “mp3” {} \; | xargs rm,delete all the mp3 files in the home folder
find /etc -newer /var/log/backup.timestamp -print,find all the files that have been modified since the last time we checked
find . -type f | egrep '(sdw|sdc|sdd)$' > list_1,"search the current directory recursively for regular files with extensions sdw, sdc, sdd and save the search result as ""list_1"""
zcat sample_0001.gz | sed -e 's/lk=1&//g',"display the contents of ""sample_0001.gz"" with ""lk=1&"" removed"
rsync -e ssh file host:/directory/.,"copy local file ""file"" via ssh to remote ""host"" path ""/directory/"""
"find /home/folder1/*.txt -type f -exec ln -s {} ""folder2_"" + \;",create symlinks to all  /home/folder1/*.txt files and 'folder2_' directory with the same name in a target directory named '+'
year=$(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk '{print $2}'),"save hexadecimal bytes 7 and 8 in binary file ""file.moi"" to variable ""year"""
find . -maxdepth 1 -type d -print | parallel echo Directory: {},show the subdirectories of the current directory
paste file_1 file_2 | column -s $'\t' -t,"merge lines from ""file_1"" and ""file_2"" and format the output as a table with tab separators"
find . -name '*.sql' -exec scriptname {} +,"find all .sql files in the current directory recursively and apply script ""scriptname"" to them"
"find ""$topdir"" -name '*.py' -printf '%h\0' | xargs -0 -I {} find {} -mindepth 1 -maxdepth 1 -name Makefile -printf '%h\n' | sort -u",find all python files (.py files) in $topdir directory tree and search for 'makefile' in all these folders and display all distinct folders having 'makefile'
md5sum *.java | sort | uniq -d,"list "".java"" files that have the same filename and contents"
which -a rename | xargs file -L,"search path for utilities called ""rename"", display the type of file (script, executable, ...) for each match found."
"yes | head -n 100 | awk '{printf( ""%03d "", NR )}'","print a single line of numbers from ""001"" to ""100"""
"find /var/log -name ""syslog"" -type d",find all syslog directories under /var/log directory
"find . ! \( -name ""*.exe"" -o -name ""*.dll"" \)","search the current directory tree for files and directories whose names do not end in "".exe"" and "".dll"""
find /path/to/junk/files -type f -mtime +31 -exec rm -f {} \;,delete all regular files that have not been modified in the last 31 days under '/path/to/junk/files' directory tree
find trunk -type f -exec curl --user user:pass --ftp-create-dirs -T {} https://PATH_TO_NEXUS/{} \;,find all files under trunk directory and upload them to https://path_to_nexus/trunk/
find . -type f  -mtime +7 | tee compressedP.list | xargs compress,compress regular files in the current directory tree that were last modified more than 7 days ago
echo `date` `hostname`,print the date followed by the host name
"find /storage -name ""*.mp4"" -o -name ""*.flv"" -type f | sort | head -n500","find all files/directories with '.mp4' extension and all regular files with '.flv' extension, sort them according to their names and display the first 500 of them"
find . -type f | xargs ls -l,list all regular files in the current directory tree
"bind '""\e[24~"":""foobar""'","bind word ""foobar"" to key code ""\e[24~"""
find /parent -maxdepth 1 -type d -print0 | xargs -0 chmod -R 700,find all directories under maximum 1 level down the /parent  directory and set their permission to 700 recursively
"find . -printf ""%i \n""","find all files and directories under the current directory and display the inode of each one, using printf"
sort | uniq -u | xargs -r rm,remove each unique item listed on standard input and do nothing if empty
command | wc -l,counts lines of 'command' output.
pushd `pwd`,push the current directory path to the dirs stack
find /var/tmp/stuff1 -mtime +90 -delete &,delete in the background all files in /var/tmp/stuff1 and below that have not been modified in over 90 days
yes | nl -ba | tr ' ' 0 | sed 100q | cut -b 4-6,"print new line separated numbers from ""001"" to ""100"""
$ tar xvfJ filename.tar.xz,"extract ""filename.tar.xz"" with verbose output"
ps aux | grep postgres,"show all running processes with name matching ""postgres"""
find . -name *.ini,find all *.ini files
"find . -type f \( -name ""*.shtml"" -or -name ""*.css"" \)","search the current directory tree for regular files whose names end in "".shtml"" or "".css"""
set -eu,raise an error if there is a reference to a non-existent environment variable and exit the shell immediately if there is any error
find -type d exec chmod 755 {} +,find all directories under current directory and set their permission to 755
"find /some/dir -name ""*.pdf"" ! -name ""*_signed.pdf"" -print0",find all pdf files excluding *_signed.pdf files under /some/dir with null character as the delimiter
"find . -type f -name ""*.java"" | xargs    tar rvf myfile.tar",find *.java files under current directory and compress them to myfile.tar
"export JAVA_HOME=$(readlink -f /usr/bin/javac | sed ""s:/bin/javac::"")","export variable ""java_home"" as symlink resolved absolute path of ""/usr/bin/javac"" with ""/bin/javac"" removed"
find /data -type f -perm 400 -exec echo Modifying {} \; -exec chmod 755 {} \;,"find all 400 permission files under /data directory, print 'modifying ' appended with file path for each of them and change their permission to 755"
unset -v latest,unsets shell variable 'latest'.
zcat archive.tgz | tar -x --wildcards apri/fls/filename,"unzip ""archive.tgz"" and extract all archives excluding ones matching ""apri/fls/filename"""
find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30,"find all files changed on the 29th of september, 2008, starting from the current directory"
"read -e -p ""${myprompt@P}""","read a line from standard input in an interactive shell with prompt in variable ""myprompt"" interpreted as ps1 is interpreted"
ls -hal /root/ | sudo tee /root/test.out,"prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file."
"find foldername -type d -exec chmod 755 {} "";""",set permissions for directories in `foldername' and its subdirectories to 755
mate `which rails`,"open executable file for command ""rails"" in text editor ""mate"""
"find . -mmin -15 \( ! -regex "".*/\..*"" \)",this command find displays the files which are modified in the last 15 minutes. and it lists only the unhidden files. i.e hidden files that starts with a . (period) are not displayed in the find output.
find /home/user1/data1/2012/mainDir -name '*.gz' | wc -l,count the number of .gz files in directory tree /home/user1/data1/2012/maindir
find . -exec grep something {} +,find all files under current directory and search for 'something' in those files
find $@ -ls,display a list of all files in the folder passed as argument to a script
find .cache/chromium/Default/Cache/ -mindepth 1 -type d -size +100M -delete,delete all directories under '.cache/chromium/default/cache' directory tree that are at least 1 level deep and are bigger than 100 mb in size
find -type f -print0 | xargs -r0 grep -F 'example',"find all regular files in the current directory tree and search them for ""example"""
"rev file | awk '{print ""result ="",$0}'","for each line in 'file', print ""result = "" followed by the line backwards."
"find . -type f -iname '*'""$*""'*' -ls",find all regular files whose names contain a case insensitive pattern composed of space separated positional arguments and display a long listing of them
fold -w3,print every 3 characters of standard input as a line
hostname -I,print ip addresses of the host name
"tac file | awk '/ScriptAlias/ && ! seen {print ""new line""; seen=1} {print}' | tac","inserts ""new line"" after last occurrence of scriptalias in a file"
find /data -type f -perm 400 -exec echo Modifying {} \;,find all 400 permission files under /data directory and print 'modifying ' appended with file path for each of them
"find . ! -wholename ""./etc*""","display all the files in the current folder excluding those that are present in the path ""./etc"""
"find . | xargs -I{} printf ""%s%s\n"" {} {}","display all files in current folder, with each file name displayed twice on same line"
sudo chown `whoami` /data/db,"change ownership of ""/data/db"" to the current user"
"[ `md5sum $(which c++) | cut -d' ' -f1` == `md5sum $(which g++) | cut -d' ' -f1` ] && echo Yes, equal content || echo No, unequal content","check if command ""c++"" and command ""g++"" are equal"
"find ${INPUT}/ -name ""*.pdf"" -exec test -e '{}'.marker \; -exec mv '{}' '{}'.marker ${OUTPUT} \;",move all *.pdf.marker files and their corresponding *.pdf files under ${input} to ${output}
"find -name ""*.mkv""","find all the files ending with ""mkv"" in current folder"
find . -maxdepth 2  -type f -print0 | xargs -0 -n1 ls -l,list all files in maximum 2 levels down the current directory
find ./ -type f -exec sed -i 's/string1/string2/g' {} \;,"replace ""string1"" with ""string2"" in all regular files in the current directory tree"
ssh -tt foo ./script.py,"force tty allocation and execute ""./script.py"" on host ""foo"""
find . -name pro\*,"search the current directory tree for files and directories whose names begin with ""pro"""
"read -t 0.1 -p ""This will be sent to stderr""","read a line from standard input with a timeout of 0.1 seconds and prompt ""this will be sent to stderr"""
"find `echo ""${searchpath}""` -type f -print0 | xargs -0 grep -l -E '""${string1}"".*""${string2}"".*""${string3}""'","find all files under ${searchpath} that match the regex '""${string1}"".*""${string2}"".*""${string3}""' (${string1} ... won't be expanded) in their contents"
env -i bash --norc,"start bash in a completely empty environment, without parsing /etc/bashrc or ~/.bashrc"
"find . -name ""*.bash""","display all the files in the current folder which end with "".bash"""
"find . -name ""*.zip"" -mtime +2 orint0 | xargs -0 rm",delete all *.zip files under current directory that are older than 2 days
history | grep -A 4 -B 3 whatyousearchfor,"search ""whatyousearchfor"" in history and print 3 lines before and 4 lines after"
find . -size +100M,find all files starting from the current directory which are larger than 100mb
"ln -sfn ""$c"" ""$lines""","force create a symbolic link named ""$lines"" to ""$c"" without dereferencing ""$lines"""
find . -name test -print,"search the current directory tree for files and directories called ""test"""
find . -type f -exec bzip2 {} +,recursively finds and compresses all files in a current folder.
watch 'ls -l',"execute ""ls -l"" every 2 seconds"
nl -nrz -w9  /etc/passwd,"number each line in ""/etc/passwd"" as right-justified zero padded to a width of 9"
cat blah.gz | gunzip | some_command,"use the uncompressed contents of ""blah.gz"" as input to ""some_command"""
echo 'Hello World!' | sed $'s/World/\e[1m&\e[0m/',"use ansi escape codes to make ""world"" bold from input ""hello world!"""
find . -name '*.php' -print0 -o -name '*.xml' -print0 -o -name '*.phtml' -print0 | xargs -0 sed -i '' 's/2013 Magento Inc./2012 Magento Inc./g',"replace all occurrences of '2013 magento inc.' with '2012 magento inc.' in all files with '.php, '.xml' and '.phtml' extensions under current directory tree"
"find / -type f \( -name ""*.xls"" -o -name ""*.csv"" \) -exec ls -l {} \;",display a long listing of all the xls or csv files in the entire file system
split -n 1000000 /etc/gconf/schemas/gnome-terminal.schemas,"split ""/etc/gconf/schemas/gnome-terminal.schemas"" into 1000000 files of about equal size"
"find . -perm /u+w,g+w",search for files/directories which are writable by either their owner or their group
read -t5 -n1 -r -p 'Press any key in the next five seconds...' key,"read a single character from standard input into variable ""key"" without backslash escapes, with a timeout of 5 seconds, and with the prompt ""press any key in the next five seconds..."""
pstree -p -s PID,"displays process tree of a process with id 'pid', showing parent process and processes id."
find /home/my_dir -name '*.txt' | xargs grep -c ^.*,count line numbers on files and record each count along with individual file name.
mkdir -p foo,"make directory ""foo"" and do not cause an error if it exists"
find ~ -empty,find all empty files (zero byte files) in your home directory and its sub-directories.
find / -newer myfile,find files/directories in entire file system newer than myfile
find tmp -maxdepth 1 -name *.mp3 -print0 | xargs -0 rm,remove all tmp/*.mp3 files
"ps -o pid,bsdtime --no-header -p $(pgrep renoise) | awk 'function mmss2s(s) {if (s !~ /^[0-9][0-9][0-9]:[0-9][0-9]$/) return -1; return ((60*substr(s,1,2))+substr(s,4,2))} { if (mmss2s($2) > 100) { print $1; }}'","send the sigterm signal to all processes whose command matches ""bad_process"" and which have used more than 100 seconds of total cpu time."
HOSTNAME=$(hostname),"save the system host name in variable ""hostname"""
"find . -name ""search""",look for files with the name 'search' under current directory
scp -o StrictHostKeyChecking=no root@IP:/root/K,"attempt to connect as root via ssh to host ""ip"" and copy /root/k to local machine, passing option ""stricthostkeychecking=no"" to the ssh backend - this will normally fail because ssh servers by default don't (and shouldn't) accept root logins."
find . -maxdepth 1 -size 0c -exec rm {} \;,find files that are 0 bytes in size in the current directory and remove them
"find /PROD -type d -execdir sh -c 'for f in *.json; do /tmp/test.py ""$f""; done' \;","find all the json files in the directory ""prod/140725_d0"" and send them as input to the python script ""/tmp/test.py"""
"find ""$HOME"" -name '*.txt' -type f -not -path ""$HOME/newdir/*"" -print0 | xargs -0 cp -t ""$HOME/newdir""","find all txt files in the current directory and copy them to directory ""$home/newdir"""
"cd $(echo $somedir | sed ""s#^~#$HOME#"")","go to directory specified by variable ""somedir"", but replacing leading ~ character by actual home directory."
find . '(' -name FOLDER1 -prune -o -name filename ')' -print,"find all files named ""filename"" in the current directory tree, not descending into ""folder1"" directories"
find . -type f -maxdepth 1 -empty -print0 | xargs -0 /bin/rm,find all empty files in the current directory and delete them
find . -type f -print | xargs    grep -il 'bin/ksh',find files under current directory that contains the string '/bin/ksh'
find . -path ./.git  -prune -o -name file  -print,"find recursively the files named ""file"" in the current directory ignoring the .git subdirectory"
find . -type f -exec grep 'needle' {} \;,search for a word in all the files in the current directory
"ln -sf ""$(readlink -f ""$link"")"" ""$link""","convert relative symbolic link ""$link"" to absolute symbolic link"
find $LOGDIR -type d -mtime -1 -exec compress -r {} \;,compress all directories found in directory tree $logdir that have been modified within the last 24 hours
mount /outside /inside -o bind,"remount subtree ""/outside"" to ""/inside"" as a bind"
find /path/to/source -type d | cpio -pd /path/to/dest/,"recursively copy all directories in ""/path/to/source"" to ""/path/to/dest/"" preserving directory hierarchy"
scp -P 2222 /absolute_path/source-folder/some-file user@example.com:/absolute_path/destination-folder,"connect to port 2222 of example.com as ssh user ""user"", and copy local file ""/absolute_path/source-folder/some-file"" to remote directory ""/absolute_path/destination-folder"""
"df . -B MB | tail -1 | awk {'print substr($5, 1, length($5)-1)'}",print percents of the space used on the file system containing path to the current working directory.
echo 'ee' | tee /dev/stderr | foo,"write ""ee"" to standard output and ""/dev/stderr"" as input to ""foo"""
"find /home/d -type f -name ""*.txt"" -printf ""%s\n"" | awk '{s+=$0}END{print ""total: ""s"" bytes""}'",get the disk space used by all *.txt (case insensitive) files under /home/d directory
find /home/username/public_html/sites/all/modules -type d -exec chmod 750 {} +,find all directories under /home/username/public_html/sites/all/modules and set their permission to 750
sudo chown root /home/bob,"change the ownership of ""/home/bob"" to ""root"""
"find . -name ""*.c"" | xargs grep pattern","search for ""pattern"" in all the .c files in the current directory tree"
"find ~/container  -mindepth 3 -type f | xargs -i bash -c 'mv ""{}"" $(dirname ""{}"")/..'",find all regular files starting from level 3 of directory tree ~/container and move them one level up
"find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90 -printf ""%h\n"" | sort | uniq",find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique parent directory paths
"find . -name ""t*.sh"" -exec rm -vf '{}' \;","remove all .sh files in the current directory tree whose names begin with ""t"""
"ps h -o pid,user -C ssh,sshd | tr -s "" """,print pid and user of processes running ssh or sshd and replace sequential spaces with a single space
"find -name ""*.txt"" -print0 | xargs -0 rm",remove all text files from the current folder. print0 is used to handle files whose names have only spaces or those files which have newlines in their names
find -mtime 0 -not \( -name '*.swp' -o -path './es*' -o -path './en*' \),search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*
kill $(pgrep 'python csp_build.py'),"send sigterm signal to all python processes running script ""csp_build.py"""
yes yes | sed -e 5s/yes/no/ -e 5q,"print ""yes"" 4 times followed by 1 ""no"""
"find $DIR/tmp/daily/ -type f -printf ""%p\n"" | sort -rn | head -n 2 | xargs -I{} cp {} $DIR/tmp/weekly/","find all regular files under $dir/tmp/daily/, sort them in reverse numerical order and copy the first two files to $dir/tmp/weekly/"
"find /dir \( -name foo -prune \) -o \( -name bar -prune \) -o -name ""*.sh"" -print","find all the files ending with "".sh"" in the folder /dir excluding those wth the names foo and bar."
mount | tail -1 | sed 's/^.* on \(.*\) ([^)]*)$/\1/',print the drive and mount point of the last mounted drive
"find . -not \( -name *.jpg -prune -o -name *.png -prune -o -name *.ttf -prune \) --type f -print0 | xargs -0 sed -i '' -E ""s/[[:blank:]]+$//""","remove trailing white spaces from all files under current directory ignoring *.jpg, *.png and *.ttf files"
find / \( -type f -or -type d \) -name \*fink\* -print,find all *fink* files/directories in entire file system
"octave -q --eval 'printf (""%f\n"", sin([0:0.1:pi/2]))'|nl|tee y.txt","calculate the sin values of the interval from 0 to pi/2 with a step of 1, add a line number, and write the output to standard output and ""y.txt"""
read dir,"read a line from standard input into variable ""dir"""
find / \( -newer ttt -or -user wnj	\) -print,find all files/directories that are newer than 'ttt' by modification time or owned by the user 'wnj' in the entire filesystem
kill -9 \`pgrep myprocess\`,instantly kill all processes whose command is 'myprocess'.
set derby,"display all variables with names starting with ""derby"" in a window's command line"
"find / -type f -size +20M -exec ls -lh {} \; 2> /dev/null | awk '{ print $NF "": "" $5 }'",find files on the system that are bigger than 20 megabytes
find . -name '*.ext' | parallel echo {} '`dirname {}`',find all *.ext files/directories under current directory and print their path and parent directory path
"find . -name ""$i"" -type f -print | xargs egrep -n ""$SrchStr"" >/dev/null","find ""$i"" files under current directory and search for ""$srchstr"" in those files"
find $HOME -mmin -30,find all the files in the home folder which have been modified in the last 30 minutes
ssh buck@hostname,"ssh into ""hostname"" as user ""buck"""
comm -2 -3 A B | comm -2 -3 - C | comm -2 -3 - D,"print unique lines in sorted file ""a"" when compared to sorted files ""b"", ""c"", and ""d"""
"find / -perm /g+w,o+w",find files in entire file system that are writable by group or other
awk -f script.awk File2 File1 | rev | column -t | rev,"execute awk script ""script.awk"" on ""file2"" and ""file1"" and format output as a table"
tmux set-environment -u RBENV_VERSION,unset rbenv_version variable from within tmux session.
find . -name  '*.txt' -exec cat {} \;,display the contents of all the text files in the current directory
tail -n 100 file1 | pv | wc -l,counts lines in file file1 and shows progress bar while doing.
"echo ""$url"" | cut -d'/' -f1-3",extract protocol and host name from url.
find test -depth -type d -empty -delete,"delete all empty directories in the ""test"" directory tree"
"LOGNAME=""`basename ""$0""`_`date ""+%Y%m%d_%H%M""`""",append the current date in '%y%m%d_%h%m' format with the basename of $0 and save it to variable 'logname'
find . | grep -v \.svn,search the current directory tree for all files except svn ones
find /proc/scsi/ -path '/proc/scsi/usb-storage*' -type f | xargs grep -l 'Attached: Yes',search for 'attached: yes' in all regular files under '/proc/scsi' directory tree matching the path '/proc/scsi/usb-storage' and show only the matched filenames
find * -maxdepth 0 ! -path . -exec mv {} PRE_{} \;,"prefix all files and folders in the current directory with ""pre_"""
"find . -name ""* *"" -exec rm -f {} \;",delete files containing whitespaces
yum install ffmpeg-2.6.4-1.fc22.x86_64.rpm,installs locally located 'ffmpeg-2.6.4-1.fc22.x86_64.rpm' package.
"MOD_DATE1=$(date -d ""$MOD_DATE"" +%s)",represent time string $mod_date as seconds since epoch and save to variable 'mod_date1'
find . -name \*.php,"find all files, folders, symlinks, etc matching pattern ""*.php"" in the current directory recursively"
screen -X quit,close the current screen session
tmux attach -t test1,attaches to 'test1' tmux session.
comm -23 <(ls) <(ls *Music*),"compares two listings 'ls' and 'ls *music*', showing only strings that unique for first listing."
"fold -s ""$2"" | mailx -s ""$SUBJECT"" -b ""abc@abc.com"" ""$EMAIL"" -r ""$MAILBCC""","format email message in file specified by ""$2"" to fit in 80 characters split at spaces and send to ""$email"" and a bcc to ""abc@abc.com"" from ""$mailbcc"" with subject ""$subject"""
ln -nsf alpha_2 alpha,"force create a symbolic link without dereferencing named ""alpha"" to ""alpha_2"""
find . -type l | xargs -I % ls -l % | grep targetfile.txt,list all symlinks under current directory and search for targetfile.txt in this list
"history -d ""$1""","delete history entry at offset, defined in first argument of executed script"
echo 'ls -hal /root/ > /root/test.out' | sudo bash,"prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file."
"find /home/jul/here -type f -iname ""*.php"" -o -iname ""*.js"" ! -path ""/home/jul/here/exclude/*""",find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding *.js files/directories under /home/jul/here/exclude/* paths
find / -name foo,find all files/directories named 'foo' in the entire filesystem
"find . -name '*.php' | awk '{gsub("" "",""\\ "", $0);print $0}' |xargs wc -l",counts lines in each of *.php files in a current folder and subfolders and prints total count.
"find . -name ""*.php"" -not -path ""./tests*"" | xargs wc -l",counts lines in each of *.php files in a current folder and subfolders ignoring 'tests*' folders and prints total count as well.
find ~ -size -500b,display all the files in the home folder which are smaller than 500 bytes
"find -type f -newermt ""Nov 21"" ! -newermt ""Nov 22"" -delete","remove the regular files from the current directory tree that were last modified on november, 21"
"find . -name ""filename including space"" -print0",display all the files having spaces in the current folder
"find . -iname ""*.pdf"" -exec tar --append --file=somefile.tar {} \;",find all the pdf files in current folder and create a tar ball of all these files
"find / -name  ""*.txt"" -xdev 2> /dev/null",find all *.txt files except for those on other file systems
wc -l $file | awk '{print $1}';,counts lines in file $file and prints number only.
find /Users -type d -iname '*.bak' -print0 | xargs -0 rmdir,removes all empty folders that ends with any-cased '*.bak' under '/users/' path.
find /your/dir -type f -size +5M -print0 | xargs -0 ls -1Ssh,display a list of files with sizes in decreasing order of size of all the regular files under '/your/dir' directory tree that are bigger than 5 mb in size
find ./subfolder ./subfolder/*/ -maxdepth 1 -type f,find all files under maximum 1 level down the ./subfolder and ./subfolder/*/  paths
pstree -p | grep git,"composes full process tree with process id numbers, and prints only those strings that contain 'git'."
find . -type d -exec chmod 500 {} \;,find all directories under current directory and change their permission to 500
"( find . -iname ""dl-aster-full-20131102*"" -exec grep ""Processed Files"" {} \;) | cut -d"":"" -f2",search for 'processed files' in all dl-aster-full-20131102* (case insensitive) files under current directory and print only the 2nd field from the output with : (colon) as the delimiter
checksum=`md5sum /etc/localtime | cut -d' ' -f1`,calculate md5 checksum of '/etc/localtime' and save the first space separated part in variable 'checksum'
find -iname '*.java'|xargs grep 'class Pool',search for 'class pool' in all *.java (case insensitive) files under current directory
find . -type f | egrep -v '\.bz2' | xargs bzip2 -9 &,recursively finds all files in a current folder excluding already compressed files and compresses them with level 9.
"find . -name ""*~"" -exec rm {} \;",delete all files in the current directory tree whose names end with ~
touch $'Icon\r',create an empty file with a carriage return character in its name.
comm -12 <(zcat number.txt.gz) <(zcat xxx.txt.gz),"print equal lines in compressed files ""number.txt"" and ""xxx.txt"""
find . -name '*' | xargs wc -l,display the number of lines in all the files in the current folder
"IFS=$'\n';for f in `find .`; do file=$(echo $f | tr [:blank:] '_'); [ -e $f ] && [ ! -e $file ] && mv ""$f"" $file;done;unset IFS",find all files/directories under  current directory and rename them by replacing all blank spaces with _ in their paths
find . -name '*.js' -\! -name 'glob-for-excluded-dir' -prune,find  js file which name is not  'glob-for-excluded-dir'  under current directory.
"find . -name ""*.pdf"" -maxdepth 1 -print0 | xargs -0 rm",remove all the pdf files in the current folder and do not delete those in the sub folders
"find /home/vmail/ -type d -path ""*/*/Maildir/.LearnAsHam/new"" -exec sh -c '(cd {} && mv ./* ../../.Inbox/new)' ';'","find directories in /home/vmail that match pathname ""*/*/maildir/.learnasham/new"", and move them to folder .inbox/new"
CURRENT=`pwd`,"save the current working directory to variable ""current"""
find -execdir ipython nbconvert {} \;,find all files/directories under current directory and run ipython nbconvert for each of them with the file/directory path as a argument by changing into the parent directory
find /thepath -type d -empty -print0 | xargs -0 rmdir -v,"removes all empty folders under path '/thepath', printing info message on each operation."
"find . -mtime 1 -name ""*.html"" -print",find all the html files that are acces in the last 24 hours in the current folder
find /directory_path -mtime -1 -print,find all files/directories under '/directory_path' directory tree that have been modified within the last day
seq 10 | jq -s 'add',calculate the sum of all the numbers from 1 to 10
ls -tr | head -n -5 | xargs rm,delete all but the most recent 5 files
sudo find / -name mysql -print,find in the entire file system for the file mysql
set -o history,enable history in a script
find / -size +10000k,display all the files in the entire file system which are bigger than 10mb
find /Users/david/Desktop -type f \( -name '*.txt' -o -name '*.mpg' -o -name '*.jpg' \),"search directory /users/david/desktop/ recursively for regular files with extensions .txt, .mpg, .jpg"
ifconfig | grep 192.168.111 | awk '{print $2}',"finds ip address of system network interface, that belongs to 192.168.111 subnet."
ssh `vagrant ssh-config | tail -8 | perl -pe 's/^\s+/-o@/; s/\s/\=/;s/@/ /;s/\n/ /'` vagrant@localhost,"ssh into default vagrant host without running ""vagrant ssh"""
"find . -type f -name ""*.txt"" ! -path ""./Movies/*"" ! -path ""./Downloads/*"" ! -path ""./Music/*"" -ls","list in detail all *.txt files in the current directory tree, omitting paths ./movies/*, ./downloads/*, and ./music/*"
"find /home/u20806/public_html -maxdepth 1 -mmin +5 -type f -name ""*.txt"" ! -name ""robots.txt"" -delete","remove all *.txt files, except robots.txt, under the given directory modified more than 5 minutes ago"
find . -mtime -14 -print|xargs -i rm \;,delete all the files in the current folder which have been modified in the last 14*24 hours
find . -name “*.old” -print | wc -l,display the total count of all the files/directories with '.old' extension under current directory tree
find . \( -path './*' -prune \),list files in the current directory
find -L /usr/ports/packages -type l -exec rm -- {} +,delete all the broken symbolic links from the folder /usr/ports/packages
find . -newer poop,find files modified more recently than file poop
find -type f | sed 's/./\\&/g' | xargs grep string_to_find,search for 'string_to_find' in all files under current directory
find . -name onlyme.sh -exec pwd \;,search for a shell script in the current folder and display the current folder path
find /path/to/search -xtype l,find all broken symlinks under /path/to/search directory
ls -l `which passwd`,"print file information of command ""passwd"""
find empty1 empty2 not_empty -prune -empty,"print the empty files/directories among empty1, empty2 and not_empty"
find / -size +700M,find all files more than 700 megabytes
find . -name test -prune,"find all files named 'test' in the current directory tree, not descending into ""test"" directories"
find . -newer Nov -ls,display a long listing of all the files/directories under current directory tree that are newer than the file 'nov' by modification time
ping -D -n -O -i1 -W1 8.8.8.8,time stamp every ping request to 8.8.8.8 in unix epoch format
ls -d -1 $PWD/*.*,prints full path to files with dot in name in a current folder.
mount -t smbfs -o soft //username@server/share /users/username/smb/share,"mount remote ""smbfs"" filesystem ""//username@server/share"" on ""/users/username/smb/share"" as soft"
find . -type f -exec file {} \;,find all files under current directory and show their file information
find . -mmin 0.5,display all the text files in the current folder which have been modified in the last half minute ( 30 seconds )
find test -type f,find all regular files under test directory
du -csxb /path | md5sum > file,create md5sum of a directory
proc1 | tee >(proc2) ... >(procN-1) | procN,"write the output of ""proc1"" to standard output and to all commands from ""proc2"" to ""procn"""
find . -type f -name '*some text*',"find all the regular files in the current folder which start with a ""some text"""
find / -type f -size +50M -size -100M,find files on the system bigger than 50mb but smaller than 100mb
find ./ -ctime +30 -type f -exec rm -f {} \;,remove all the files in the current folder which have not been changed in the last 30*24 hours
shopt -s expand_aliases extglob xpg_echo,"enables shell options 'expand_aliases', 'extglob', 'xpg_echo'."
find . -type f -mtime -1,find all the files that have been modified in the last 24 hours
rsync -u -r --delete dir_b dir_a,"recursively copy ""dir_b"" to ""dir_a"" and delete any new files in ""dir_a"""
find . -size +10M -size -20M,find all the files in current directory of size greater than 10mb and less than 20 mb.
"find temp/medium -iname ""*.jpg"" -printf 'mv %p %p\n' | sed 's/\.jpg$/_MED\.jpg/' | while read l; do eval $l; done",rename all *.jpg files to *_med.jpg files under temp/medium directory
find -name 'catalina*',find all catalina* files/directories under current directory
"find . -name "".DS_STORE""","find all files in the current directory tree whose names are "".ds_store"""
"ls -l | grep ""^d""",filters only directories from long file listing of the current directory.
vi `which yum`,"open executable file of command ""yum"" in vi"
zcat file.gz,"unzip ""file.gz"" to stdout"
find /var/www -name *.gif -size +5k -size -10k,find all .gif files in the /var/www directory tree that are between 5 kb and 10 kb in size
"mount -o rw,remount -t rfs /dev/stl12 /system","remount ""rfs"" filesystem ""/dev/stl12"" on ""/system"" with read and write permission"
find -maxdepth 2 -name passwd,find the passwd file in the current directory and one level down
find dir -name \*~ | xargs echo rm,find all *~ files/directories under dir and  print an rm command for each of them for deletion
find -path ./D -prune -o -name hi.dat -print,search in the current directory and all sub-directories except ./d for the file named hi.dat
find /your/webdir/ -type d -print0 | xargs -0 chmod 755,correct permissions for directories in the web directory
echo 'some_file_name' | cpio -p --owner someuser:somegroup destination_directory,"copy ""some_file_name"" to ""destination_directory"" and change ownership to ""someuser:somegroup"""
find . -empty,find empty files and directories
find . -name game,find all files/directories named 'game' under current directory tree
"find jcho -name '*.data' | while read -r f; do cp ""$f"" ""$(echo ""$f"" | sed 's~\([^)]*\)/\([^()]*\)$~\1_\2~')""; done",copy all *.data files under jcho directory to files whose names are constructed by appending the parent directory names at the beginning of their names
find . -name 'VPN_CALLRECORD_20140409*' -type f| xargs ls -lhrt |awk '{print $9}' > log.txt,list all vpn_callrecord_20140409* files under current directory and print the 9th fields from the output to log.txt
find /var/log/ -type f -exec grep -H ‘19:26′ {} \;,"search all regular files in the /var/log directory tree for string ""19:26"""
find . -exec grep chrome {} \;,"search the files from the current directory tree for ""chrome"""
find ./Desktop -type f,find all regular files under ./desktop directory
find $LOCATION -name $REQUIRED_FILES -type f -mtime +1 -delete,delete files under $location that match $required_files in their names and were modified more than 1 day ago
"read -a to_sort <<< ""$1""","read the first line in ""$1"" and save each word in the bash array variable ""to_sort"""
find / -type f ! perm 777,find all files without 777 permision
find /home -name .rhosts -print0 | xargs -0 rm,find and remove the .rhosts file in the /home directory tree
tree -ivL 1 /data/ | perl -nlE 'say if /\Acommand-[0-9][0-9a-z.]*-setup\z/',"list all files and directories in ""/data/"" sorted by version number"
fold -w 10,wrap standard input to fit in 10 characters per line
tee /tmp/arjhaiX4,"write standard input to standard output and file ""/tmp/arjhaix4"""
ip=$(hostname -I | awk '{print $1}'),"save ip addresses of the host name in variable ""ip"""
find -newer timestamp-file -type f > list-of-files,find all the files in the current folder which have been modified after a specific timestamp and save the output to a file
join -j1 file2 file1,"for each line whose first field is the same in file1 and file2, output the common first field followed by all other fields in file1 and file2."
find backup/ -type d | tar cf directory-structure.tar -T - --no-recursion,archive the directory structure under backup directory into directory-structure.tar
"bind '""\C-i"":complete'","bind ""\c-i"" to ""complete"" function"
"find temps/ -name ""thumb.png""",find all thumb.png files in the temps/ directory tree
find sourceDir -mindepth 1 -maxdepth 1 -exec mv --target-directory=destDir '{}' +,move all files from the `sourcedir' directory to the `destdir' directory
comm -23 <(sort file1.txt) <(grep -o '^[^;]*' file2.txt | sort),"extract any line in ""file1.txt"" which does not appear as the first "";"" delimited entry in ""file2.txt"""
find `pwd` -group staff -exec find {} -type l -print ;,list every symbolic link in every home directory's subdirectory owned by group `staff'
find . -type f -mmin -60 | xargs -r ls -l,list all regular files from the current directory tree that were modified less than 60 minutes ago
shred -v -n 1 /path/to/your/file #overwriting with random data,"overwirte file '/path/to/your/file' with random content, showing progress while execution."
tail -f /var/log/some.log | grep --line-buffered foo | grep bar,"print appended data in ""/var/log/some.log"" that match ""foo"" and ""bar"""
find src/js -type f,display all the regular/ normal files in a folder
{ read -r -d' ' time && IFS= read -r -d '' filename; } < <(find . -type d -printf '%A@ %p\0' | sort -z -r -n),find the directory with least access time under current directory and assign it to $filename
"source  <(date +""CDATE='%Y-%m-%d %H:%M:%S' EPOCH='%s'"")","create a variable cdate in the current shell that contains the date in '%y-%m-%d %h:%m:%s' format , and a variable epoch that contains the seconds since epoch"
"ssh -i keyFile user@host bash -c ""\""nohup ./script arg1 arg2 > output.txt 2>&1 &\""""","login to ""user@host"" with key ""keyfile"" and execute ""./script arg1 arg2 > output.txt 2>&1"" in the background"
rsync -av --exclude '*.svn' user@server:/my/dir .,"archive ""/my/dir"" on host ""server"" as user ""user"" to the current local directory excluding files ending in "".svn"""
find . -name '...' 2>/dev/null,"list files under the current directory that match the filename '...', suppressing all error messages"
find `pwd` -name core -ctime +4 -execdir /bin/rm -f {} \;,remove `core' files whose status was changed more than 4 days ago
"find ""${DIR}"" -name ""*.txt""",search directory tree $dir for *.txt files
"find . -type f -newermt ""Aug 10"" ! -newermt ""Aug 17"" -exec rm {} \;",remove all regular files from the current directory tree that were modified between august 10th and august 17th
"(IFS=$'\n'; for t in `find -type f -name ""*txt*"" | sed 's|.*/||'`; do ln -s $t ../folder2/$t; done)","create symbolic links in directory ""folder2"" to all files located in current directory that filename not started with ""."""
fold -1 /home/cscape/Desktop/table.sql  | awk '{print $0}',"send each byte in ""/home/cscape/desktop/table.sql"" to awk"
find | perl -lne 'print quotemeta' | xargs ls -d,list all files/directories under current directory
find . -type f -mtime -14 -printf '%f\n' > deploy.txt,save the list of files modified within a fortnight ago to `deploy.txt' stripping the file names of any leading directories
history -r .cwdhist,"append the contents of "".cwdhist"" file to the current in-memory history list"
find dir_to_start -name dir_to_exclude -prune -o -print0 | xargs -0 chown owner,"change the owner of all files in the directory tree ""dir_to_start"" excluding directory ""dir_to_exclude"" to ""owner"""
sed -r 's/((:[^: \t]*){3}):[^ \t]*/\1/g' file | column -t,"remove what follows the forth occurrence of the character "":"" in any field which contains it"
find . -name AssemblyInfo.cs | xargs git diff --name-status --,"find files named ""assemblyinfo.cs"" in the current directory and below, and run ""git diff --name-status"" on them"
find .  -maxdepth 2 -name '*.tmp',"find in the current direcoty whose suffix is .tmp , find will not serach recursively limit of find is 2 subdirectory ."
find ~ -atime +100 -delete,delete all files in the current user's home directory and its sub-directories that have not been accessed for more than 100 days.
cut -d / -f 4- .exportfiles.text | xargs -n 1 dirname,"takes path list from '.exportfiles.text' file, cuts off first two path segments and last one."
"find . -type f -name ""*.mkv""",search the current directory tree for regular .mkv files
"df -P ""$path"" | awk 'BEGIN {FS=""[ ]*[0-9]+%?[ ]+""}; NR==2 {print $1}'",print name of the block device containing the file system containing $path.
groups | tr \  \\n,print linux group names on multiple lines instead of single line output
find . -iname '.note',"search the current directory tree for files whose name is "".note"", case insensitive"
find . -exec echo {} \+,find all files/directories under current directory and print their paths
"find . -type f -name ""FILE-TO-FIND"" -exec rm -f {} \;",delete all regular files named 'file-to-find' under current directory tree
find . -maxdepth 1 -type f -name 'image*png' `,find all the png files in the current folder which begin with the word image and do not search in the sub directories
find . -name \*.ext | cat - list.txt | sort | uniq -u,"display all files ending with "".ext"" in current folder and append the file contents of list.txt and sort them based on name and display only uniq items"
"curl https://s3.amazonaws.com/sampletest/sample.tar.gz | gunzip | pax -r -s ""/old/new/""","download ""https://s3.amazonaws.com/sampletest/sample.tar.gz"", unzip it, and untar it replacing filenames with ""old"" to ""new"""
"find . -type f -name ""*.txt"" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' ""$i"">/tmp/.$$ && cat /tmp/.$$ > ""$i"";done' arg0 {} +",remove trailing whitespaces in .txt files from the current directory tree
"find . -name ""*.bam""",search for .bam files anywhere in the current directory recursively
awk '{print $1}' file.txt | xargs dig +short,takes first text field from file 'file.txt' as a domain name and gets short a record for this one.
find . -type f -exec chmod 600 {} \;,find all files under current directory and change their permission to 600
find . -type f -exec echo {} \; | wc -l,display the number of regular files under current directory tree
"find . -type f -name ""*.java"" -exec grep -il string {} \;",find `string' in all *.java files ignoring the case of that string
find $(pwd) -type f | xargs -I xxx sed -i 's/\r//g' xxx,converts all windows line endings to unix line endings
SELF=`readlink /proc/$$/fd/255`,"save the absolute path of the current script to variable ""self"""
pstree -sp $$,prints process tree of a current process with id numbers and parent processes.
find / -path /media -prune -o -size +200000 -print,search the file hierarchy for files larger than 100000 kb without searching any mounted removable media
"grep -r --include ""*.txt"" texthere .","recursively finds strings like ""texthere""  in all ""*.txt"" files of a current folder."
"find /foo -name ""*.txt"" -exec du -hc {} + | tail -n1",find all *.txt files under /foo and print their total size
"find -name ""MyCProgram.c""","find all files with the name ""myprogram.c"" in the current directory and all of it's sub-directories."
"find . -name *.ini -exec sh -c ""grep -q PROJECT_A {} && grep -q CONFIG_A {} && echo {}"" \;","find all the files in current folder ending with ""ini"" and display all files which contain several patterns"
find . -type f -maxdepth 1 -exec sh -c 'cat /dev/null > {}' \;,truncate all regular files under the current directory
find . -maxdepth 1 -name \*.txt -print0 | grep -cz .,find the count of text files that are present in the current working directory.
yes | rm -r *.txt,"recursively remove all ""*.txt"" files and answer ""y"" to any prompt"
"find FFF -name ""*.txt"" -exec md5sum '{}' \;","find all text files in the folder ""fff"" and find the md5sum for them"
seq 10 | xargs echo,print space separated numbers from 1 to 10
sudo lsusb -t|less,"display a tree-like view of usb devices, letting the user page through it with the arrow keys, with the q key to quit."
find . -exec env f={} somecommand \;,execute `somecommand' on each file from the current directory tree with the environment variable f set to the filename
find . -type f |sed '/.\/dir[12]\/[^/]*$/d',display all regular files under current directory tree ignoring files in './dir1' and './dir2' directories
find bar1 -name '*foo*' -not -type d -not -name '*.cc' -exec ln -s $PWD/'{}' bar2/ \;,"create symbolic links in the current directory for all files under ""bar1"" that are not directories and do not end in "".cc"""
hostname --all-ip-address|cut -d ' ' -f1,print ip addresses of the host name
yes | command-that-asks-for-input,"continuously send ""y"" to input of ""command-that-asks-for-input"""
cat foo.c | sed '/^\s*$/d' | wc -l,count non-blank lines in a file 'foo.c'
"alias killaf=""kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`""","set alias ""killaf"" for command ""kill -9 `psu|grep mf1pp|grep -v grep|awk '{print $2}'`"""
"echo $(date) ""0"" | tee -a log.csv","write the current date and time followed by "" 0"" to the console and append to ""log.csv"""
"path=""$( dirname ""$( which ""$0"" )"" )""","save the directory name of the current bash script to variable ""path"" if it is found in one of the directories specified by path."
source <(metaflac --show-tag ARTIST myfile.flac),"use metaflac to extract the artist field from myfile.flac, and set the variable artist to the value of that field."
zless MyFile,lists content of compressed text file.
"find . -type f -name ""*.php"" -exec wc -l {} +;",show the number of lines for each php file in the current directory tree
find / -type f -name dummy 2>/dev/null -exec cat {} \;,"display the contents of all the files in the current folder which have the name ""dummy"" and discard all the errors while searching"
find . -empty -ok rm {}\;,delete all the empty files in the current directory only if they are ok and the user has the permission to delete them
"find / -type f| egrep -o ""/[^/]{0,24}$"" | cut -c 2-",search the file system for regular files whose names are shorter than 25 characters
diff <(fold -w1 <(sed '2q;d' $f)) <(fold -w1 <(sed '3q;d' $f)) | awk '/[<>]/{printf $2}',"print the difference between line 2 and 3 in file ""$f"""
date -ud @1267619929,format the date represented by time string @1267619929 according to default format and print it
who | cut -d' ' -f1 | sort | uniq,print a list of unique users who are logged in
find . -type f -user tom,"display all the regular files in current folder that belong to the user ""tom"""
find . -type f -size +1M -exec rm {} +,remove files that are greater than 1mb in size under current directory
"find / -type f | egrep '.*/.{1,24}$'",search the file system for regular files whose names are shorter than 25 characters
crontab -l -u user | cat - filename | crontab -u user -,"add content of ""filename"" to the existing cron jobs of user ""user"", without removing the previously existing cron jobs."
"find /usr/local/games -name ""*xpilot*""",find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'
pass=$(LC_CTYPE=C < /dev/urandom tr -cd [:graph:] | tr -d '\n' | fold -w 32 | head -n 1),generate a random 32 ascii character password from /dev/urandom and save it to variable 'pass'
cat file-of-ips | xargs -n 1 -I ^ -P 50 ping ^,"infinitely ping every host listed in ""file-of-ips"" with at most 50 processes at once"
"find . -type f -name ""FindCommandExamples.txt"" -exec rm -f {} \;",delete all regular files named 'findcommandexamples.txt' under current directory tree
"find / \! -name ""*.c"" -print",list all *.c files in entire file system
wc `find`,"print line, word and byte count for each file recursively and also show the total counts"
full_backup_dir=$(find . -depth '(' -wholename './.*' ')' -prune -o -print),find all files in current directory excluding hidden files and put the output into full_backup_dir variable
env - `cat ~/cronenv` /bin/sh,run a shell with all environment variables specified in the file 'cronenv' in the user's home directory.
"find /etc -maxdepth 1 -name ""*.conf"" | tail",find *.conf files/directories only upto 1 level down under /etc directory and show a few lines of output from the end
"find ./ -type f -exec sed -i ""s/$1/$2/"" {} \;",find all files in the current directory tree and replace string $1 with string $2 in them
find /tmp/a1 -print0 | tar --null -T- -cvf dirall.tar,"create tar archive ""dirall.tar"" and copy all files from directory tree /tmp/a1 to it"
"paste -d, -s file","merge each line in ""file"" into a single comma separated line"
"echo hello world | tee /dev/tty | awk '{print $2, $1}'","print the input ""hello world"" to the console followed by a swap of the first two awk fields"
"find ""$ORIG_DIR""","display all the files in the folder ""$orig_dir"""
find . -iregex '.*/.git/.*' -prune -o -type d -name 'CVS',display all directories in current folder excluding those that are present in .git folder
"find . -iname ""photo.jpg""",find all files/directories named 'photo.jpg' (case insensitive) under current directory tree
ln -nsf $lastModified $SYMLINK_PATH,"force create a symbolic link without dereferencing named ""$symlink_path"" to ""$lastmodified"""
find /data -type f -perm 400 -print -quit,find a 400 permission file under /data directory
"find . -type f -not -iwholename '*.git*' -print0  | xargs -0 sed -i .bak -E ""s/[[:space:]]*$//""",remove trailing white spaces from all files under current directory ignoring directories wtih *.git* (case insensitive) in their paths and keep backups of the originals
find /dir -type f -size 0 -print,find empty regular files in /dir and its subdirectories
"find ""$1"" -type f | egrep -v '\.bz2' | xargs bzip2 -9 &","compresses with compression level 9 all files under the current folder but already compressed '*.bz2' files, performing in background."
find / -name foo.bar -print,find all files/directories named 'foo.bar' in the entire filesystem
find . -name '*bills*' -print,"search the current directory tree for files whose names contain ""bills"""
find .  -path '*f',"find files ending in ""f"""
cat file | clipboard,"send the contents of ""file"" as input to ""clipboard"""
find . -type f | while read f; do g=`md5sum $f` > $f.md5; done,calculate md5 sums for all regular files in the current directory tree
find / -mount -depth \( -type f -o -type l \) -print,find all regular files or symlinks in the entire file system
"find /myDir -name ""log*"" -ctime +7 -exec bzip2 -zv {} \;",finds all the log* files recursively in /mydir that are more than 7 days older and compresses them.
find -maxdepth 1 -type d -mtime -1,find all directories in maximum 1 level down the current directory that were modified less than 1 day ago
"find ./js/ -type f -name ""*.js"" | xargs rm -f",remove all files with '.js' extension from the 'js' directory tree
ln -s `pwd`/current/app/webroot public_html,"create a symbolc link named ""public_html"" to ""current/app/webroot"" under the current working directory"
"top -p ""$(pgrep --newest ProgramName)""",use 'top' to monitor the newest instance of programname.
"read -r -p ""$(echo $@) ? [y/N] "" YESNO","read a line from standard input into variable ""yesno"" ignoring backslash escapes and using the prompt ""$(echo $@) ? [y/n] """
dir=$(mktemp -d),"creates temporary folder in tmpdir (if defined) or in '/tmp/', and stores path to created folder in 'dir' variable."
"find /volume1/uploads -name ""*.mkv"" -exec /tmp/rename.sh \{\} \;","find all the files ending with "".mkv"" in a folder and send them as an argument to a shell script"
files=`find .`,search all the files in the current folder and assign them to a variable
su -c 'source myfile; bash',run command 'source myfile; bash' as user root
a=`w|cut -d' ' -f1`;,saves list of logged in users in system together with 'user' header in the 'a' variable.
"ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { print $0; printf ""sent:%d received:%d loss:%d%%\n"", sent, received, loss; }'","print a ping request and the number of packets sent, received, and the percentage lost for each ping request to ""google.com"""
find . -type d -name test,"search in the current folder for all the directories with the name ""test"""
find . -maxdepth 1 -type f -perm -ugo=x,"search the current directory for all regular files executable by 'user', 'group', and 'others'"
comm -3 <(sort -un f1) <(sort -un f2),"extract any line in ""f1"" or ""f2"" which does not appear in the other"
"arr=$( $line | tr "" "" ""\n"")","run command specified by $line, replace space (' ') with newline and save the output to variable 'arr'"
split -l 3400000,split standard input into files of at most 3400000 lines each
"cat infile.txt | tr -d ""[:space:]"" | fold -80","remove all white space from ""infile.txt"" and wrap each line to 80 characters"
find /proc | xargs,print all file/directory names without white space safety under the /proc directory
join <(sort aa) <(sort bb),"join lines in file ""aa"" with lines in file ""bb"" if the lines share a common first word"
shopt -s globstar,enables 'globstar' (recursive globbing) shell option.
df -P $path | tail -1 | cut -d' ' -f 1,print source of the file system containing $path.
"grep -o ""+\S\+"" in.txt | tr '\n' ','","search for the regex ""+\s\+"" in file 'in.txt' and print the matches by replacing newlines with comma (',')"
bzip2 -kv */*/*/*/*/*/*/*,verbosely compresses all files on seventh and eighth depth level keeping original files in place.
"cal | awk 'NR>2{Sfields=7-NF; if (Sfields == 0 ) {printf ""%02d\n"",$3;exit}}'",prints day of first tuesday in a month.
chown -R ${JBOSS_USER}: $JBOSS_LOG_DIR,"recursively change the owner to ""${jboss_user}"" of ""$jboss_log_dir"""
ln $file /tmp/allfiles,"create a symbolic link to ""$file"" named ""/tmp/allfiles"""
"find . -iname ""file*""","find files starting with the word ""file"" in the current directory tree, ignoring the case"
who | awk '{print $1}' | xargs -n 1 id,print user and group information of all users logged in
find . ! -local -prune -o -print,print local files without descending non-local directories
find . -iname .svn -print | xargs rm -rf,"delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename "".svn"""
ls `which gcc` -al,"print file information of the executable file of command ""gcc"""
find /usr -maxdepth 4 -name document -print,find all files/directories named 'document' in maximum 4 levels down the '/usr' directory
find . -lname '*sysdep.c',"search the current directory tree for symlinks whose contents match pattern ""*sysdep.c"""
rm **/*.pyc,recursively removes all files like '*.pyc' in a current folder.
"echo ""( `date -d $B +%s` - `date -d $A +%s`) / (24*3600)"" | bc -l",print days between date $a and $b
"find . -name ""*.cc"" -print -exec grep ""xxx"" {} \;","search the *.cc files in the current directory tree for string ""xxx"""
"find / -perm /u+rw,g+r,o+r","find all files/directories in entire file system for which owner has at least read/write permissions, or the group has at least read permission, or others have at least read permission"
w | awk '{print $1}' | xargs -I '{}' id '{}',prints user and group information for each logged in system user.
mv -f file.txt /var/lib/docker/devicemapper/mnt/$CONTAINER_ID/rootfs/root/file.txt,"move ""file.txt"" to docker container ""$container_id"" in path ""/var/lib/docker/devicemapper/mnt/$container_id/rootfs/root/file.txt"""
find $x -type d -wholename '*' ! -wholename */@eaDir* > /tmp/mediaindex/$nn.dir,display all the directories in specific path ( saved in $x ) excluding those that are present in a path and save the ouput to a file
find . -size +1M -exec mv {} files \+,"find all files in the current directory tree whose size is greater than 1mb, and move them to the ""files"" folder"
grep -o . filename | sort | uniq -c | sort -nr,"list each unique character in ""file"" prefixed by number of occurrences and sorted from most frequent to least frequent"
history -r file.txt,"append the contents of ""file.txt"" to the current in-memory history list"
"su --session-command=""${OBJECTDB_HOME}/bin/objectdb.sh start"" $JAVA_USER","run command ""${objectdb_home}/bin/objectdb.sh start"" $java_user"" as user $java_user"
find /path -perm -022,find all files under /path and below writable by `group' and `other'
find /home/weedly -name myfile -type f -print,search the /home/weedly directory tree for regular files named myfile
find . -type f -name '*.zip',find all the zip files in the current folder
find ./ -type f -exec grep https://www.ksknet.net {} \;,search a url in all regular/normal files in a folder.
cp --remove-destination $(readlink $f) $f,"change symbolic link ""$f"" into a file"
"read -p ""`echo -e 'Please Enter a Message: \n\b'`"" message","read a line from standard input into variable ""message"" with prompt ""please enter a message: "" followed by a newline"
"read -e -p ""My prompt: "" varname","read a line of standard input with prompt ""my prompt: "" and save it to variable ""varname"""
"dir_context=$(dirname -- ""$1"")",saves location of file $1 in 'dir_context' variable.
find . -name '*.py' | xargs grep some_function,search for a function in all python files in the current folder
for h in $(seq 1006 1008 | tac); do history -d $h; done,delete the commands 1006 through 1008 from history
"ssh -S ""$SSHSOCKET"" -O exit ""$USER_AT_HOST""","connect to ""$user_at_host"" using connection sharing on ""$sshsocket"" and request the master to exit"
find / -ctime -50,find files on the system created during the last 50 days
find / -type f -size +100M | xargs du -sh,show the disk use of all the regular/normal files in the file system which are bigger than 100mb
dig stackoverflow.com,make dns lookup for hostname stackoverflow.com
head -16482 < file.in | tail -259 > file.out,"write lines 16224 through 16482 of ""file.in"" to ""file.out"""
find -L -type l,find broken symlinks in current directory
rsync -nvraL test/a/ test/dest --exclude=/b/c/d,"recursively archive ""test/a/"" to ""test/dest"" excluding ""test/a/b/c/d"""
mkdir mnt point,"make directories ""mnt"" and ""point"""
"/sbin/ifconfig  | sed -ne $'/127.0.0.1/ ! { s/^[ \t]*inet[ \t]\\{1,99\\}\\(addr:\\)\\{0,1\\}\\([0-9.]*\\)[ \t\/].*$/\\2/p; }'",gets list of ip addresses of all network interfaces.
find . -type f -exec sed -i 's/foo/bar/g' {} +,replace the word foo to bar in all the regular/normal files in the current folder (does not update the file)
find data/ -print0 | tar --null -T - --create -f archive.tar,archive all files/directories under data/ into archive.tar
"alias -g X2=""| cut -d' ' -f2""","set alias ""x2"" for command ""| cut -d' ' -f2"""
"find . -type f -exec grep -l ""word"" {} +","search in all the regular/normal files of the current folder for the word ""word"" and display the matched file name"
shopt | grep login,finds shell options with 'login' in name.
ifconfig,displays status of currently active network interfaces.
find . -name ‘*ITM*’,"show all the files in the current folder which has the word ""itm"""
"mount | grep '^/dev/' | sed -E 's/([^ ]*) on ([^ ]*) .*/""\2"" is located on ""\1""/'","list the drive of each ""/dev/"" disk mount point"
cd `cat $HOME/.lastdir`,change to directory listed in file '$home/.lastdir'
find ./ -type d -name 'D',"find all directories named ""d"" in the current directory tree"
find / -type f \( -perm -4000 -o -perm -2000 \) -exec ls -l {} \;,display a long listing of all the regular/normal files in the file system which have set uid bit or set gid bit enabled.
find . -nouser -ls,find all the files in the current folder which do not belong to any user
df -P,report file systems disk usage using posix output format.
find /etc -name ppp.conf,"find files named ""ppp.conf"" in the /etc directory tree"
find /etc/nginx -name '*.conf' -exec echo {} ;,list .conf files residing in the /etc/nginx/ directory tree
find /home ! -group test,display all the files in the folder /home which do not belong to the group test
grep -E -m 1 -n 'old' file | sed 's/:.*$//' - | sed 's/$/s\/old\/new\//' - | sed -f - file,"display the entire contents of 'file', replacing only the very first instance of ""old"" with ""new""."
tar -xvzf passwd.tar.gz,"extract ""passwd.tar.gz"" with verbose output"
find . -name '*.rb' -exec grep -H jump {} \;,find which ruby files under current directory contain the string 'jump'
grep -o '1.' yourfile | head -n2,limits the number of results from grep to 2 lines
screen -d -m -L python test.py,log output of a command in screenlog.0 every 10 seconds
find /path -type f -print0 | xargs -0 rm,find all the regular/normal files in the /path folder and delete them
find /opt/lampp/htdocs -type d -exec chmod 755 {} \;,"set permissions of all directories under ""/opt/lampp/htdocs"" to 755"
find /home -xdev -samefile file1,find all hard links to file1 under /home directory
unset z,unsets environment variable 'z'.
find . -name *.gif -exec ls {} \;,list all *.gif files found in the current directory tree
alias | grep my_previous_alias,check the previous alias in current list
find $HOME -iname '*.ogg' ! -size +20M,find all *.ogg (case insensitive) files/directories under your home directory that are not greater than 20mb in size
"find . -name '*.js' -not \( -path ""./dir1"" -o -path ""./dir2/*"" \)",find all js files which path neither ./dir1 nor ./dir2
"xmllint example.xml --xpath ""/config/*/@*"" | sed ""s| key|\nkey|g"" | nl","parse xml file ""example.xml"" and extract and number all ""key"" tags from the ""config"" section"
"find `pwd` -perm 111 -type f | sort -r | xargs -n1 -I{} sh -c ""dirname {};basename {}"" | awk '/^\// {dir=$0 ; if (dir != lastdir) {print;lastdir=dir}} !/^\// {print}'",list every directory under current directory with their child executable files
"find ./ -name ""*.sqlite"" -ls",list all the sqlite files in the current folder
"find / -group users -iname ""Dateiname""","find all the files in the file system which belong to the groep ""users"" and with the name ""dateiname"""
find -name file -print0,find all files/directories named 'file' and print them with null character as the delimiter instead of newline
find . -name something -print -quit,find the first file/directory named 'something' under current directory and quit
find / -name filename -exec  nano '{}' \;,find all files that names are filename and open in nano text editor
cat file.txt | perl -ne 's/foo/bar/g;' | less,"display 'file.txt' all occurrences of ""foo"" replaced by ""bar"", letting the user interactively page through the result."
tr -s ' ' < file | cut -d' ' -f4,"print 4th white space separated field in file ""file"""
mv new old -b -S .old,"rename ""new"" to ""old"" and backup to ""old.old"" if ""old"" exists"
a=$( df -H ),print file system disk space usage with sizes in powers of 1000
find /path/to/dir ! -perm 644,find all files under directory tree /path/to/dir whose permissions are not 644
"grep -r ""string here"" * | tee >(wc -l)","recursively search for ""string here"" and write the output to the console followed by the number of matched lines"
"ps aux | grep 'python csp_build.py' | head -1 | tr -s ' ' | cut -d "" "" -f2 | xargs kill","kill process named ""python csp_build.py""."
"find . -type f -name ""*.txt"" -exec cat {} \;> all.txt",display the contents of all the text files in the current folder and save the output to all.txt.
find . -name '*.php' | xargs wc -l | sort -r,counts lines in each of *.php files in current folder with subfolders and prints total count as well.
find test -type d -regex '.*/course[0-9.]*',find all directories under 'test' directory tree that match the regex '.*/course[0-9.]*' in their paths
find . -size +1M -ok mv {} files \+,"find all files in the current directory tree whose size is greater than 1mb, and move them to the ""files"" folder with confirmation"
yum -h,prints help on 'yum' utility.
find var/ -type f -exec chmod 600 {} \;,find all files under var/ directory and change their permission to 600
tar czf - www|split -b 1073741824 - www-backup.tar.,"create a compressed archive from ""www"" and split the contents into files of at most 1073741824 bytes and use prefix ""www-backup.tar."""
"find . -name ""*FooBar*"" -exec sh -c 'cp -- ""$@"" ~/foo/bar' sh {} +",find all *foobar* files/directories under current directory and copy them to ~/foo/bar
"find /path/to/directory/* -maxdepth 0 -type d -printf ""%P\n"" -exec sudo tar -zcpvf {}.tar.gz {} \;","archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension"
find . -name '*foo*' ! -name '*.bar' -type d -print,"search for directories that contain the phrase ""foo"" but do not end in "".bar"""
"find ""$PWD"" -type d",search the current directory tree for directories
"set | awk -F ""="" '{print $1}' | grep "".*X.*""","list environment variables whose name matches "".*x.*"""
"df -h $path | cut -f 1 -d "" "" | tail -1",print name of the file system containing $path.
du -ks * | sort -n -r,prints kb size of all top-level files and folders in a current folder in descending order.
find . -name f* -print,find files in the current directory and its sub-directories that begin with 'f'.
ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}',gets ip addresses of all active network interfaces.
echo $modules | column -t | fold | column -t,"print variable ""$module"" in formatted columns with at most 80 characters per line"
"node -pe 'JSON.parse(process.argv[1]).foo' ""$(cat foobar.json)""","run the node expression ""json.parse(process.argv[1]).foo"" on the contents of ""foobar.json"""
"find . -type f -exec grep -n ""stuff"" {} \; -print","search the regular files of the current directory tree for string ""stuff"""
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4","find all files under current directory with their size and paths, reverse sort them numerically, then print first 4 entries"
"find . -name ""*.VER""",search the current directory tree for .ver files
find / -perm +4000,find suid files
find / -name autoload.php,find all files on the system whose names are 'autoload.php'
"find /tmp -name ""*.tmp""| xargs rm",find all .tmp files under and below the /tmp/ directory and remove them
tail -n +2 file.txt | split -l 20 - split_,"split ""file.txt"" excluding the first line into files with at most 20 lines each and a prefix ""split_"""
"find . -type f -size +10 -name ""*.err""",find all *.err files under current directory that are larger than 5120 bytes in size
cat myfiles_split.tgz_* | tar xz,extract all gzip-compressed files from tar archives beginning with 'myfiles_split.tgz_*'
file * | grep ASCII,"list all files in current directory whose name or file type description contains the word ""ascii""."
find /mydir \(-mtime +20 -o -atime +40\) -exec ls -l {} \;,show a listing of files not modified in over 20 days or not accessed in over 40 days
getent group | cut -d: -f1,print all group names known to the system.
"DC=`hostname | cut -b1,2`","save the first two letters of the system host name to variable ""dc"""
"ssh example.com ""ps -elfc; ls""","run ""ps -elfc"" followed by ""ls"" on host ""example.com"""
"tar cf - $PWD|tar tvf -|awk '{print $6}'|grep -v ""/$""",create and list filenames in the archive
"sed '/start/,+4d'","delete the line containing ""start"" plus the next 4 lines from standard input"
dirname `find / -name ssh | grep bin`,finds all folders that contain 'ssh' file and have 'bin' in path.
unalias sudo,removes alias with 'sudo' name.
make || exit $?,"if first command fails, exits from script with exit code of failed command."
"read -p ""Are you alright? (y/n) "" RESP","read a line from standard input with prompt ""are you alright? (y/n) "" and save the response to variable ""resp"""
rsync -chavzP --stats user@remote.host:/path/to/copy /path/to/local/storage,"archive ""/path/to/copy"" on host ""remote.host"" as user ""user"" to ""/path/to/local/storage"" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission"
alias foo=$'echo A \'*\' is born at $(date),"set alias ""foo"" for command ""$'echo a \'*\' is born at $(date)'"""
find . -name '*.py' -print0 | xargs -0 grep 'something' > output.txt,search for a pattern in all the python files in the current folder. and save the output to output.txt file. print0 is used to handle files with newlines in their names
"find . -name ""*.txt"" | parallel -Xj1 --tty vim",find all .txt files in the current directory tree and edit them with `vim'
who -b,print the time of last boot
sudo chown root:dockerroot /var/run/docker.sock,"change owner to ""root"" and group to ""dockerroot"" of ""/var/run/docker.sock"""
find pathfolder -maxdepth 1 -type f -not -path '*/\.*' | wc -l,"find all the normal/regular files in the folder ""pathfolder"" excluding all hidden files and display the count"
ps -u `whoami` | grep largecalculation,"search for ""largecalculation"" in all processes owned by the current user"
find /full/path/dir -name '*.txt' -exec /bin/rm {} \;,remove all .txt files from the /full/path/dir directory tree
"echo ""This is   a sentence."" | tr -s "" "" ""\012""","print ""this is a sentence."" by replacing all consecutive space characters with a single newline character"
/sbin/ifconfig $(netstat -nr | tail -1 | awk '{print $NF}') | awk -F: '/inet /{print $2}' | cut -f1 -d ' ',gets ip address of a primary network interface.
find / -name myfile -type f -print,find all regular files on the system whose names are 'myfile'
"proc_load_average=$(w | head -1 | cut -d"" "" -f13 | cut -d"","" -f1-2 | tr ',' '.')",stores system load average number in the 'proc_load_average' variable.
find -L /target ! -type l,display all the soft links in a  folder which are not broken
find . -name '*.html' -print0 | xargs -0 perl -pi -e 's/oldstring/newstring/g',find all the html files in current folder and replace old string with new string
"alias unix=""date +%s""","set alias ""unix"" for command ""date +%s"""
find dir1 ! -type d |xargs wc -c |tail -1,get the total size of all files under dir1 directory
"architecture=""$(uname -m)""","set variable ""architecture"" to machine architecture, ie. x86_64"
find . -type f -ls | sort +7 | head -1,list (in long list format with inode number) the file under the current directory that has the oldest modification time
"find $dir -type f -size +""$size""M -printf '%s %p\n' | sort -rn",find all regular files under $dir directory tree that are bigger than $size mb in size and print them along with their sizes in decreasing order of size
tree /,display the entire file system in a tree-like format
"git symbolic-ref HEAD 2>/dev/null | cut -d""/"" -f 3",print git branch currently checked out in a working directory.
find / -name core -exec rm -f {} \;,find all the core files in the entire file system and  delete them
find $DBA/$ORACLE_SID/bdump/*.trc -mtime +7,"display all the trace files ("".trc"") from the folder $dba/$oracle_sid/bdump/ which have not been accessed in the last 7*24 hours"
line=$(who | cut -d' ' -f1 | sort -u),"save a unique list of the currently logged in usernames to variable ""line"""
"local=$(hostname -I | awk '{print $2}' | cut -f1,2,3 -d""."")","save the first three octets of the current host's ip address to variable ""local"""
find . -type f -print0 | xargs -0 cat > out.txt,display the contents of all the regular files in the current folder and save the output to out.txt
"find ""$STORAGEFOLDER"" -name .todo  -exec dirname {} \;",find all files/directories named '.todo' under $storagefolder directory tree and print the parent directory names
readlink -f YOUR_PATH,"print absolute path of ""your_path"""
uname -srvm,"display current system's kernel name, kernel release and version, and machine architecture"
"paste <(uniq -f3 file | cut -f1,2) <(tac file | uniq -f3 | tac | cut -f3-)","join lines of 'file': fields 1 and 2 of lines discarding adjascent lines ignoring first 3 fields, with fields 3 to end of line discarding adjascent lines ignoring 3 last fields."
chown nginx:nginx /your/directory/to/fuel/ -R,"recursively change the owner and group of all files in ""/your/directory/to/fuel/"" to ""nginx"""
crontab -l | sed -re '/# *change-enabled *$/s/^([^ ]+) [^ ]+/\1 7/' | crontab -,"for every cron job with a comment ""change-enabled"" at the end of its crontab entry, change the scheduled hour to 7."
find /myfiles -atime +30,find all files/directories under /myfiles that were accessed more than 30 days ago
"find ""${backuppath}"" -mtime -10 > file.list",search the directory given as variable $backuppath recursively for files that were last modified less than 10 days ago and save the list of them to file.list
"mpv --no-audio \`ls ~/Down/other/*.{mp4,flv} --color=never\`",runs 'mpv' command for each *.mpv and *.flv file in a current folder.
find . -type f -name file_name,"search the current directory tree for a regular file named ""file_name"""
find . -type f -links 1 -print,find all symbolic links under current directory that are not hard links
find / -name “*.jpg”,look for *.jpg files on the system
"cp ""${FILE}"" ""COLLECT/$(mktemp job_XXXXXXXXX)""",copies ${file} to collect folder with unique name formatted like 'job_xxxxxxxxx'.
$(dirname $0),prints directory where the executing script ($0) is located.
"env | sed -n /""$USERNAME""/p",list all environment variables whose name or value contains current user's login name.
"find /home/backups -printf ""%T@ %p\n"" | sort -n | head -1 | cut -d"" "" -f2- | xargs ls -al",display a long listing of the oldest file under '/hom/backups' directory tree
find ./ -size +5M -type f | xargs -r ls -Ssh,find all files in the current directory tree with size bigger than 5 mb and sort them by size
find . -empty -exec rm '{}' \;,delete all empty files in the current directory ( empty file = size 0 bytes )
watch -n 1 --color 'python -m unittest discover 2>&1 | pyrg',execute 'python -m unittest discover 2>&1 | pyrg' every second and display with color support
find . -perm 755 -exec chmod 644 {} \;,change permissions to 644 of multiple files with permissions 755
find ~ -name 'arrow*.xbm',"display all the files in the home folder which begin with ""arrow"" and end with ""xbm"""
pwd -P,print the current working directory with resolved symbolic links
diff <(ssh server1 'rpm -qa | sort') <(ssh server2 'rpm -qa | sort'),"check if ""server1"" and ""server2"" have the same list of rpms installed"
find /path ! -perm /022,find files/directories that does not have write permssion for group and others
find . -mtime +30 -a -mtime -7 -print0,display all the files in the current folder that are at least one week old (7 days) but less then 30 days old
"ping -n 1 %ip% | find ""TTL""",error - this is for dos
cat -v /dev/urandom,"print flow of random data, showing all non-printing characters"
who --ips /var/log/wtmp | grep '^msw.*127.0.0.1',"use ""/var/log/wtmp"" and print ips and search for ""^msw.*127.0.0.1"""
"find ~/container  -mindepth 3 -type f  -execdir mv ""{}"" $(dirname ""{}"")/.. \;",find all regular files starting from level 3 of directory tree ~/container and move them one level up
"screen -L bash -c '(while :; do tail ~/screenlog.0 | grep -o ""[0-9]*%"" | tail -1; done | zenity --progress --auto-close &); 7z a ""output.zip"" ""/path/to/input""'",backup a directory with a zenity progress bar
find -not -user www-data,find all files that aren't owned by user www-data
find /home/mywebsite -type f -ctime -7,"display all the files in the folder ""/home/mywebsite"" which have been changed in the last 7*24 horus"
find /path/to/directory -type d \! -name . -prune -exec printf x \; | wc -c,display the count of all directories in a folder excluding hidden files
"filename=""$(uname -a)$(date)""",save system information appended with the current date in 'filename' variable
"md5sum filename |cut -f 1 -d "" ""","calculate the md5 sum of the file ""filename"" and print only the hash"
$ join -j 2 -o 1.1 1.2 2.1 <(sort 1) <(sort -k2 2),"for each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file."
ln -s /lib/libc.so.6 /lib/libc.so.0,"create a symbolic link named ""/lib/libc.so.0"" to ""/lib/libc.so.6"""
"grep --include=""*.xxx"" -nRHI ""my Text to grep"" *","recursively from current folder searches only files that names match "".*xxx"" pattern, ignores binary files and prints file name before every string that contains ""my text to grep""."
find . -name Makefile -print0 | xargs -0 grep -nH $ | grep :235:,find all makefile's in the current directory tree and look for line 235 in each of them
find $HOME/. -name *.txt -ok rm {} \;,remove all *.txt files in the home directory tree with confirmation
find . -type f -exec grep -il mail,find all the normal/regular files in the current directory and search for the word mail and display the file names
"filename=""$(uname -n)-$(date +%F).txt""","save the network node hostname append with '-', the current date and '.txt' into variable 'filename'"
"gzip -cd path/to/test/file.gz | awk 'BEGIN{global=1}/my regex/{count+=1;print $0 >""part""global"".txt"";if (count==1000000){count=0;global+=1}}'","unzip ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" to files with a 1000000 limit"
cat $i | wc -l,counts all lines in $i file.
find original -type f -exec ln -s {} new/{} \;,"create a symbolic link in directory ""new"" for each file in ""original"" directory tree"
ping -c 1 127.0.0.1 #ping your adress once,send one ping request to local machine.
find /usr/local/etc/rc.d -type f | awk -F/ '{print $NF}',print a listing of the /usr/local/etc/rc.d directory tree
find . -type f -name \* | grep tgt/etc/file1 tgt/etc/file2 tgt/etc/file3,"search for the pattern ""tgt/etc/file1"" in the files tgt/etc/file2, tgt/etc/file3"
"tmux attach -t ""$(echo stuff)""",dynamically defines tmux session name to attach to.
env | grep ^PATH,"list all environment variables whose name starts with path, showing the name and value of each one."
find /home -user joe,find every file under the directory /home owned by the user joe.
cd `find . -name file.xml -printf %h`,"find ""file.xml"" under the current directory and change directory to its parent"
"find . -type f -name ""*html"" | xargs tar cvf htmlfiles.tar -",archive all *html files using tar.
find . -type f -size -1M -exec rm {} +,remove files that are less than 1mb in size under current directory
"find -maxdepth 1 -name '*.sql' -exec cat '{}' \; | sed -e 's/ , );/1,1);/g' | mysql -D ootp","find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command"
gv=$(echo -e $kf'\n'$mp | sort -t'.' -g | tail -n 1),"save the numerically greater value of ""$kf"" and ""$mp"" into variable ""gv"""
shred -u $FILE,"overwrites file $file with random content, then truncates and deletes it."
"find . -name ""*"" -exec sh -c 'chgrp -v new_group ""$0"" ; chmod -v 770 ""$0""' {} \;","change the group to ""new_group"" and permissions to 770 for all the files in the current folder, $0 is the input to the sub shell i.e, the name of the file"
"gzip -dc input1.vcf.gz input2.vcf.gz | awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }'","use awk command 'fnr==nr { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }' on compressed files ""input1.vcf.gz"" and ""input2.vcf.gz"""
find . -name ‘*.x’ -print0 | xargs -0 grep fred,"search *.x files from the current directory tree for string ""fred"""
echo $line | cut -c2- | md5sum,discard the first letter from every line in $line and calculate the md5 sum of the remaining
mkdir destdir,"make directory ""destdir"""
"find $HOME -name ""*.conf"" -exec sed -i 's/vermin/pony/g' {} \;",find all configration files in home directory & subtitute permanently in files
"mount /mnt/mountpoint -oremount,ro","remount ""/mnt/mountpoint"" as read only"
"FOO_NO_WHITESPACE=""$(echo -e ""${FOO}"" | tr -d '[[:space:]]')""",interpret backslash sequences and delete whitespace characters in variable $foo and save the result to variable 'foo_no_whitespace'
find . -type f -printf '%P\n' > outputfile,find all files under current directory and write the paths without the leading ./ in the file outputfile
sudo chmod +rx $(which node),"add read and execute permission to command ""node"""
find xargstest/ -name 'file??' | sort,find recursively all files matching pattern 'file??' in the xargstest/ directory and print a sorted list of them
uniq,"print standard input to standard output line by line, discarding any adjascent duplicate lines."
"echo ""0a.00.1 usb controller some text device 4dc9"" | rev | cut -b1-4 | rev",keep the last 4 ascii characters (bytes) of a string.
find $directory -type -f -execdir zip -j $ZipFileName {}\;,create a zip file of all the files in some directory
"find /the/path -depth -name ""*.abc"" -exec sh -c 'mv ""$1"" ""${1%.abc}.edefg""' _ {} \;","change the extension of all the "".abc"" files in the folder ""/the/path"" to "".edefg"" and do not change in the sub directories"
"find -regex ""$rx""",display all files in current folder using regular expression
find . -depth -print | cpio -o -O /target/directory,copy a comlex directory tree from one machine o another while preserving copy permissions and ownership
your_command | less,"run ""your_command"", letting the user page through the output and move around with the arrow keys - the q key terminates and returns to the shell prompt."
find /opt -mtime 20,find all the files in the folder /opt which have been modified exactly 20 days ago
ps -p 24297 -o comm --no-heading,get a path name of a process id
cat -e yourFile | less,"page through the contents of yourfile, adding a $ at the end of each line."
echo 123 | tee >(tr 1 a)  | tr 1 b,"print string ""123"" once with '1' replaced by 'a' and second time replaced by 'b'"
"find . -type f -name ""*.class"" -exec rm -vf {} \;","find recursively all files in the ""."" directory tree whose names end with "".class"" and delete them"
mkdir ~/log,"make directory ""~/log"""
set script_dir = `pwd`/`dirname $0`,"creates path as current folder path and folder that contains $0 file, and saves result in 'script_dir' variable."
"find . -iname ""*.mov"" -printf ""%p %f\n"" | xargs -l bash -c 'echo ffmpeg -i $0 -f flv $1' | xargs",find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file
find /home -type f -exec file {} \;,show file type information for all regular files under '/home' directory tree
mysqldump --all-databases | ssh user@yourserver.com mysql,"dump all mysql databases over an ssh tunnel to ""user@yoursever.com"" and use it as input to mysql"
cat text.txt | tr -s ' ' | cut -d ' ' -f4,print fourth column of data from text file text.txt where columns separated by one or more whitespaces.
cat /tmp/nums | addnums,"print the contents of ""/tmp/nums"" as input to ""addnums"""
"find . -name ""*.txt"" | xargs grep -i ""text_pattern""","recursively finds all *.txt files and prints strings with ""text_pattern"" ignoring text distincts."
find b -type f -cmin -5 -exec cp '{}' c \;,find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c
"find -maxdepth 0 -name ""*.sh""  -exec ./lastline.sh {} \;",execute shell script with find comamnd
find . -iname '*.pdf' -exec pdfgrep -i keyword {} +,"search all pdfs from the current directory tree for ""keyword"", ignoring the case"
"find my_folder -type f -exec grep -l ""needle text"" {} \; -exec file {} \; | grep text","search my_folder recursively for text files containing ""needle text"""
command $(zcat input1.txt.gz) $(zcat input2.txt),"use the contents of compressed files ""input1.txt.gz"" and ""input2.txt"" as arguments to ""command"""
diff <(ls /bin) <(ls /usr/bin),"compare the contents of ""/bin"" and ""/usr/bin"" line by line"
find $ARCH1 -ls,list all files under and below the directory given as variable $arch1
rm -f *.bak *~,forcibly removes all files like '*.bak' and '*~'
yum --enablerepo=remi install php-mbstring,"installs 'php-mbstring' package, enabling 'remi' repository."
"find . -name ""*.txt"" -type f -daystart -mtime +0 -mtime -2",find all the text files that have modified in the last 2 days and not modified today
find . -type f -print0 | xargs -0 grep -il '^Subject:.*unique subject',list the files from the current directory tree that contain lines matching regular expression  '^subject:.*unique subject'
find . -perm -20 -print | xargs chmod g-w,find files with group write permission and remove the permission
find . -size +10k -exec ls -ls {} \+ | sort -n | tail -1,search for all the files in the current folder which are bigger than 10kb and display them biggest file
diff <(curl -s http://tldp.org/LDP/abs/html/) <(curl -s http://www.redhat.com/mirrors/LDP/LDP/abs/html/),"find a difference between website content of ""http://tldp.org/ldp/abs/html/"" and ""http://www.redhat.com/mirrors/ldp/ldp/abs/html/"""
"grep -v '^$' | paste -s -d"","" -",merge each non-blank line of standard input into a single comma separated line
find $HOME -maxdepth 1 -type f -name '.*' -print0,print a null-separated list of all hidden regular files from the home directory
screen -r foo,reattach to a named screen session
find /data/SpoolIn -name job.history | xargs grep -l FAIL | wc -l,count the number of files named 'job.history' under '/data/spoolin' directory tree that match 'fail' in their contents
ssh -fNT -L4431:www1:443 -L4432:www2:443 colocatedserver,"set up local port forwards in the background with no terminal or command execution from port 4431 to host ""www1"" port 443 and port 4432 to host ""www2"" port 443 via the host ""colocatedserver"""
true | xargs false,executes 'true'. then makes 'xargs' fail executing 'false' and return 123 exit code.
"head -c 10 ""$0"" | tr '\000-\377' '#'",read 10 bytes from $0 and print them by replacing the set '\000-\377' with '#'
find ~ -type f -mmin -90 | xargs ls -l,list all regular files in and below the home directory that have been modified in the last 90 minutes
shopt -o extglob,shows state of 'extglob' shell option.
find .  -size -10c -print,search in current directory downwards all files whose size is less then 10 bytes
"find / -user edwarda -exec chgrp pubs ""{}"" \;",change the group of all the files which belong to the user edwarda to pubs
date '+%Y' --date='222 days ago',print what year it was 222 days ago
"find PDFs/ -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep -C 2 -i --with-filename --label=""{}"" --color ""perry sound""' \;","search the *.pdf files from directory tree pdfs/ for text ""perry sound"", ignoring the case"
sort -o file1.txt file1.txt,"sort ""file1.txt"" and output the result to ""file1.txt"""
find . \( ! -regex '.*/\..*' \) | sed 's/^..//',find all files and directories starting from the current directory and excluding hidden files and directories
sort -n,numerically sort each line of standard input
"cal 02 2012|perl -lnE'$.==1||eof||do{$,=""\t&"";$\=""\t\\\\\n"";$l=$_;print map{substr($l,$_*3,3)}(1..5)}'",convert unix `cal` output to latex table code.
"find . -maxdepth 1 -type d | while read -r dir; do printf ""%s:\t"" ""$dir""; find ""$dir"" -type f | wc -l; done",list of directory & count of file in every directory
rsync -a myfile /foo/bar/,"archive ""myfile"" to ""/foo/bar/"" and create directory ""/foo/bar/"" if ""/foo/"" exists"
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs    -0 -p /bin/rm",find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety
directories=$(diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq),finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and saves location of such files to 'directories' variable.
find . -name '*.png' | grep -f <(sed 's?.*?/[0-9]_[0-9]_[0-9]_&_?' search.txt),"find all the png files in current folder which are present in the pattern list file ""search.txt"""
"find . -type f -print | xargs grep -ni ""STRING""","find string ""string"" in files residing in the current directory tree, case insensitive"
"find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' + | mysql -D ootp","find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command"
ping -c 4 www.stackoverflow.com | awk -F '/' 'END {print $5}',"print the average time of 4 ping requests to ""www.stackoverflow.com"""
find / -perm +6000 -type f,find regular files that have suid or sgid set
find . -type f ! -size 0 -exec ls -l '{}' \;,print ls output for all non-empty files under under current directory
some_command | less -p regex,page through the output of 'some_command' positioning the view at the first occurrence of regular expression 'regex'.
"git branch | grep ""*"" | cut -d ' ' -f 2",print git branch currently checked out in a working directory.
tar cz my_large_file_1 my_large_file_2 | split -b 1024MiB - myfiles_split.tgz_,"create compressed archive from ""my_large_file_1"" and ""my_large_file_2"" and split into files of size 1024 mib with prefix ""myfiles_split.tgz_"""
find . -perm -111 -type f | sort -r,find all executable files under current directory and reverse sort them
"echo "" ${arr[@]/%/$'\n'}"" | column","format bash array ""${arr}"" in columns"
find . -maxdepth 1 -cmin +60 -name file,find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago
find . \( -name .snapshot -prune -o -name '*.foo' \) -print,"display all the files ending with "".foo"" including those that are in the directory "".snapshot"", this is the wrong way of using prune."
sudo chown -R $USER /usr/local/lib/node_modules,"recursively change the owner of all files in ""/usr/local/lib/node_modules"" to the current user"
"find . -name ""*bash*""",search the current directory tree for *bash* files
"find . | awk '{printf ""%s "", $0}'",search for all the files in current folder and display all the file names separated by space
"find ! -path ""dir1"" ! -path ""dir2"" -type f",list all regular files which path is not dir1 or dir2
"echo ""error"" | tee -a log 1>&2","write ""error"" to both the log file ""log"" and standard error"
ls -tp | grep -v '/$' | tail -n +6 | xargs -I {} rm -- {},removes all files but 5 newest ones from current folder.
diff <(./a) <(./b),"display differences between output of two programs, 'a' and 'b', residing in the current working directory."
"find . -name ""*.java"" -exec wc -l {} \;",count the number of lines in each .java file in the current directory tree
find . -type f -name '*.ini',"display all files ending with ""ini"" in current folder"
find . -inum NUM,search for all files with same inode num
"find . -name ""*.txt"" | xargs -I{} sh -c 'base=$(basename $1) ; name=${base%.*} ; ext=${base##*.} ; mv ""$1"" ""foo/${name}.bar.${ext}""' -- {}",find all the text files in current folder and change the extension of these files and move them to another folder
kill -9 16085,"send sigkill signal to process id 16085, killing it instantly."
find . \( -path './dir1/*' -and -not -path './dir1/subdir1*' -or -path './dir2' \) -prune -or -type f -print,find all regular files under current directory tree without descending into './dir1' (except './dir1/subdir1*' pattern) and './dir2' directories
curl --socks5 125.119.175.48:8909 http://example.com/,"download contents from ""http://example.com/"" using a socks5 proxy ""125.119.175.48:8909"""
"find . -type f \( -name ""*.txt"" -o -name ""*.json"" \)",find all *.txt and *.json files
strace -o /tmp/output.txt ln -s -f .bash_aliases test,"list all system calls during process of symbolic link creation process on  ""/tmp/output.txt"" file"
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" -type d | wc -l); let n--; if [ $n -gt 0 ]; then printf ""%4d : %s\n"" $n ""$dir""; fi; done",find list of directories  with non-zero sub-folder count:
find . -name *disc*,"find all files and directories containing ""disc"" in their names"
find . -mtime -2,display all the files in the current folder which have been modified in the last 2 days
find /usr -type d -name backup -print,search directories called ' backup ' from /usr directory downwards and print them.
"paste -sd """" file.txt","remove newline characters from ""file.txt"""
find foo -type f ! -name '*Music*' -exec cp {} bar \;,copy all files under director 'foo' whose name doesn't contain 'music' to directory 'bar'.
"cd ""$(dirname $(which oracle))""","change directory to the directory containing the ""oracle"" executable"
pwd | grep -o '[^/]*$',print the base name via grep of the current working directory
"grep -r ""searched-string"" .","finds strings with text ""searched-string"" recursively in all files of current folder."
"alias subs=""du -sch `find ./ -maxdepth 1 -type d`""","create alias subs for command  ""du -sch `find ./ -maxdepth 1 -type d`"""
cal 4 2009 | tr ' ' '\n' | grep -v ^$ | tail -n 1,"print last day of april, 2009"
find debian/fglrx/ -name 'fglrx-libglx*',find all fglrx-libglx* files under and below debian/fglrx/
tree -L 2,list files and directories one level deep in the current directory tree
"find . -regextype sed -regex ""./test[0-9]\{2\}.txt""",find all files/directories under current directory tree whose names start with 'test' followed by two digits and end with '.txt' extension
"ln -r -s ""$orig_dest"" ""$dest_dir/$orig_name""","create a symbolic link relative to link location named ""$dest_dir/$orig_name"" to ""$orig_dest"""
find -iname '.#*',find all files matching pattern '.#*' in the current directory tree
find <dir> -mtime +7,find all the files in some directory which have not been modified in the last 7*24 hours
find . -name '*2011*' -print0 > /tmp/allfiles,"save the list of files in the current directory tree whose names contain ""2011"" to /tmp/allfiles"
find /tmp -type d -empty,find all empty directories under /tmp
diff -U 0 file1 file2 | grep -v ^@ | wc -l,"count the number of differing lines in ""file1"" and ""file2"" with 0 lines of unified context"
find /home/username/public_html/sites/all/themes -type f -exec chmod 640 {} +,find all files under /home/username/public_html/sites/all/themes and set their permission to 640
"zcat a.csv.gz | gawk '$2>5' FPAT='[^""|]+'","unzip ""file.gz"" and print each line with the 2nd | separated field greater than 5"
"ping www.google.fr | while read pong; do echo ""$(date): $pong""; done",prepends date to ping output
$(dirname $(readlink -f $BASH_SOURCE)),"follows symbolic link $bash_source, and prints path to its target."
"find /etc -name ""*.txt"" | xargs -I {} ls -l {}",list all *.txt files/directories under /etc
diff -qr /tmp/dir1/ /tmp/dir2/,"print which files differ in ""/tmp/dir1"" and ""/tmp/dir2"" recursively"
cat f.html | grep -o \,receive pattern to search for on the standard input and print only matching part of lines from file 'f.html'
diff PATH1/ PATH2/ -rq -X file1,"print which files differ in ""path1/"" and ""path2/"" recursively excluding any files that match any pattern in ""file1"""
find $INPUT_LOCATION -name '*.pdf.marker' -exec bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION \;,move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}
find /path ! -perm /020,find files/directories that does not have write permssion for group
shopt -u compat31,disables shell option 'compat31'.
me=$(whoami),"save the user name of the current user to variable ""me"""
grep -o . file | sort | uniq -c,"list each unique character in ""file"" prefixed by number of occurrences"
ls | split -l 500 - outputXYZ.,"split the output of ""ls"" into files of at most 500 lines each with prefix ""outputxyz."""
"find . -wholename './src/emacs' -prune , -print","start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found"
groups $USERNAME | cut -d\  -f 1,gives the primary group of $username.
find / -perm -u+s,find all files with the suid bit set
find dir -type f -exec sed -i 's/ *$//' '{}' ';',remove trailing white spaces from all files under dir directory
find /var/log/remote/ -daystart -mtime +14 -type f -exec rm {} \;,remove all regular files under '/var/log/remote' directory tree that have not been modified in the last 14 days where day count starts from today
"find . ! -path ""*/test/*"" -type f -name ""*.js"" ! -name ""*-min-*"" ! -name ""*console*""",find the regular js files which path does not contains '*/test/*'  and name does not contains '*-min-*' or '*console*'
find . -size +1000M,find all the files in the current directory which are bigger than 1000mb
"find /mnt/msdos  -name ""*.txt"" 2> /dev/null",find all *.txt files in directory tree /mnt/msdos suppressing error messages
find . -type f | xargs cat | wordfrequency | grep yourword,find all files under current directory and pipe their contents to the wordfrequency command and then search for 'yourword' in the output
"find . -name ""*.java"" | xargs grep ""Stock""  find . -name ""*.java"" | xargs grep ""Stock""  find . -name ""*.java"" | xargs grep ""Stock""  find . -name ""*.java"" | xargs grep ""Stock""  find . -name ""*.java"" | xargs grep ""Stock""   find . -name ""*.java"" | xargs grep ""Stock",search for a word in all the java files in the current directory
du -sb,display total apparent size of a file
"find teste2 -type f -iname ""$srchfor""|wc -l",count the number of regular files with case insensitive name pattern $srchfor under 'teste2' directory tree
shift $(($#-1)),"shifts all positional arguments but last one, keeping it in $1 variable."
"date_222days_before_TodayDay=$(date --date=""222 days ago"" +""%d"")",save the date 222 days before today to the variable 'date_222days_before_todayday'
"find /home/family/Music -name '*.m4a' -exec sh -c 'ffmpeg -i ""$0"" -acodec libvorbis -aq 6 -vn -ac 2 ""${0%.m4a}.ogg""' '{}' \;",find all *.m4a files under /home/family/music directory and convert them to ogg
find . -type f -name $x,search the current directory tree for regular files whose names match pattern $x
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | cut -d ' ' -f 2","find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries"
find /proc -exec ls '{}' \;,find all files/directories under /proc and run ls command on each.
ln -nsf dir2 mylink,"force create a symbolic link without dereferencing named ""mylink"" to ""dir2"""
find . -mtime -1 -type f,find files changed in the last 1 day
comm file1 file2,"print lines unique and common to sorted files ""file1"" and  ""file2"""
env | grep '^GOROOT',list all environment variables (name and value) whose name starts with goroot
find . -type f -perm 777,display all the regular files in the current folder which have the permission 777
find . -type f -execdir /usr/bin/grep -iH '#!/bin/ksh' {} \; | tee /tmp/allfiles,"find files containing string ""#!/bin/ksh"" and append their names and matching strings to /tmp/allfiles"
echo $(basename $(dirname $pathname)),"strips last section from the path $pathname, and prints basename of the rest part."
cd,change directory to the user's home directory
"for filename in *.jpg; do mv ""$filename"" ""prefix_$filename""; done;","add prefix ""prefix_"" to all "".jpg"" files in the current directory"
"find ./ -type f -exec bash -c 'mv ""$1"" ""$(echo ""$1"" | sed -re '\''s/^([^-]*)-\s*([^\.]*)/\L\1\E-\2/'\'' -e '\''s/ /_/g'\'' -e '\''s/_-/-/g'\'')""' - {} \;","rename all files under current directory by formatting the filenames with the sed scripts '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'', '\''s/ /_/g'\'' and '\''s/_-/-/g'\''"
"find . -maxdepth 1 -type d -exec ls -ld ""{}"" \;",list subdirectories in the current directory
find /usr -group staff,find all files in the /usr directory tree that are owned by group `staff'
"echo ""hey hey, we're the monkees"" | tee /dev/tty | gzip --stdout > my_log.gz","write ""hey hey, we're the monkees"" to standard output and as input to to ""gzip --stdout"" saved to ""my_log.gz"""
find . -size -50k,search the current directory tree for files that are less than 50kb
"bgxjobs="" $(jobs -pr | tr '\n' ' ')""",save a space separated list of process ids of currently running jobs to variable 'bgxjobs'
find . -maxdepth 1 -name '*Music*' -prune -o -print0 | xargs -0 -i cp {} dest/,find all top-level files in the current folder but ones with name like '*music*' to the 'dest/' folder.
"find . -name ""*.swp""-exec rm -rf {} \;",remove all *.swp files/directories under current directory
ssh -R 10022:localhost:22 device@server,"set up a remote port forward from port 10022 on host ""server"" to port 22 on localhost"
rev file.txt | cut -d ' ' -f1 | rev,display the last space-separated field of each line in file.txt
find . -maxdepth 1 -cmin +60 -name file >/tmp.$$,find all files named 'file' in 1 level down the current directory whose status were changed more than 1 hour ago and redirect the ouput to /tmp.$$
find  / -iname findcommandexamples.txt,find all files/directories named 'findcommandexamples.txt' (case insensitive) in the entire filesystem
"find -maxdepth 1 -type d -exec sh -c ""cd {} && [ -d test ] && [ -d live ] && rm -rvf test "" {} \;",delete all the 'test' directories from all directories under maximum 1 level down the current directory that contain directories named 'test' and 'live'
find . -type f -iname ‘HSTD*’ -daystart -mtime 1 -exec cp {} /path/to new/dir/ \;,search for the regulars file starting with hstd which have been modified yesterday from day start and copy them to /path/tonew/dir
comm -12 <(sort < a) <(sort < b),"print common lines in file ""a"" and ""b"""
cat a.txt | grep / | sed 's|/[^/]*$||' | sort -u | xargs -d $'\n' mkdir -p,"make directories and parents as needed for each file path in ""a.txt"" excluding the basename for each path"
df --total,print file system disk space usage with a grand total
dirname $(mktemp -u -t tmp.XXXXXXXXXX),finds the folder where temporary files would be written to.
find /path/to/folders/* -type d -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \;,move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory
find wordpress -name '*js',find every javascript file in the wordpress directory tree
find ./ -type f -ls |grep '10 Sep',search the current directory tree for regular files changed on the 10th of september
find -type f -name 'error.[0-9]*' -o -name 'access.[0-9]*' -o -name 'error_log.[0-9]*' -o -name 'access_log.[0-9]*' -o -name 'mod_jk.log.[0-9]*',"find all files under current directory matching either of the patterns 'error.[0-9]*', 'access.[0-9]*', 'error_log.[0-9]*', 'access_log.[0-9]*', 'mod_jk.log.[0-9]*' in their names"
ls -1|grep -v -e ddl -e docs| xargs rm -rf,removes everything from current folder but '*ddl*' and '*docs*' files.
comm -1 -2 <(ls /dir1 | sort) <(ls /dir2 | sort),print only common file names in sorted listings of directory 'dir1' and 'dir2'
who -m | awk '{print $1}',print the user name of the user running sudo
ls -l $FILENAME | grep -q ^l && SOURCE_DIR=$(ls -l $FILENAME | awk '{print $NF}');,"examines the path expanded by variable $filename to see if it is a symlink and if so, sets source_dir to the location of the link itself."
find . -maxdepth 1 -name '*.dat' -type f -cmin +60 -exec basename {} \;,display the names without extensions of all the data files in current folder and do not search in sub folders and which have not been changed in the last 60 mins
ln -fs /etc/configuration/file.conf /etc/file.conf,"forcible create a symbolic link named ""/etc/file.conf"" to file ""/etc/configuration/file.conf"""
git log --pretty=format:'%h|%an|%s' -10 | column -t -s '|',print the git log in a tabular form
find -mtime -7 -daystart,find all the files in the current folder that have been modified in the last 7 days
"find . -name ""pattern"" -print",find all files/directories named 'pattern' under current directory tree
find . -type d -print,find all directories under current directory
find . -name '*.c' -ls,"display list of all the c files ( fuiles with "".c"" extension ) in current folder"
find ~/Movies/ -size +1024M,find movies over a gigabyte in size
chown -R $JBOSS_AS_USER:$JBOSS_AS_USER $JBOSS_AS_DIR/,"recursively change owner and group to ""$jboss_as_user"" of ""$jboss_as_dir/"""
sudo mount /dev/xvdf /vol -t ext4,"mount ""ext4"" filesystem ""/dev/xvdf"" on ""/vol"""
"find . -name ""FILES.EXT""",find all files in the current directory tree named 'files.ext'
find . -name 'orm*',find all orm* files/directories under current directory
"ping google.com | awk -F'[ =]' 'NR>1{print system(""echo -n $(date +%s)""), $11}'","continuously print the seconds since unix epoch and the ping time to ""google.com"""
"find . -name ""*.php"" -exec chmod 755 {} \; -exec /bin/echo {} \; | wc -l",change permissions for all php files under the current directory tree to 755 and print the number of files changed
find /home -type f -name '*.mp3',find all mp3s in the /home directory tree
"find -type f -name ""Makefile"" -exec awk 'FNR==235 {print FILENAME; print}' {} +",find all makefile's in the current directory tree and look for line 235 in each of them
"find . -name '*.pdf' -exec sh -c 'pdftotext ""{}"" - | grep --with-filename --label=""{}"" --color ""$1""' -- ""$1"" \;","find all pdf files in current directory and grep with the regex expanded by ""$1"" in the converted text output and print the paths to the matching files"
bzip2 -kv */*,verbosely compresses all files on second and third depth level keeping original files in place.
mkdir -p $2,create intermediate directories as required
find / -nogroup -print,find files owned by nonexistent groups
find . -type f print0 | sort -r,display all normal/regular files in current folder in sorted order
"find /path/to/dir/ -type f -name ""file-pattern"" -print0 | xargs -I {} -0 grep -l ""foo"" ""{}""","search for the word ""foo"" in all the regular/normal files with the name ""file-pattern"" in the directory ""/path/to/dir"""
"find /path/to/dir -type f | xargs grep -l ""foo""","search for the word ""foo"" in all the regular/normal files in the directory ""/path/to/dir"""
zcat *R1*.fastq.gz | wc -l,"count number of lines in all files matching ""*r1*.fastq.gz"""
find . -name '*.gz' -exec gunzip '{}' \;,"unzip every "".gz"" file in the current directory tree"
find . -user john,find all files/directories under current directory tree that belong to user 'john'
find /  -type f -name *.mp3 -size +10M -exec rm  {} \;,find all .mp3 files with more then 10mb and delete them from root directory .
chmod 755 $(find /path/to/base/dir -type d),find all directories under /path/to/base/dir and change their permission to 755
find /dir -amin -60,find all files under and below /dir that were accessed less than 60 minutes ago
find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30,"find all files accessed on the 29th of september, 2008, starting from the current directory"
ln -s newtarget temp,"create a symbolic link named ""temp"" to ""newtarget"""
hostname,print the host name
ls folder/*.html | xargs -I {} sh -c 'mv $1 folder/`basename $1 .html`.txt' - {},renames all *.html files in a 'folder' directory to *.txt files.
find ~/Library -name '* *',find all files/directories with spaces in their names under ~/library directory
"find ""$sourcedir"" -type f -name ""*.type"" | xargs cp -t targetdir","copy all the files with the extension "".type"" from one folder to a target directory"
watch ls -l data.temp,"execute ""ls -l data.temp"" every 2 seconds"
"find . -name ""*.rb"" -type f -print0 | xargs -0 -n 2 echo",find all *.rb (regular) files under current directory ensuring white space safety and print at most two file names/paths per line
"find src -name ""*.java""",list all *.java files under the src directory
"find $DIR -type f -exec stat --format '%Y :%y %n' ""{}"" \; | sort -nr | cut -d: -f2- | head -n 1",returns the single most recent file in a directory and all subdirectories.
md5=`md5sum ${my_iso_file} | cut -b-32`,calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'
find . -empty -delete -print,delete empty files and print their names
"find dir1 ! -type d -printf ""%s\n"" | awk '{sum += $1} END{printf ""%f\n"", sum}'",get the total size of all files under dir1 directory
diff -y one.txt two.txt,display difference between one.txt and two.txt side-by-side.
find | head,find and list all files on your current directory and show a few lines of output from the beginning
find . -name '*.js' -not -path '*exclude/this/dir*',find all 'js' suffix files  exclue the path *exclude/this/dir*' under current dirctory
sort -m *.$suffix,"merge already sorted files in the current directory ending in "".$suffix"""
"find / -name ""*.conf""",find all the *.conf files under / (root)
find . -name '*.jpg',find all *.jpg files/directories under current directory
find . -type f -ok chown username {} \;,change the ownership of all regular/normal files in the current directory after users confirmation
find -E /somefolder -type f -iregex '\./(.*\.error.*|second.*log|.*FFPC\.log)$',find all files under /somefolder matching the extended case insensitive regex '\./(.*\.error.*|second.*log|.*ffpc\.log)$' in their paths
find /home/mywebsite/public_html/sites/all/modules -type f -exec chmod 640 {} +,find all files under /home/mywebsite/public_html/sites/all/modules and set their permission to 640
grep -l 'Subject: \[SPAM\]' | xargs -I '{}' mv '{}' DIR,"move all files that contain ""subject: \[spam\]"" to ""dir"""
"find $sourcePath -type f -mtime +10 -name ""*.log"" | xargs zip -mT $zipFile -@",move all *.log files under $sourcepath that were modified more than 10 days ago to a zip archive $zipfile
find . -iname *.mov,search the current directory recursively for mov files
ls `readlink somelink`,"check if the file ""somelink"" links to exists"
tac error.log | awk '{if(/2012/)print;else exit}',"beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line"
"find . -name ""a.txt"" -print","search the current directory tree for file ""a.txt"""
find . -type d -print0 | xargs -0 -n1 du -sk | sort -rn > dir-sizes.txt&,find the sizes of only directories under current directory sorted by size and redirect the output to dir-sizes.txt
"echo ""1 1 2 2 2 5"" | tr ' ' $'\n' | grep -c 2",count the occurrence of 2 in the string '1 1 2 2 2 5'
find . -mtime 4 -daystart -exec cp -a {} /home/devnet/fileshare\$ on\ X.X.X.X/RECOVER/ \;,"find all the files that have been modified in the last 4 days ( daystart is used to check files according to date i.e, all files modified from currentday-4 00:00:00 to current day) and copy them to folder."
"paste <(head -""$lc"" current.txt) <(tail -""$lc"" current.txt) | column -t -o,","merge the first ""$lc"" lines of ""current.txt"" and the last ""$lc"" lines of ""current.txt"" and display the result as a comma separated table"
"find . -name ""*.jpg"" -exec ls {} \;",list all .jpg files in the home directory tree
"tmux new -d ""bash -c \""$CMD\""""",starts new detached tmux session and runs command $cmd within.
"find . -name ""*.txt"" -print0 | xargs -0 egrep 'stuff'","search for 'stuff' in all *,txt files under current directory"
find . -type f -name '*.gz' | xargs zcat | wc -l,"count the total number of lines in all ""*.gz"" files in the current directory tree after decompression"
cat dump.txt | head -16224 | tail -258,"print lines 15967 to 16224 in file ""dump.txt"""
dig -x 8.8.8.8 | awk '/PTR[[:space:]]/{print $NF}',gets domain name from dig reverse lookup.
"chown --reference=file.txt -- ""$tempfile""","copy the owner and group from ""file.txt"" to ""$tempfile"""
seq 1 10 | perl -e'@x=<>;print@x[0..$#x-3]',"print all lines of ""seq 1 10"" except the last 3"
mount --bind point mnt,"remount ""point"" subtree to ""mnt"" as a bind mount"
find -mindepth 3 -maxdepth 5 -name passw,find the password file between sub-directory level 2 and 4.
"cat $filename | sed ""${linenum}p;d"";","print line number ""${linenum}"" in file ""$filename"""
find -maxdepth num -name query,search for files specifying the maximum depth of the search
md5sum *.txt | cut -d ' ' -f 1 | sort -u,list unique md5 digests of all files in the current directory ending in .txt
find . -mmin 30,find all files/directories under current directory that were modified exactly 30 minutes ago
find . -user daniel -type f -name *.jpg,find .jpg files owned by user daniel in the current directory and its sub-directories.
command | tee -a /path/to/logfile,"write output of ""command"" to standard output and append to ""/path/to/logfile"""
chown user1:user1 -R subdir1,"recursively change the owner and group of ""subdir1"" to ""user1"""
finger -l | awk '/^Login/' | sed 's/of group.*//g',"print login name and full name of all users currently logged in and delete instances of ""of group.*"""
"find . -type d -name ""test*""",find all the directories in current folder which start with test
find . -mmin 60 | xargs '-rd\n' ls -l,list all files in the current directory tree that were modified 60 minutes ago
"echo ""Number files in SEARCH PATH with EXTENSION:"" $(ls -1 ""${SEARCHPATH}""/*.""${EXTENSION}"" | wc -l)","prints number of files with extension ""${extension}"" in the ""${searchpath}"" directory."
"find . -name ""FILE-TO-FIND"" -exec rm -rf {} \;",delete all files/directories named 'file-to-find' under current directory tree
"watch -n 1 --color 'bash -c ""python -m unittest discover |& pyrg""'","execute 'bash -c ""python -m unittest discover |& pyrg""' every second and display with color support"
ping -c 1 8.8.8.8 |  awk 'FNR == 2 { print $(NF-1) }' | cut -d'=' -f2,"print the ping time number only of a single request to ""8.8.8.8"""
cat `which f`,"print the file content of command ""f"""
"find ./online_admin/*/UTF-8/* -type f -exec grep -H ""invalidTemplateName"" {} \;",search for 'invalidtemplatename' in all regular files in directories/files taken from the glob pattern './online_admin/*/utf-8/*' and show the matched lines with the filenames
"find . -name ""*.sh""| xargs rm -rf",find all .sh files in the current directory tree and remove them
find /path/to/files -iname '*.jpg' -newer timestamp -exec mogrify -format pdf {} +; touch timestamp,"find all the jpg images in the folder /path/to/files which have been modified after after the file ""timestamp"" and convert them into pdf."
find / -perm +u=s,find suid files
cat myfile.txt| sort| uniq,"sort and print each unique line in ""myfile.txt"""
find . -type d   -execdir echo /bin/mv {} /new/location \;,"find all directories and for each of them, print an mv command to move it to /new/location"
"finger | sed 's/\t/ /' | sed 's/pts\/[0-9]* *[0-9]*//' | awk '{print $2""\t(""$1"")\t""$3"" ""$4"" ""$5}' | sort | uniq",display unique names of logged in users
ssh user@host -S /tmp/%r@%h:%p,"open a ssh connection to ""user@host"" with a control socket ""/tmp/%r@%h:%p"""
sudo chown -Rf www-data *,"silently and recursively change the ownership of all files in the current directory to ""www-data"""
"find temp/medium/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 428x270""^"" -quality 80 -compress JPEG -monitor -strip","find all *.jpg (case-insensitive) files under  maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270""^"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"
find ~ -name myletter.doc -print,"search for the file ""myletter.doc"" in the home folder"
find . \( -name D -prune \) -o -name hi.dat,search in the current directory and all sub-directories except ./d for the file named hi.dat.
"find . -name ""*.txt -exec process_one {} "";""",find all *.txt files/directories under current directory and execute process_one for each of them
read -t 10,read a line from standard input with a timeout of 10 seconds
"find ./ -type f -exec bash -c 'echo ""mv \""$1\"" \""$(echo ""$1"" | sed -re '\''s/^([^-]*)-\s*([^\.]*)/\L\1\E-\2/'\'' -e '\''s/ /_/g'\'' -e '\''s/_-/-/g'\'')\""""' - {} \;","print mv commands to rename all files under current directory by formatting the filenames with the sed scripts '\''s/^([^-]*)-\s*([^\.]*)/\l\1\e-\2/'\'', '\''s/ /_/g'\'' and '\''s/_-/-/g'\''"
apropos,searches the manual page names and descriptions
"find temp/large -iname ""*.jpg"" -printf 'mv %p %p\n' | sed 's/\.jpg$/_LRG\.jpg/' | while read l; do eval $l; done",rename all *.jpg files to *_lrg.jpg files under temp/large directory
find -L /usr/ports/packages -type l -exec rm -- {}	+,delete all broken symbolic links under '/usr/ports/packages' directory tree
find src/ -name '*.[ch]',search the src/ directory recursively for .c and .h files
"find . -name ""somefiles-*-.txt"" -type f","find all the text files in the current folder starting with ""somefiles-"""
grep UTRACE /boot/config-$(uname -r),display all lines containing utrace in the current kernel's compile-time config file.
find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date ‘+%d%m%Y’_archive.tar`,find files that were modified second last week and archive them
rev   test.txt | sort  -k2 | rev,sort strings of 'test.txt' file by second from the end field
"echo -n teststring | gzip -1 | tail -c 8 | head -c 4 | hexdump -e '1/4 ""%08x"" ""\n""'","calculate the crc32 of ""testring"""
"find /fss/fin -d 1 -type d -name ""*"" -print",print the list of 1st level subdirectories in /fss/fin
find . -mmin -60 -type f | xargs ls -l,list all regular files from the current directory tree that were modified less than 60 minutes ago
od -t x1 -An file |tr -d '\n ',"print contents of ""file"" as space separated hexadecimal bytes on a single line"
date +%s,print current date as epoch seconds
ssh -M -S my-ctrl-socket -fnNT -L 50000:localhost:3306 jm@sampledomain.com,"create master ssh control socket ""my-ctrl-socket"" in the background with no terminal or command execution with connection forwarding from localhost port 50000 to localhost port 3306 via ""jm@sampledomani.com"""
"find project / src / -name ""* .o"" -exec rm -f {} \;",delete all files with ' .o' extension in the entire filesystem
"find . -type f -name ""*.JPG""",find regular files whose names end in .jpg
"ping 8.8.8.8 | awk '{split($7,a,""[=.]"");if (a[2]>58) print a[2], strftime()}'","print the time to ping ""8.8.8.8"" followed by a time stamp if the ping is greater than 58"
find / \! -readable -prune -o -name '*.jbd' -ls,"list in long format all files from / whose filename ends in ""jbd"", not descending into directories that are not readable while searching."
find repository_dir/$f -type d -name needed_dir | xargs -r svn checkout,run svn checkout in every directory named 'needed_dir' under repository_dir/$f
find . \( -name '*.wmv' -o -name '*.wma' \) -exec rm {} \;,"delete all the ""wmv"" ""wma"" files in the currnet folder,"
screen -S 23536 -X quit,kill screen session 23536
myvariable=$(whoami),"save the current user name in variable ""myvariable"""
"find ""$DIR"" -type f \! -newer ""$a"" -exec rm {} +",delete all regular files under $dir directory tree that have been modified before file $a
find . -type f -inum 314167125 -delete,delete all regular files with inode number 314167125 under current directory tree
"CDATE=$( date -d @""$timestamp"" +""%Y-%m-%d %H:%M:%S"" )","format the time string $timestamp according to the format string ""%y-%m-%d %h:%m:%s"" and save the output to variable 'cdate'"
find /path -perm /ugo+x,find all executables under /path directory
rsync -avR somedir/./foo/bar/baz.c remote:/tmp/,"archive ""somedir/./foo/bar/baz.c"" to ""remote:/tmp/"" preserving the relative path of ""foo/bar/baz.c"""
"var=""$(hg st -R ""$path"" | sed ""s/\(^ *\| *\$\)//g"")""","remove leading and trailing spaces from the output of 'hg st -r ""$path""' and save the result in variable ""var"""
find . \! -name BBB -print,print the list of all files except files named bbb
rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude,"archive showing progress ""sourcefolder"" to ""/destinationfolder"" excluding ""thefoldertoexclude"""
echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date),"print ""*checking partition permission* hostname=$(hostname) lastchecked="" followed by the current date"
cp -r ../include/gtest ~/usr/gtest/include/,recursively copies '../include/gtest' directory to '~/usr/gtest/include/'.
"find . -name .svn -type d | while read ss; do dir=$(dirname ""$ss""); test $(ls -a ""$dir"" | wc -l) == 3 && echo ""svn rm \""$dir\""""; done",remove all the versioned-but-empty directories from a subversion checkout under current directory
find /usr/bin -name [ef]*x,find all files with the first letter “e” or “f” and last one x in /usr/bin directory:
chmod 640 $(find . -name *.php),find all *.php files under current directory and change their permission to 640
"find ""$somedir"" -type f -exec echo Found unexpected file {} \;",check if the directory tree whose name is given as variable $somedir contains no regular files
find . -name '*.[ch]' | xargs grep -l thing,"list all .c and .h files in the current directory tree that contain ""thing"""
"variable=$(echo ""$variable"" | tr ' ' '\n' | nl | sort -u -k2 | sort -n | cut -f2-)","remove duplicates in variable ""variable"" and preserve the order"
sudo du -hDaxd1 /var | sort -h | tail -n10,prints top-ten biggest top-level folders within a 'var' folder.
seq 10 | xargs,print a space separated list of numbers from 1 to 10
history | grep 'part_of_the_command_i_still_remember_here',"search history for ""part_of_the_command_i_still_remember_here"""
find -type f -maxdepth 1 -name 'file*' -print0 | sort -z | xargs -0 bash script.sh,"process each file beginning with ""file"" in the current directory as an argument to ""bash script.sh"""
"cd ""$(find . -print0 | sort -z | tr '\0' '\n' | tail -1)""",change directory to the alphabetically last path under the current directory
find . -type d -exec chgrp usergroup {} \;,change the group of all directories in the current folder
"find /home/<user> -type f -exec file {} + | grep -E ""MPEG v4|EBML|Microsoft ASF|Macromedia Flash Video|WebM|Apple QuickTime movie|AVI""",find all the video files in the folder /home/<user>
find /tmp -size -100c,find files/directories under /tmp smaller than 100 bytes
"echo ""$f"" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f2","finds strings with dot-separated sequence of numbers, and prints part of that sequence between the first and second dot."
"cal -h | sed ""s/$(date +%d)/""$'\033\[94m&\033\[0m/g'",highlights current day in a month calendar with color.
find . -type f -size 10k,display all the regular files in the current folder that are exactly 10kb
cd bar1 find . -maxdepth 1 -name '*foo*' -not -name '*.cc'  -exec echo ln -s $PWD/{} ../bar2,"create symbolic links in current directory to all files located in ""bar1"" directory that are not directory and do not have "".cc"" filename extension"
"find . -type f -name ""*.java"" | xargs>    tar rvf myfile.tar",find *.java files under current directory and compress them to myfile.tar
"find . -type f ! -name ""$OUTPUT"" -exec md5sum $MD5SUM_OPTIONS {} + > $OUTPUT","find all files under current directory excluding the $output file, calculate their md5sum with $md5sum_options options and redirect the result to $output"
find dir -name \\*~ -exec rm {} +,remove all \*~ files under dir
cat file.txt | fold,"wrap each line in ""file.txt"" to fit in 80 characters"
"find . -mtime +2 | perl -pe 's{^}{\""};s{$}{\""}' > ~/output.file",find all files/directories that were modified more than 2 days ago and redirect the list to ~/output.file
find /mnt/naspath \! \(-name .snapshot -prune\) -type f -mtime 0 -print0,find all files under /mnt/naspath directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter
"sudo ls -hal /root/ | sudo bash -c ""cat > /root/test.out""","prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file."
head -5 tst.txt | tail -1 |cut -c 5-8,"gives the chars in line 5 and chars 5 to 8 of line 5, in tst.txt"
"find . \( -name skipdir1 -prune , -name skipdir2 -prune -o -name ""*.txt"" \) -print",display all the text files from the current folder and skip searching in skipdir1 and skipdir2 folders
"find . -name ""*.swp""|xargs rm",remove all *.swp files under current directory
"filename=""`basename ""http://pics.sitename.com/images/191211/pic.jpg""`""","set variable ""filename"" to only the name of document specified by url, in this case ""pic.jpg"""
"find /var/log/apache2/access*.gz -type f -newer ./tmpoldfile ! -newer ./tmpnewfile \ | xargs zcat | grep -E ""$MONTH\/$YEAR.*GET.*ad=$ADVERTISER HTTP\/1"" -c","search for the extended regex expanded by""$month\/$year.*get.*ad=$advertiser http\/1"" in the decompressed contents of the /var/log/apache2/access*.gz files that are newer than ./tmpoldfile and older than ./tmpnewfile"
"/bin/sh -c ""/bin/true $(seq 1 99999)""",run /bin/true with 1 to 99999 as arguments
find Mainfolder > outputfile,find all files/directories under mainfolder directory and redirect the output to outputfle
find /usr/ports/ -name work -type d -print -exec rm -rf {} \;,find directories named 'work' under '/usr/ports/' directory tree and remove them
find . -type f -mtime +2,find all regular files that reside in the current directory tree and were last modified more than 2 days ago
"find . -depth -name '* *'  | while IFS= read -r f ; do mv -i ""$f"" ""$(dirname ""$f"")/$(basename ""$f""|tr ' ' _)"" ; done",replace spaces with underscores in the names of all files and directories in the current directory tree
sudo chown root:wheel adbind.bash,"change owner to ""root"" and group to ""wheel"" of ""adbind.bash"""
"find ""$fileloc"" -type f -prune -name ""$filename"" -print",find all regular files with name pattern $filename under $fileloc directory tree
find dir -type f -print0 | xargs -r0 sed -i 's/ *$//',remove trailing white spaces from all files under dir directory ensuring white space safety in the filename
find $ROOT_DIR -type d -depth -print,find all directories under $root_dir and show the sub-directories of the directories before the directories themselves
find -mtime 2,find all the files that have been modified exactly 2 days ago
find . -size -100M,find all files starting from the current directory which are smaller than 100mb
find . -wholename './src/emacs' -prune -o -print,print all files in the directories except the ./src/emacs directory
"echo ""$f"" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f3","finds strings with dot-separated sequence of numbers, and prints part of that sequence before the second and third dot."
"cd ""$(dirname ""$(which oracle)"")""",change to folder where the oracle binary is.
find . -iname *.txt -exec egrep mystring \{\} \;,search for 'mystring' in all *.txt (case insensitive) files under current directory
"seq 1 10 | perl -ne 'push @l, $_; print shift @l if @l > 3'","print all lines of ""seq 1 10"" except the last 3"
ls -alrt `pwd`/*,list all files and directories (including hidden) in the current working directory in a long list format sorted by the oldest modification time
find . -perm 766,find files in the current directory tree which have permissions rwx for user and rw for group and others
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -l {} \; -exec sed -i '/./d' {} \;",delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions
find . -name .svn -exec rm -rf {} \;,delete all .svn files/directories under current directory
find -user jzb,find all of jzb's files
find ~/Books -type f -name Waldo -exec rm {} \;,delete all files named 'waldo' under ~/books directory tree where '~' expands to user's home directory
cat file | paste -d\ - - -,"print every two lines in ""file"" on a single line separated by a space"
"find / -name ""*fink*"" -print",find all *fink* files/directories in entire file system
"find . -name ""*.fq"" -print0 | xargs -0 -n 1 fastqc",run `fastqc' on all the fastqc files in the current directory tree
split -l 200000 filename,"split ""filename"" into files of at most 200000 lines each"
"read -t 3 variable < <( tail -f logfile.log | grep ""something"" )","search appended data in ""logfile.log"" for ""something"" with a timeout of 3 seconds"
"ssh -o ""StrictHostKeyChecking no"" -i ${KEYDIR}/${KEY}.pem ${USERNAME}@$NAME ""${COMMANDS}""","ssh into ""$name"" as user ""${username}"" using key file ""${keydir}/${key}.pem"", automatically add the host to list of known hosts and execute ""${commands}"""
find */ | cut -d/ -f1 | uniq -c,print how many files are inside each directory under the current one
grep -v 'pattern' filename,print lines in file 'filename' that do not match the regex 'pattern'
"who | awk '{ print $1; }' | sort -u | awk '{print $1; u++} END{ print ""users: "" u}'",print sorted list of unique users logged in followed by a total count
find . -regex filename-regex.\*\.html,find all files/directories under current directory tree whose paths match the regex 'filename-regex.\*\.html'
find . -name \*.html,display all the html files in the current folder
cat BIG_FILE.txt | less,"page through the contents of big_file.txt, letting the user move around with the arrow keys, the q key quits."
"find $DIR -name ""*.mod"" -type f -exec bash -c 'remodup ""$1""' - {} \;","find all the regular/normal files ending with "".mod"" in a folder and pass them as input to remodup command"
find ~/clang+llvm-3.3/bin/ -type f -exec echo basename {} \;,find all files in ~/clang+llvm-3.3/bin/ and print 'basename /file/path' for each file
join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2),"join data in ""file1"" sorted by the second word of each line with data in ""file2"" sorted by the first word of each line, keeping the same order as it is found in ""file1"""
find / -group 999 -exec chgrp NEWGROUP {} \;,change the group of all the files in the file system which belong to the group with the gid 999
zcat small-*.gz | split -d -l2000000 -a 3 - large_,"unzip and merge all ""small-*.gz"" files into files of 2000000 lines"
find $path -type d,find all directories under $path
find . -path ./directory -prune -o -name '*.js' -print,find all files/directories with '.js' extension under current directory tree without descending into './directory'
find . -type f -exec grep -il 'foo' {} \;,"print all filenames of files under current dir containing 'foo', case-insensitive"
find . -type f -mtime -14 | sed 's|./||' >deploy.txt,save the list of files modified within a fortnight ago to `deploy.txt' removing the leading ./ from the file names
awk -F '\t' '{print $2}' * | sort | uniq -c | sort -nr,print a frequency count of column two for every file in the current directory
"find /tmp -maxdepth 1 -name ""$USER.*""","find all files in /tmp whose names begin with the current user's name followed by ""."""
"find ""/path/to/pdfs/"" -type f -name ""$1*.pdf"" -exec stat -f ""%10Dm %SN"" {}\;  | sort -k1,1n -k2,2",find all the pdf files in a folder which start with a specific name and display them in the sorted order of their time stamps
"find / -type f -size +20000k -exec ls -lh {} \; | awk '{ print $8 "": "" $5 }'",find all files in entire file system which are larger than 20000kb and show file name/path followed by its size
dirname `find / -name ssh | grep bin | head -1`,prints first found folder that contains 'ssh' file and has 'bin' in path.
"find dir1 ! -type d -printf ""%s\n"" | awk '{sum += $1} END{print sum}'",get the total size of all files under dir1 directory
"find ./ -type f -name ""*"" ! -path ""./.*"" ! -path ""./*/.*""","search for regular files in the current folder which path is not  ""./.*"" and not ""./*/.*"""
find . -name 'Lemon*.mp3' -print0 | xargs -­0 -i mplayer '{}',find all lemon*.mp3 files under current directory and run mplayer with these files
rsync -pr ./export /path/to/webroot,"copy ""./export"" recursively to ""/path/to/webroot"" preserving permissions"
find . -type f -print0 | xargs -0 -n 1 -P 4 dos2unix,convert all dos files under and below the current directory to the unix format
"find . -name ""*.txt"" -print",find all *.txt files/directories under current directory
"find . -maxdepth 1 -not -name ""."" -print0 | xargs --null chown -R apache:apache","recursively change the owner and group of all files in the current directory to ""apache"""
find ~/ -name '*.txt' -exec cat {} ;,print out the contents of all *.txt files in the home directory
"find . -name * -print0  | xargs -0 grep -iH ""String""",search for 'string' case insensitively in all files under current directory tree and show the matched lines with their filenames
find /home/user/Desktop -name '*.pdf' -o -name '*.txt' -o -name '*.bmp',"list *.pdf, *.bmp and *.txt files under the /home/user/desktop directory."
ls | xargs -I {} mv {} {}_SUF,"suffix all files and folders in the current directory with ""_suf"""
find ${userdir}/${i}/incoming -mtime +2 -type f -exec rm {} \;,find files which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them
"find tmp -type f -printf ""%s %p\n"" | awk '{sub(/^[^ ]+/,sprintf(""f %10d"",$1))}1'","print the names and sizes of regular files residing in the ""tmp"" directory tree"
"set lastdaymonth=`cal $month $year  |tr -s "" "" ""\n""|tail -1`",stores date of last month day in the 'lastdaymonth' variable.
find dir -type f | xargs md5sum >> file.txt,find all files under 'dir' directory and print their md5 sums into file.txt
find ~ -name '*.txt' -print0 | xargs -0 cat,print out the contents of all *.txt files in the home directory
"alias histgrep=""history | grep""","set alias ""histgrep"" for command ""history | grep"""
"find ./ -type f -regex "".*\.[Jj][Pp][gG]$"" | wc -l",find all the files ending with jpg in current folder and display their count ( case insensitive )
find . -name '*.zip' -execdir unzip '{}' ';',find all *.zip files under current directory and unzip them in the same directory as the files
"kill -HUP $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }')",send sighup (hangup) signal to all parents of zombie processes.
"grep -ao ""[/\\]"" /dev/urandom|tr -d \\n",print continuous characters '/' and '\' randomly from /dev/urandom
find . -mtime 0 | grep -v '^\./en' | grep -v '^\./es',search the current directory recursively for files last modified within the past 24 hours ignoring paths ./es* and ./en*
ls -lb,prints long listing of content in the current folder with c-style escapes for nongraphic characters
find /storage -type f \( -name '*.mp4' -o -name '*.flv' \) -printf '%T@ %p\0' | sort -zn),display all the mp4 and flv files in a folder along with their timestamps in the sorted order of time
pstree -s $ID,prints process tree of a process having id $id with parent processes.
"find -type f -exec grep -Hn ""texthere"" {} +","finds all files having text ""texthere"" recursively in a current folder, and precedes found string with string number in file and file name."
find . -type d -print0,print a null-separated list of all directories of the current directory tree
"source ""$DIR/incl.sh""","in the current shell, interpret 'incl.sh' which is in the directory pointed by variable dir"
git ls-files | xargs wc -l,counts the number of lines in each file in a git repository.
find -name *bar,find all *bar files/directories under current directory
find /etc -type f -mmin -10,find regular files modified within the last ten minutes under /etc
"find -iname ""filename""","search for the query ""filename"" in the current directory and any subdirectories"
ls /home/dreftymac/,lists all top-level files in a '/home/dreftymac/' folder.
find . -type f | xargs chmod 664,change the permissions of all regular/normal files in the current directory
"find ""$DIRECTORY_TO_PROCESS"" -type f -iregex "".*\.$FILES_TO_PROCES""  ! -name ""$find_excludes"" -print0 | xargs -0 -I {} bash script.bash {}",find all regular files in a folder using regular expressions which do not have a specific name pattern and send these files as input to the script.bash script file
"files=""$(find $dir -perm 755)""",save a list of all 755 permission files/directories under $dir directory tree to the variable 'files'
find -L /myfiles,find all files in the /myfiles directory tree following symbolic links
find . -exec touch {} \;,update timestamps of all files (not directories) under current directory.
real1=$(pwd -P),"save the current working directory with resolved symbolic links to variable ""real1"""
find $HOME -name core -exec rm -f {} \;,force delete all the core files in the home folder
"find /home/jassi/ -name ""aliencoders.[0-9]+"" | xargs ls -lrt | awk print '$9'",list all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
"grep -rl ""needle text"" my_folder | tr '\n' '\0' | xargs -r -0 file | grep -e ':[^:]*text[^:]*$' | grep -v -e 'executable'",print the text file paths that match 'needle text' in their contents under 'my_folder' recursively
"ssh -i ~/.ssh/gitkey_rsa ""$@""","ssh with parameters specified in ""$@"" using key file ""~/.ssh/gitkey_rsa"""
unset array[2],unsets array member with index 2.
find / -size  +5000000c 2> /dev/null,find all user files larger than 5mb
find . -name foo.mp4 | sed 's|/[^/]*$||',find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories
"rsync --recursive --exclude 'foo' * ""$other""","recursively copy all (non-hidden) files and directories in current dir except ""foo"" to location specified by variable ""other"""
find . -type d -exec chown username {} \;,change the ownership of all directories in the current folder
sudo chown -R `whoami` ~/.npm,"recursively change ownership of ""~/.npm"" to the current user"
find -mtime +7 -print | grep -Fxvf file.lst,"display all the files in the current folder which have not been modified in the last 7 days and which are not in the list ""file.lst"""
exit N,exits the entire bash script with defined status code n.
ls 2>&1 | tee --append /tmp/ls.txt,"write the standard output and error of ""ls"" to the console and append it to ""/tmp/ls.txt"""
"$ find . -name ""*mp3"" -print0 | xargs -0 mid3iconv -e <source-encoding> -d",search for all the mp3 files in the current folder and change the character encoding of them to <source-encoding>
"find -type f -printf ""%T+ %p\0"" | sort -z | grep -zom 1 "".*"" | cat",find the oldest normal file in the current directory and display its contents
find . -type f -atime +1,display all the files in the current folder for the files which have not been accessed in the last 24 hours
"find /path/to/dir -type f -print0 | xargs -0 grep -l ""foo""","search for the word ""foo"" in all the regular/normal files in the directory ""/path/to/dir"""
"find . -type f -newermt ""$(date '+%Y-%m-%d %H:%M:%S' -d @1494500000)""",recursively finds all files newer than a date
ssh remote_user@server.com,"ssh into server ""server.com"" as user ""remote_user"""
find src/js -name '*.js',display all the java script files in a folder
find . -print0 | grep --null 'FooBar' | xargs -0,list all files/directories under current directory with 'foobar' in their paths ensuring white space safety
find . -exec echo {} \;,execute the 'echo' command on each file from the current directory tree individually
find . -print >myfile.sh,print a list of all files/directories under current directory in myfile.sh file
watch -n 1 ls,"execute ""ls"" every second"
ssh user@server /bin/bash <<'EOT',"ssh into ""server"" as user ""user"" and interpret commands in ""/bin/bash"" until ""eot"" is received"
find . -perm /u=s | head,find all suid set files under current directory and show a few lines of output from the beginning
ifconfig eth0:fakenfs 192.0.2.55 netmask 255.255.255.255,creates alias for network interface 'eth0' with ip address '192.0.2.55' and network mask '255.255.255.255'.
find . -type f -name YourProgramName -execdir ./YourProgramName YourParameterFile \;,"find all regular files in the current directory tree whose names are ""yourprogramname"", change to the directories they are in, and execute them with parameter ""yourparameterfile"""
"find ""$1"" -perm -u+w -print0 | xargs chmod g+w",find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories
find . -not -iwholename '*/.git/*',list files in the current directory and below except for git files
find . -wholename './src/emacs' -prune -print -o -print,"start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found"
"find /etc -name ""*.conf""",find files with extension .conf in the /etc directory tree
hostname myServersHostname,"set the host name to ""myservershostname"""
ruby-script.rb | column -s $'\t' -t,"format the output of ""rub-script.rb"" as a tab separated table"
find . -name modules -exec sh -c 'exit 0' \;,find the first file/directory under current directory named 'modules' and exit with empty result
"sort -nrk 2,2 file.dat","numerically sort file ""file.dat"" by the second word of each line and output from greatest value to least value"
find /tmp/test/* -daystart -mtime -1,find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' that were modified within the last day (day counted from today)
find . -type f -print | xargs chmod 444,set 444 permission to all regular files under current directory
"find /tmp -name ""*.tmp"" -print0 | xargs -0 rm   find /tmp -name ""*.tmp"" -print0 | xargs -0 rm",delete all the tmp files ( files with the extension tmp ) in the /tmp folder. print0 is used to display all those files which have newline in their names or files whose name is only spaces.
"cd $(find . -maxdepth 1 -type d -name ""folder_*"" | sort -t_ -k2 -n -r | head -1)",sort all directory names matching folder_* and go to the last one.
cat YourFile.txt | more,"display the content of yourfile.txt, waiting for user input at each page."
find /data/images -type f -newer /tmp/start -not -newer /tmp/end > output.txt,search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end and save the output list to output.txt
find / -path /proc -prune -o -type d | wc -l,"find all directories recursively starting from / and skipping the contents of /proc/, and count them"
find . -depth -type f -print,find all regular files under current directory
tree --help |& head -n2,print the first 2 lines of tree's help message by redirecting it from standard error to standard output
find . -size -10k,find all the files in current directory of size smaller than 10kb.
cut -d/ -f1-2 | cut -d/ -f2- | sort | uniq -c,"list the unique second ""/"" delimited field of every line from standard input prefixed by the number of occurrences"
diff -u file1 file2,"compare ""file1"" and ""file2"" line by line with 3 lines of unified context"
find . -size 0 -exec rm {} \;,find files that are 0 bytes in size in the current directory tree and remove them
find /path/to/search/in -name 'catalina*',find all catalina* files/directories under /path/to/search/in
"find ""$DIR"" -type f \! -newer ""$a"" \! -samefile ""$a"" -delete",find all the regular files under $dir directory tree which have been modified before the file $a excluding the file $a and delete them
find /tmp -type f -exec grep 'search string' '{}' /dev/null \+,"search all files from the /tmp directory tree for the string ""search string"""
find / -name '#*' -atime +7 -print | xargs rm,unsafed rm all file which name start with '#'
"yum check-update | awk '{if($5 ~ /updates/){print $1}}' | tr '\n' ','",lists available updates for installed packages.
mount -l | grep 'type nfs' | sed 's/.* on \([^ ]*\) .*/\1/' | grep /path/to/dir,"check if ""/path/to/dir"" is a nfs mount point"
"echo ""0 1 * * * /root/test.sh"" | tee -a /var/spool/cron/root","prints string ""0 1 * * * /root/test.sh"" to the terminal, and append it to file '/var/spool/cron/root'"
find ~ -name *.txt,search the home directory tree for files matching pattern '*.txt'
tar czfP backup.tar.gz /path/to/catalog,"create archive ""backup.tar.gz"" from /path/to/catalog"
yes 'c=(╱ ╲);printf ${c[RANDOM%2]}'|bash,display infinite scroll of random ascii art
objdump --disassemble my-crashing-program | less,page through the disassembler output of objdump on executable file 'my-crashing-program'.
"find ./ -type f -name doc.txt -printf ""found\n""","search the current directory tree for regular files named `doc.txt' and print ""found"" for each of them"
find / \( -name tmp -o -name '*.xx' \) -atime +7 -exec rm {} \;,remove all files named tmp or ending in .xx that have not been accessed for seven or more 24-hour periods
"md5=$(md5sum ""$my_iso_file"" | cut -d ' ' -f 1)","save the md5 sum hash of ""$my_iso_file"" to variable ""md5"""
find -mtime 1,find all the files that have been modified exactly 1 day ago
"awk -F""\t"" 'NF>1' file",output all lines in 'file' which contain a tab character.
libdir=$(dirname $(dirname $(which gcc)))/lib,"locates 'gcc' executable file, strips last two parts of the full path, adds '/lib' to the end and saves result in 'libdir' variable."
"find ""$dir"" -mindepth 1 -type f",find all regular files in minimum 1 level down the $dir directory
"ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf(""%13.2f Mb "",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf(""%s "",$x) } print """" }' | awk '{total=total + $1} END {print total}'",show total memory used by processes in mb
"mv /path/subfolder/{.,}* /path/","move all files including hidden files in ""/path/subfolder/"" to ""/path/"""
"find / -name ""*.log""",find all the log files in the file system
basedir=$(pwd -L),"save the logical current working directory to variable ""basedir"""
ifconfig | grep 'inet addr:' | grep -v 127.0.0.1 | head -n1 | cut -f2 -d: | cut -f1 -d ' ',gets ip address of first listed network interface in system.
"od -a -An -v file | perl -0777ne 's/\n//g,print ""$_\n "" for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs'","print an octal dump of ""file"" with named characters, no addresses, and no suppressed duplicate lines with sections starting with ""esc"", ""fs"", ""gs"", or ""us"""
pwd | sed 's#.*/##',prints current directory name
echo -n '' | md5,find md5sum of an empty string
rpm2cpio foo.rpm | xzcat | cpio -idmv,"extract rpm ""foo.rpm"""
"find . -type f -name ""*.*"" -not -path ""*/.git/*"" -print0 | xargs -0 $SED_CMD -i ""s/$1/$2/g""","find all *.* files not within .git directory and run $sed_cmd -i ""s/$1/$2/g"" on each of them"
find /var/www -type f -name «access.log*» -size +100M,"search for all the regular/normal files with the name ""access.log"" in the folder /var/www which are bigger than 100mb"
cat /etc/passwd -n | grep `whoami` | cut -f1,"print line number of each line in /etc/passwd file, where current user name is found"
"find ~/some/directory -name ""*rb"" -exec basename {} \;","print the names of all the files from directory tree ~/some/directory whose names end in ""rb"""
"mount -o ro,remount -t yaffs2 /dev/block/mtdblk4 /system","remount ""yaffs2"" filesystem ""/dev/block/mtdblk4"" to ""/system"" as read only"
ssh -T tunneluser@111.222.333.444 <<'EOI',"ssh into ""111.222.333.444"" as user ""tunneluser"" without a pseudo-terminal and without interpreting bash variables locally"
sudo chown bob:sftponly /home/bob/writable,"change owner to ""bob"" and group to ""sftponly"" of ""/home/bob/writable"""
w -h $euids,"prints information about user $euids currently on machine and its processes, without printing header."
ldd /bin/* /usr/bin/* | sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g' | sort | uniq -c,"prints list of all libraries linked with binaries in '/bin/' and '/usr/bin/', with number of linkages for each library."
ln -f $GIT_DIR/../apresentacao/apresentacao.pdf $GIT_DIR/../capa/apresentacao.pdf,force create hard link between $git_dir/../apresentacao/apresentacao.pdf and $git_dir/../capa/apresentacao.pdf
file -bi myfile.txt,"display only mimetype of myfile.txt, without the filename."
candidates=$(which -a $cmd | wc -l),"save the number of matching executables for ""$cmd"" in $path to variable ""candidates"""
find . -name '*.txt' | perl -lne 'print if /c|d|z/',find all *.txt files under current directory that match the regex c|d|z in their names
"find . -name 'sqlite.db' -exec sqlite3 ""{}"" 'SELECT * FROM table WHERE column1=""value""' \;","find sqlite3 databases in the current directory tree and execute query 'select * from table where column1=""value""' on all of them"
ps -o user= -p $$ | awk '{print $1}',print name of user with current euid.
cd $(dirname $(which oracle)),"change directory to the directory containing the ""oracle"" executable"
find . -mtime +7,display all the files in current folder which have not been modified in the last 7 days
find . -type d -path '*/\.*' -prune -o -not -name '.*' -type f -name '*some text*' -print,find all regular files under current directory tree containing 'some text' in their names without descending into hidden directories and excluding hidden files
chown -R antoniod:antoniod /var/antoniod-data/,"recursively change the owner and group of ""/var/antoniod-data/"" to ""antoniod"""
sudo find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755,"change the permissions of all the directories in the folder ""/path/to/somedirectory"" to 755"
pstree -A -s $$,prints process tree for the current process with ascii line drawing characters.
find / -name *.rpm -exec chmod 755 '{}' \;,find all .rpm files and change their permissions to 755
column -t [file],"format the contents of ""[file]"" in a neat table"
find . -size 24000c,find files in the current directory tree whose size is 24000 bytes
"find . -name ""*.txt"" -execdir ls -la {} "";""",search for all the text files and display the long listing of these files from that directory
find . | sed 's/.*/& &/',display all the files in current directory with each file name displayed twice in the same row
find . -mtime 7,find all the files that have been modified in exactly 7*24 hours ago
find $dir -type f -name $1 -exec getLine {} \;,search for a file in a directory and pass it as an input to the script getline
find . — size +1000k -print,find all the files in the current folder which are bigger than 1mb
ps  -ef | grep $$ | grep -v grep,print current shell using process id
find . -type f -exec grep -n California {} \; -print | wc -l,"find all files under and below the current working directory with the word california in the file, and count the number of lines in the output"
find . -type f -name '* *',find all files with space in their names under current directory
rsync -r /path/to/source username@computer:/path/to/dest,"copy ""/path/to/source"" to '/path/to/dest' in remote ""username@computer"""
"date -d ""$(date -d ""2 months"" +%Y-%m-1) -1 day"" +%a",print the day at 1 day ago in 2 months from now
set | grep -P '^\w*X\w*(?==)',list environment variables and their values whose name matches '^\w*x\w*'
find your/dir -prune -empty,"find directory ""your/dir"" if it is empty"
find -regex '^.*/[A-Za-z]+-[0-9]+x[0-9]+\.[A-Za-z]+$' | xargs echo rm -f,remove files whose names match regular expression '^.*/[a-za-z]+-[0-9]+x[0-9]+\.[a-za-z]+$' from the current directory tree
comm -23 <(ls dir1 |sort) <(ls dir2|sort),"list files in ""dir1"" that are not in ""dir2"""
"find . -name ""*.*"" -type f -exec grep -l '<img-name>-<width:integer>x<height:integer>.<file-ext> syntax' {} \; | xargs rm -f","remove from the current directory tree all the regular files which have a dot in their names and contain string ""<img-name>-<width:integer>x<height:integer>.<file-ext> syntax"""
which lshw,"print the full path of executable ""lshw"""
find / -mount \! -readable -prune  -o  -path /dev -prune  -o  -name '*.jbd' -ls,"list in long format all files from / whose filename ends in ""jbd"", not descending into directories that are not readable while searching, and not descending into directories on other filesystems"
find / -perm /u=r,find all read only files
"find . -iname '*.png' | while read i; do mogrify -format jpg ""$i"" && rm ""$i""; echo ""Converted $i to ${i%.*}.jpg""; done",convert all the png images in the current folder to jpg images
"find ""$GIVEN_DIR"" -type d -mindepth 1",find all directories under minimum 1 level down the  $given_dir directory
find /usr/pcapps/ -mount -type f -size +1000000c | perl -lpe ' s{ }{\\ }g ' | xargs ls -l | sort +4nr | head -200,"list largest 200 files over 1,000,000 bytes in the filesystem mounted at ""/usr/pcapps"""
find / -type f -name dummy 2>/dev/null -exec cat {} \; >tesst.txt,"display the contents of all the files in the current folder which have the name ""dummy"" and discard all the errors while searching and save the output to the file tesst.txt"
find . -type f -printf '%TY-%Tm-%Td %TH:%TM: %Tz %p\n'| sort -n | tail -n1,find recursively the latest modified file in the current directory
"find / -type f -printf ""\n%Ab %p"" | head -n 11 | sort -k1M",sort and display the file name and creation month of top 11 files in the entire file system (sort in the order of month )
find pathfolder -type f  2> err.txt | wc -l,"find all regular/normal files in the folder ""pathfolder"" and display the count of files, save all the errors to err.txt file"
env | grep '^\(GO\|HOME=\|PATH=\)',"list all environment variables (name and value) whose name either equals home or path, or starts with go"
"find . -type f -print0 | xargs -0 stat -f ""%m %N"" | sort -n | tail -1 | cut -f2- -d"" """,find recursively the latest modified file in the current directory
"find . -type f -print | sed -e 's/^/""/' -e 's/$/""/' | xargs chmod 644",change permissions to 644 for all regular files in and below the current directory
find $1 -perm -u+r -exec chmod g+r {} \;,find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories
"who -b | awk '{$1=""""; $2=""""; print $0}' | date -f -",print the boot time in standard date format
yes 1 | script -c 'aspell check text.txt' /dev/null,"automatically spell check file ""text.txt"" using ""aspell"" command"
find {} -name 'upvoter-*' -type f -or \( -type l \) -maxdepth 1 -perm +111,find all executable symlinks or upvoter-* files under maximum 1 level down the {} directory
find . -type f \! -iregex '.\|./.git' -exec perl -i -pe 's/$1/$upper2/gi' {} \;,find all files under current directory that match the case insensitive regex .\|./.git and replace all occurrences of the regex $1 (literal) with $upper2 (literal) in these files
find /var -iname \*.log | xargs bzip -,compress .log files in /var and below
"find . -name ""*~"" -delete",delete all files in the current directory tree whose names end with ~
"find -mindepth $i -maxdepth $i ""$@""",find all files/directories in level $i down the current directory with all positional parameters appended with the find command
find . -type d -exec /path/to/script.sh \{} \;,find all directories under current directory and run  /path/to/script.sh for each of them
cat datafile | rev | cut -d '/' -f 2 | rev,print only second from the end field from slash-separated string in file 'datafile'
alias pwd='echo -n `pwd` | pbcopy',"set alias ""pwd"" for command ""echo -n `pwd` | pbcopy"""
find / -group root | head,find all files that belongs to group 'root' under / directory and show a few lines of output from the beginning
exit 1,exits from script with exit code 1.
find . -name 'cmn-*.flac' -print | grep -P '[\x4e00-\x9fa5]',"find all "".flac"" files starting with ""cmn-"" and search for files having cjk characters using unicodes"
find . -maxdepth 1 -type f -exec rm -f {} \;,force delete all the regular/normal files in the current folder and do not search in the sub folders
"find -name ""*\ *.txt"" | xargs rm",remove all .txt files with spaces in names in and below the current directory
read -n10 -e VAR,"read the first 10 characters from standard input in an interactive shell into variable ""var"""
echo $path | rev | cut -d'/' -f4- | rev,remove the last two components (directories) of $path
sudo find /home/user/Series/ -iname sample -exec rm {} \;,delete all files named 'sample' (case insensitive) under '/home/user/series' directory tree with superuser privilege
split,split standard input into files of at most 1000 lines each
jobs -x echo %1,get a pid of a process
find ./ -regex '.*\..*',search for files in current folder using regular expressions
"echo $MOUNT_OPTS | tr , \\\n | grep '^acl$' -q","replace commas (',') with newlines in $mount_opts and search for the regex '^acl$'"
find . -name .vendor -prune -o -name '*.rb' -print,search the current directory tree for .rb files ignoring .vendor directories
sort <(ls one) <(ls two) | uniq -u,"list files in directory ""one"" and ""two"" that do not exist in the other"
"find /path/to/files/* -printf ""%TY%Tm%Td%TH%TM%TS|%p|%l"" -exec stat -Lc ""|%y"" {} \; | sed -r ""s/(.*\|)([0-9]{4})\-([0-9]{2})\-([0-9]{2}) ([0-9]{2})\:([0-9]{2})\:([0-9]{2}\.[0-9]{9}).*/\1\2\3\4\5\6\7/g""","find all files/directories under /path/to/files/* paths and print the timestamp in ymdhms format along with their paths and object of symlinks, stat them and apply the sed replacement ""s/(.*\|)([0-9]{4})\-([0-9]{2})\-([0-9]{2}) ([0-9]{2})\:([0-9]{2})\:([0-9]{2}\.[0-9]{9}).*/\1\2\3\4\5\6\7/g"" on the output"
read -s -N 1 SELECT,"silently read exactly 1 character ignoring any delimiters  into variable ""select"""
find . -type f -wholename \*.mbox,list regular files ending in .mbox
"find ./ -name ""* *"" -type f -d 1 | perl -ple '$file = $_; $file =~ s/\s+/_/g; rename($_, $file);'",find all files under  current directory and rename them by replacing all white spaces with _
"dirname ""$(readlink -f ""$0"")""",print source directory of bash script
"find /volume1/uploads -name ""*.mkv"" -exec mv \{\} \{\}.avi \;",add '.avi' extension to all files/directories with '.mkv' extension under '/volume1/uploads' directory tree
find / -links +2 -print,serach  in root directory all files which  have more than 2 links.
ssh -N -L 2222:remote.example.com:22 bridge.example.com&,"create a ssh tunnel on local port 2222 through ""bridge.example.com"" to ""remote.example.com"" port 22 without executing any commands and run in the background"
find . -name '*.php' -type f | xargs wc -l | sort -nr,"counts lines in each *.php file, sorted by number of lines, descending."
find . -maxdepth 1 -type f -name '.*' -exec basename {} \;,print the names of all hidden regular files from the current directory
od -t fD,display a dump of standard input as floating point values of double size
find . \( -name omit-directory -prune \) -o \( -type f -print \),search the current directory tree for regular files omitting directory `omit-directory'
"column <<< ""$(printf '%s\n' $module)""","print variable ""$module"" in formatted columns"
find /home -depth -print | cpio -ov -0 /dev/rmt0 | tee -a tape.log,create a backup of all the files in the home folder on a partition and save the log to a file
alias webshare='python -m SimpleHTTPServer',"set alias ""webshare"" for command 'python -m simplehttpserver'"
find . -size +10M -exec ls -ld {} \;,list all files under current directory that are greater than 10mb in size
printf $(pwd) | pbcopy,"puts working directory into clipboard, stripping newlines"
mount -L WHITE /mnt/WHITE -o rw,"mount partition with label ""white"" on ""/mnt/white"" with read and write permission"
"sed 's/,,/, ,/g;s/,,/, ,/g' data.csv | column -s, -t","replace "",,"" with "", ,"" twice in ""data.csv"" and display the "","" delimited result as a table"
"find /etc -name ""*.conf"" -mmin -30",find all files with '.conf' extension under '/etc' directory tree that have been modified in the last 30 minutes
find . -type f -print -delete,delete all the normal/regular files in the current folder
find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \;,"create a symbolic link in ""/bar/tmp/"" for each file in directory ""/foo"" that does not start with ""runscript"""
who | wc -l,count the number of users logged in
find . -path '*/.svn*' -prune -o -print,print the list of files in the current directory tree skipping svn files
"find / -iname ""*.mp3"" -print",find all the mp3 files in the file system
"seq 1 100000 | sed -n '10000,10010p'","print lines 10000 to 10010 from input ""seq 1 100000"""
"find ./ -iname ""*.bz2"" -exec bzip2 -d {} \;",recursively finds all bzip2 compressed files in a current folder and decompresses them.
"tr -cd "";0-9""","remove all characters except "";"" and digits from standard input"
ls -l | tail -n +2 | head -n1,"print the second line of output of ""ls -l"""
"rename -v 's#/file##' v_{1,2,3}/file.txt","rename ""file.txt"" in directories ""v_1"", ""v_2"", and ""v_3"" each to ""v_1.txt"", ""v_2.txt"", and ""v_3.txt"" respectively and print the conversion"
"echo ""$COMMANDS""$'\n'""$ALIASES"" | sort -u",prints only unique strings of those stored in variables $commands and $aliases.
find /home -size 10M,find all the files in the folder /home which are exactly of size 10mb
finger | sed 's/^\([^ ]*\) *\([^ ]*\) *pts[^A-Z]*\([^(]*\).*/\2\t(\1)\t\3/',display users who are currently logged in
find . | grep -v xml | xargs rm -rf {},force delete all the files in the current folder expect xml files
find . -name '*.java' -exec grep REGEX {} \;,find all java files in the current folder and search for the pattern regex
find / -name Chapter1 -type f,"searches through the root filesystem (""/"") for the file named chapter1, and prints the location"
crontab -u apache -l,"list the entire cron job list of user ""apache""."
join -v1 success.txt fail.txt,output success.txt omitting lines whose first field appears in fail.txt - lines in fail.txt must appear in the same order as they do in success.txt.
"find . -name ""*.php"" | xargs grep -v -c '^$' | awk 'BEGIN {FS="":""} { cnt = cnt + $2} END {print cnt}'",counts sum of non-empty lines from all .php files in a current folder.
find /some/path -type f ! -perm -111 -ls,find files under /some/path that are not executable
"ifconfig | grep ""inet addr:"" | grep -v ""127.0.0.1"" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'  | head -1",gets all ip addresses from host network configuration and prints first one.
"find /home/folder1/*.txt -type f | awk -F '.txt' '{printf ""ln -s %s %s_CUSTOM_TEXT.txt\n"", $0, $1}'",print out ln commands for each file in /home/folder1/*.txt that can be run to create symlinks appending '_custom_text.txt' in their names
find /tmp/ -ctime -1 -name x*,find x* files/directories under /tmp directory whose status was changed less than 1 day ago
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort | uniq -c | sort -n,print a sorted list of the extensions of the regular files from the current directory tree with counts per extension
find . -size -26c -size +23c -exec ls -l '{}' \;,display long listing of all files in the current directory whose size is 24 or 25 bytes (doesnt display inode information) .
tree -L 2 -fi,list all files 2 levels deep in the current directory tree
"info gcc ""option index""","open gcc info manual and select ""option index"" menu entry."
"find ./lib/app -type f | sort | xargs awk 'ENDFILE {print """"} {print}' > myFile","find all files under ./lib/app and sort them, then print their contents to myfile"
timestamp=`date --rfc-3339=seconds`,represent current date in rfc 3339 format with precision to seconds and save it to 'timestamp' variable
"find /home -type f -name ""*.ext"" -exec perl -pi -e 's/\r//g' {} \;","remove the ""^m"" characters from all *.ext files under /home directory"
find -name '*my key phrase*' > mylist.txt,find all files/directories with 'my key phrase' in their names under current directory and redirect the output to mylist.txt
"results=$(groups ""$line"" | tr ' ' '\n' | egrep -v ""_unknown|sciences|everyone|netaccounts"")","save list of groups which user $line belongs to and not matching pattern ""_unknown|sciences|everyone|netaccounts"" in 'results' variable"
full_backup_dir=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print),find all files in current directory that were modified less than 1 day ago excluding hidden files and put the output to full_backup_dir variable
watch -n 5 -c 'tail -f -n 50 mylogfile.txt | ccze',execute 'tail -f -n 50 mylogfile.txt | ccze' every 5 seconds and display with color support
find . -name secret -type d -prune -o -print,display all the directories in the current folder excluding those that are present in the folder secret
find . -iname '*.cpp' -print,find all the cpp files in the current folder
"find . -iname ""*.mov"" -print0 | xargs -0 -i sh -c 'ffmpeg -i {} -f flv `basename {}`'",find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file
find /var -iname \*.log -exec bzip {} \;,compress .log files in /var and below on an individual basis
find /your/target/path/ -type f -exec rename 's/special/regular/' '{}' \;,"recursively rename all files under /your/target/path replacing 'special' with 'regular' - all file/diretory names may not include spaces, and directory names containing such files may not contain the word 'special' in their name."
find -name file -ls,display a long listing of all files/directories named 'file' under current directory tree
find ~ -name 'arrow*',"display all the files in the home folder which begin with ""arrow"""
find . -perm 600 -print | xargs chmod 666,"add read,write permissions to all the files in the current folder which have the permission 600"
yes ok | recalcitrant.php,"continuously send ""ok"" plus newline to the program ""recalcitrant.php"""
"find /usr /bin /sbin /opt -name ""$1*"" -type f -ls","list all regular files matching the name pattern ""$1*"" (where $1 is a positional parameter) under '/usr', '/bin', '/sbin' and '/opt' directory tree"
set -o,print current shell settings
find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'echo mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \;,show mv commands to move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}
"find -name ""test"" -type d -delete","remove all directories called ""test"" from the current directory tree"
source=`mktemp`,creates temporary file in default folder and saves path to it in 'source' variable.
gzip */*.txt,"compress all "".txt"" files in all sub directories with gzip"
"grep foo `find /usr/src/linux -name ""*.html""`",search for the string 'foo' in *.html files under /usr/src/linux directory
find . -name '*.pdf' -print0 | xargs -0 -n1 -I '{}' pdftotext '{}' -,print out all .pdf files from the current directory tree as plain text on the standard output
"md5sum *.txt | sort | perl -ne '($y,$f)=split; print ""$f\n"" unless $y eq $x; $x=$y'","list all "".txt"" files with a unique md5 hash"
find ~/code -type d | tr '\n' ':' | sed 's/:$//',find all directories under ~/code and replace all newlines with : in the output then remove the last :
"alias rm1g=""find / -type f -name *.tar -size +1G -exec rm -i {} \;""",assign the alias rm1g to a find command that removes any .tar file larger than a gigabyte.
find . -type f -exec grep -i “redeem reward” {} \; -print 2>/dev/null,"search for the word ""redeem reward"" in all the regular/normal files in the current folder and discard all the errors"
find . -type f -iname '*.cpp' -exec mv -t ./test/ {} \+,"move all files matching case insensitive "".cpp"" in the current directory tree to ""./test/"""
find / -type f -exec grep -Hi 'the brown dog' {} +,search for a word in all the files in the entire filesystem and display the matched fline along with the file name
sudo chmod -R 777 theDirectory/,"recursively change all permissions under ""thedirectory/"" to 777(read,write,execute for all users)"
"source <( grep ""marker"" config.sh )","interpret in the current shell all lines in config.sh which contain the word ""marker"""
"find . -name ""*.dat"" -type f -cmin +60 | grep ""^./[^/]\+dat"" | sed ""s/^.\///""",find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension
shift [n],shifts the positional parameters to the left by n.
find . -name *.cpp -o -name *.h -o -name *.java,"find all the cpp(c++ source files), java, header files in the current directory"
find / -name '*.pdf',search for .pdf files
sleep 100 | sleep 200 &,start 2 sleep processes in the background
find / -mtime +50 –mtime -100,find all the files in file system which are modified more than 50 days back and less than 100 days
"echo ""$line"" | column -t","format ""$line"" as a table"
find . -mtime -14 -print,display all the files in the current folder which have been modified in the last 14*24 hours
"find . -maxdepth 1 | grep -v ""exclude these"" | xargs rm -r","remove everything in the current directory except files matching regular expression ""exclude these"""
find . -exec wc -l {} \;,display the number of lines in all the files in the current folder
find xargstest/ -name 'file??' | sort | xargs wc -l,count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'
cat `find . -name aaa.txt`,find all files named 'aaa.txt' under current directory tree and display their contents
find /home/family/Music -name '*.m4a' -print0,find all *.m4a files/directories under /home/family/music directory
find . -type f -iname *.mp3,find all .mp3 files starting from the current directory
brew link bash-completion,symlinks all of formula’s installed files into the homebrew prefix.
find /stuff -type d -exec script.py {} +,search for all the directories in a folder and give them as input to the python script
exit,exits from screen session.
rm -r classes,"recursively removes 'classes' folder, prompting user on each deletion."
find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -print0 | grep -vzZ generated | grep -vzZ deploy | xargs -0 ls -1Ld,"list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names excluding the files that contain 'generated' or 'deploy' in their paths"
find . -mindepth 2 -maxdepth 2 -type d -ls,list level 2 subdirectories of the current directory
Prints what month it was 222 days ago,"date --date=""222 days ago"" +""%m"""
mkdir /etc/cron.minute,"make directory ""/etc/cron.minute"""
find -exec some_script {} \;,"execute ""some_script"" on all files in the current directory tree"
find /root/directory/to/search -name 'filename.*',find all filename.* files/directories under /root/directory/to/search
sudo mount -a,mount all filesystems in /etc/fstab
sudo rsync -pgodt /home/ /newhome/,error - probably means -pgodt (capital d)
rsync -avz --chmod=o-rwx -p tata/ tata2/,"copy recursively ""tata/"" to ""tata2/"" and remove read, write, and execute permission for other"
find / -name .ssh* -print | tee -a ssh-stuff,find files matching `.ssh*' and append their anmes to file `ssh-stuff'
"ls -m | tr -d ' ' | tr ',' ';'","list all files in a current folder, separating names with semicolon"
tail -r myfile.txt,"reverse the order of lines in ""myfile.txt"" using bsd ""tail"" command"
"find /path/to/dir -type f -exec sed '/@GROUP/,/@END_GROUP/!d' {} \; | grep '_START'","search regular files from the /path/to/dir directory tree for lines that contain ""_start"" and are enclosed in lines ""@group"" and ""@end_group"""
"pushd ""${line/#\~/$HOME}"";","pushes directory path that saved in $line variable to the dirs stack, expanding symbol '~', if present, as home folder path."
cd $(dirname $(which $0) ),change directory to the directory containing the current script
HOST=$(hostname),"save the system host name into variable ""host"""
find . -name '.git' | xargs -n 1 dirname,"prints list of folders containing '.git', searching recursively from a current folder."
bzip2 -dc xac.bz2,"decompresses file 'xac.bz2', redirecting output to standard out."
"sudo mount -t cifs -o username=me,password=mine //192.168.0.111/serv_share /mnt/my_share","mount remote ""cifs"" filesystem ""//192.168.0.111/serv_share"" on ""/mnt/my_share"" with username ""me"" and password ""mine"""
"find . -exec echo -n '""{}"" ' \;",find all the files in the current folder and display adding quotations to each file
find ~/Music/ -maxdepth 2 -mindepth 2 -type d | sort,print a sorted list of the subdirectories of ~/music
"find -name ""*testfile*""","locate all files in the current directory and below that have ""testfile"" in their names"
"echo ""dirname: `dirname $0`""",prints folder where current script is located
"tree -afispugD --inodes | awk '{FS=""./""; ORS=""""; printf(""%-60s%s\n"",$NF,$0)}'","print inode, permissions, size, and modification date of all files in the current directory tree as a list with an extra column prepended"
find . -name *.xml -print0 | xargs -n 1 -0 invalid_command,find all the files with the extension .xml and print them in a single line and check for the validity of a command by giving the file as input
find . -type f -name '*.html',find all *.html files under current directory
awk '{s+=$1} END {print s}' mydatafile,"file 'mydatafile' has a number on each line, display the sum of these numbers."
find $PWD -type d,find all directories under present working directory
find . -maxdepth 1 -type f -print0 | xargs rm -f,force delete all the regular/normal files in the current folder and do not search in the sub folders   (print0 is used to handle files which have newlines in their names or files with the name only as spaces )
"find /home/jassi/ -name ""aliencoders.[0-9]+""",find all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
diff --old-line-format '%L' --new-line-format '' --unchanged-line-format ''  <(nl File-out) <(nl File-Reference),"print specific lines in ""file-out"" that do not match ""file-reference"" to standard output"
find /working -type f -name '*.mp4',find all *.mp4 files under /working
"join -o 1.2,1.3,2.4,2.5,1.4 <(cat -n file1) <(cat -n file2)","join strings from 'file1' and 'file2', discarding excessive strings from largest file, and printing first, second and third space-separated field from first file, and third and fourth field from second file as a join result"
chgrp -R $GROUP $PATH_TO_OUTPUT_FOLDER,recursively changes group ownership of the $path_to_output_folder directory to $group group.
find . -type f | xargs chown username,change the ownership of all regular/normal files in the current directory
time cut -f50000000 -d$'\n' myfile.ascii,"print time required to get line number 50000000 from text file ""myfile.ascii""."
"find ""/tmp/1/"" -iname ""*.txt"" | sed 's/[0-9A-Za-z]*\.txt//g",find all the text files in the folder /tmp/1 and display only those files which have spaces in their names
find . -type l -name link1,"search the current directory tree for symbolic links named ""link1"""
"find . -type f | xargs grep -l ""textToSearch"" | cpio -pV $destination_path","copy all files in the current directory tree matching ""texttosearch"" to ""$destination_path"""
comm -23 <(sort subset | uniq) <(sort set | uniq) | head -1,"check if the contents of file ""subset"" is a subset of file ""set"""
pstree -p 1782 | sed 's/-/\n/g' | sed -n -e 's/.*(\([0-9]\+\)).*/\1/p',lists the pids of all processes that have process '1782' as their parent.
"mkdir Labs/lab4a/{folder1,myfolder,foofolder}","make directories ""labs/lab4a/folder1"", ""labs/lab4a/myfolder"", and ""labs/lab4a/foofolder"""
find -name file -delete,delete all files/directories named 'file' under current directory tree
find $d -maxdepth 1 -perm -100 -type f | sed 's#.*/##',find all files under $d directory (no sub-directories) that are executable by owner and print only their names
find . -name test -prune -o -print,display all files in the current folder with the name test excluding those that are present folder test
"find . -type d -name ""build*"" | sort -r",find all build* directories under current directory and reverse sort them
find -print | xargs -d'\n',find all files/directories under current directory and print them with newline as the delimiter
"for i in `find .  -not \( -name ""*\.jpg"" \) -path './bookshop/mediaimg' -prune -o -path '*/CVS*' -prune -o  -path './files' -prune  -o -path './images/cms' -prune -o -path './internal' -prune -o -path './limesurvey171plus_build5638' -prune  -o -path './gallery2' -prune -o  -print  `; do cvs status  ""$i"" |grep Status ; done &>~/output.txt","find all files/directories under current directory without descending into './bookshop/mediaimg', '*/cvs*', './files', './images/cms', './internal', './limesurvey171plus_build5638' and './gallery2' paths, then run cvs command with 'status' and each path as arguments and redirect the output to output.txt fle"
sudo find /path/to/Dir -type f -print0 | xargs -0 sudo chmod 644,find all files under /path/to/dir and set their permission to 644
find . -name '*.py' | xargs perl script.pl,find all *.py files under current directory and run 'perl script.pl' with the file paths as arguments
grep -f file2 file1 | sort -u,"search ""file1"" for lines matching regex patterns listed in ""file2"" and list the unique results (sorted alphabetically)"
find . -type f -atime -7,display all regular/normal files in the current folder which are accessed in the last 7*24 hours
scp -v /my_folder/my_file.xml user@server_b:/my_new_folder/,"connect to host ""server_b"" as ssh user ""user"" and copy local file ""/my_folder/my_file.xml"" to server_b's directory ""/my_new_folder/""."
find . -type d -exec chmod 0755 {} \;,change the permission to 0755 for all directories under current directory
cat /proc/17709/cmdline | xargs -0 echo,print command line of process with pid 17709
find dirname -exec grep foo {} +,"search the files from directory tree ""dirname"" for string ""foo"""
cat files.txt | xargs du -c | tail -1 | awk '{print $1}',"print the total disk usage in bytes of all files listed in ""files.txt"""
ps aux | tr -s '[:blank:]' | cut -d' ' -f3,print a column of cpu usage numbers
"find . -name modules -exec sh -c 'exit $(find {} -name modules|grep -n """"|tail -n1|cut -d: -f1)' \;",find a file/directory named modules under current directory and exit with the number of files/directories named 'modules'  found in this path
"find / -name ""*.md"" -type f -exec sh -c 'markdown ""$0"" > ""$0.html""' {} \;",convert all markdown files on the system to html
shopt -u nullglob,disables shell option 'nullglob'.
pstree $(pgrep -fn bash),prints process tree of a bash process.
"find ./ -name '*.log' | xargs -I{} sh -c ""if [ -f {}.gz ]; then rm {}; fi""",remove all *.log files from the current directory tree that have been gzipped
find . -type f -executable -print,search the current directory tree for executable files
tmux movew -r,renumbers all windows in the session in sequential order.
find . -daystart -ctime 0 -type f,find all the files that were modified yesterday in the current directory.
mkdir /tmp/googleTestMock,"make directory ""/tmp/googletestmock"""
find . -type f -ctime $FTIME,search the current directory tree for regular files that were changed $ftime days ago
echo `clear`,clears terminal screen.
"awk 'NR==FNR{m[$1]=$2"" ""$3; next} {print $0, m[$1]}' file2 file1 | column -t","join columns in ""file1"" and ""file2"" if their first field matches and format the output as a table"
"find ./ -type f -exec grep -Hn ""Text To Find"" {} \;",search for 'text to find' in all regular files under current directory tree and show the matched files and matched lines with line numbers
"find . -name ""*_test.rb"" | xargs rename s/_test/_spec/","recursively search for all files with names ending with ""_test.rb"", renaming them to end with ""_spec.rb""."
md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1,find '.java' files with checksum 0bee89b07a248e27c83fc3d5951213c1 in the current directory
find ./ -mtime -3,find all the files in the current folder that have been modified in the last 24*3 hours
find . -mindepth 2 -maxdepth 2 -type d -printf '%M %u %g %p\n',list level 2 subdirectories of the current directory
find . -type f -name '*.php' -exec grep -Hcm2 '[^[:space:]]' {} + | sed -n '/:1$/{s///;p}',find all php files under current directory that contain only one non-blank line
sed -e '{:q;N;s/\n/ /g;t q}' file,"replace all newlines with spaces in the contents of ""file"""
find / -nouser -exec rm {} \;,remove files from the file system that are owned by nobody
alias current='cd $(cur -g)',"set alias ""current"" for command 'cd $(cur -g)'"
ifconfig eth0 down,brings down network interface eth0.
bind -r '\e',remove esc key bind
ls | xargs -i mv {} unix_{},"prefix all files and directories in the current directory with ""unix_"""
find -group compta,find all files/directories under current directory tree that belong to the group 'compta'
find /var/log/ -mmin +60,find files in the /var/log folder which were modified an hour or more ago
find . -type f -amin +10,display all the regular/normal files in the current folder that are not accessed in the last 10 minutes
"find /etc /srv \! -path ""./srv/tftp/pxelinux.cfg*"" -a \! -name /etc/mtab",display all the files in the folder /etc /srv excluding those that are present in the path of ./srv/tftp/pxelinux.cfg* and /etc/mtab
find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures,find image files and move them to the pictures directory
find / -name '<name_pattern>' | perl -pe 's/(.*\/).*$/$1/' | sort | uniq,find all files/directories in entire file system that match the pattern '<name_pattern>' in their names and print a sorted list of their unique parent directory paths
"find /var/www/vhosts/*/httpdocs/ -type f -iwholename ""*/modules/system/system.info"" -exec grep -H ""version = \"""" {} \;",identify cms version/releases accross all your drupal websites
find -name '*.undo' -exec wc -c {} + | tail -n 1,search all undo files(ending with .undo) in the current folder and calculate the total size of them
cat ips | xargs echo ping -c 2,"print ""echo ping -c 2"" on each string in file 'ips'"
chown :friends myfile,"change the group of ""myfile"" to ""friends"""
"ssh -x remoteServer ""cd yourRemoteDir; ./yourRemoteScript.sh </dev/null >/dev/null 2>&1 & ""","disable x11 forwarding and execute ""cd yourremotedir; ./yourremotescript.sh </dev/null >/dev/null 2>&1"" in the background on ""remoteserver"""
"find `pwd` -name ""*.log"" > sas_log_list.txt",save the list of .log files in the current directory tree to sas_log_list.txt
"find ./ -name ""*.php"" -type f | xargs sed -i 's#<?php /\*\*/ eval(base64_decode(""aWY.*?>##g'  2>&1","find all php files in current directory and delete text matching the regex '<?php /\*\*/ eval(base64_decode(""awy.*?>' in those files"
who | grep -e '^ab' -e '1$',"find users whose names begin with ""ab"" or whose terminal from which they are logged in ends with ""1"""
jobs -lp,list pid of a group leader
top -bn1 | grep zombie,display information about number of processes in various states.
find / -name file,"find the file with the name ""file"" in the entire file system"
echo $(basename $(readlink -nf $0)),print symlink resolved script file name
"sed -i ""15i `hostname`"" test.html","insert the current host name on line 15 of ""test.html"""
"find /home ! -group test -printf ""%p:%g\n""",display all the files along with their group name in the folder /home which do not belong to the group test
"find . -type f -printf ""%f\n"" -name ""*.jar"" | sort -f | uniq -i -d","find all duplicate "".jar"" files in the current directory tree"
reads=$(zcat $file.fastq),"store content of uncompressed file ""$file.fastq"" in variable ""reads"""
echo {1..9}: 10 | tr -d ' ',print 1 to 10 by separating them with colon (':')
"find ""$DIR"" -type f -exec grep ""$SEARCH"" {} \;",search for the regex expaned by the variable $search in all regular files under $dir directory tree
"find /path -type f -iname ""*.ext"" -printf ""%h\n""",list the directory paths of all *.ext (case insensitive) files under /path directory
sed '/pattern to match/d' ./infile,"remove the line matching ""pattern to match"" in ""./infile"" and print to standard output"
"find . -name ""*.[!r]*"" -exec grep -i -l ""search for me"" {} \;",search for case insensitive pattern 'search for me' in all files that match the name pattern '*.[!r]*' under current directory tree
find . -depth -empty -type d,list empty directories in the current directory tree
find -mindepth 3 -type d ! -path '*/p/*' -name c -print,"find all the directories  with the name ""c"" in the current folder which are at least 3 levels deep and which are not present in the path ""/p/""."
paste -sd+ filename | bc,"mathematically add each line in ""filename"""
"pstree -p 20238 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr ""\n"" ,","prints all child processes of a process with id 20238, separated with comma."
grep -of ignore.txt input.txt | sort | uniq -c,"search ""input.txt"" for regex patterns only matching those listed in ""ignore.txt"", list the unique lines and prefix with the number of occurrences"
ls -d $PWD/*,prints full path to files in a current folder.
"find . | grep -v ""\.png$"" | grep -v ""\.class$"" | vim -","make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor"
tmux list-sessions,lists tmux sessions.
find /some/directory -type f -exec file -N -i -- {} + | sed -n 's!: video/[^:]*$!!p',print the names of all files in /some/directory and its subdirectories recursively whose mime type is video
"cd ""~""","go to directory named ""~"" (not home directory)"
find . -name '*.pdf' -exec rm -f {} \;,recursively finds all '*.pdf' files in a current folder and removes them without prompting.
"find /your/path/ -type f -name ""*.html"" | xargs zip all_html_files.zip",search for all html files in a folder and create a zip file of all these files
dig @ns1.hosangit.com djzah.com +noall +authority +comments | awk -f script.awk,"request authority info with comments for 'djzah.com' from name server 'ns1.hosangit.com', and pass it to 'script.awk' awk script."
"unset `printenv |grep G4 |awk 'BEGIN{FS=""="";}{printf(""%s "",$1);}'`",unsets all environment variables with 'g4' in name.
wc `find | grep .php$`,"print line, word and byte counts for each .php files in current directory tree and also show the total counts"
zcat large_file.gz | largesplitter,"send uncompressed contents of ""large_file.gz"" to ""largesplitter"""
find / -atime 50,find all the files in entire file system  which are accessed 50 days back
find . -name foo_fn exec sed -i s/foo_fn/bar_fn/g '{}' \;,"replace all occurrences of ""foo_fn"" with ""bar_fn"" in the files named ""foo_fn"" from the current directory tree"
"find . -regex "".*/(test)[0-9][0-9]\.txt""",find all files/directories under current directory tree whose names start with '(test)' followed by two digits and end with '.txt' extension
"find . -maxdepth 1 -type f -iname '*[aeiouy]*' -printf "".\n"" | wc -l",count the number of regular files in the current directory that contain a vowel in their names
find . -name Root | xargs cp newRoot,find all files/directories named root under current directory and copy them to newroot
diff  --brief --recursive dir1/ dir2/,"print summary of new/missing files, and which files differ between dir1 and dir2."
ifconfig eth0 | grep HWaddr,gets string with mac addess of network interface eth0.
ping -c 25 google.com | tee >(split -d -b 100000 - /home/user/myLogFile.log),"print and save the ping results of 25 requests to ""google.com"" in ""/home/user/mylogfile.log"" containing at most 100000 bytes"
printf Aa | od -t x1,"print a hex dump byte to byte of the output of ""printf aa"""
find . -newer some_file,find all files in the current directory tree that are newer than some_file
myscript.rb `hostname -i` file.txt,"execute ""myscript.rb"" with the first argument as the current host name and the second ""file.txt"""
"ps | tail -n 4 | sed -E '2,$d;s/.* (.*)/\1/'",print the current shell
sed -i s/'dummyvalue'/$(hostname -I | head -n1 | awk '{print $1;}')/g filename,"replace ""dummyvalue"" with the system ip address in ""filename"""
find /etc -ctime -1,find all files in etc which have been changed in the last 25 hours
echo 'hi' | od -c,"dump the character output of ""echo 'hi'"""
find /usr/bin | xargs file,show file type information for files in /usr/bin
split -l 100 input_file output_file,"split ""input_file"" into files of at most 100 lines each with prefix ""output_file"""
"time find /usr/src -name ""*.html"" | xargs grep -l ""foo"" | wc -l","measure the execution time of the command: find /usr/src -name ""*.html"" | xargs grep -l ""foo"" | wc -l"
"find / -user edwarda -ok rm ""{}"" \;",delete all the files in the file system which belong to the user edwarda after user confirmation
"find /path/to/dir -type d | tac | while read LINE; do target=$(dirname ""$LINE"")/$(basename ""$LINE"" | tr -d ' '); echo mv ""$LINE"" ""$target""; done",remove spaces recursively from all subdirectories under current directory
"find ~/junk   -name ""*"" -exec ls -l {} \;",list all non-hidden files in ~/junk
comm -13 first.txt second.txt,"print unique lines of sorted file ""second.txt"" compared to sorted file ""first.txt"""
readelf -a -W libsomefile.a | grep Class: | sort | uniq,"check the bit width of static library ""libsomefile.a"""
sudo mv phantomjs-1.8.1-linux-x86_64.tar.bz2 /usr/local/share/.,"move ""phantomjs-1.8.1-linux-x86_64.tar.bz2"" to ""/usr/local/share/"" directory"
find / -user roger -print,"find all the files in the entire file system which belong to the user ""roger"""
find /home/bluher -name \*.java,list all *.java files/directories under /home/bluher with their full paths
"find / -iname ""testfile.txt""",search the system for the file “testfile.txt” ignoring the case
find . -name *.bar -maxdepth 2 -print,find all files/directories with '.bar' extension in maximum 2 levels down the current directory
sed -i bak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html,"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in file ""index.html"" and make a backup with suffix ""bak"" on osx"
"read -r -n 1 -p ""${1:-Continue?} [y/n]: "" REPLY","read a single character from standard input into variable ""reply"" ignoring backslash escapes and using the prompt ""${1:-continue?} [y/n]: """
"find . -name ""*.php"" -print","find all files recursively which end in "".php"""
find . -name omit-directory -prune -o -type f,search the current directory tree for regular files omitting directory `omit-directory'
find $FILES_PATH -type f,display all the regular/normal files in a folder
"grep -rnw `pwd` -e ""pattern""","recursively finds all files with whole word ""pattern"" in a current folder, and precedes found string with its number in file."
"find . -type f | sed 's/.*/""&""/' | xargs ls -E | awk '{ print $6,"" "",$7 }' | sort | tail -1",find recursively the latest modified file in the current directory
find / -atime 0,find all files in the file system which have been accessed in the last 24 hours
"find /res/values-en-rUS /res/xml -iname '*.xml' -print0 | xargs -0 -d '\n' -- grep -i ""hovering_msg"" --","search the xml files from directories /res/values-en-rus and /res/xml for string ""hovering_msg"""
"sudo mount -t vfat -o rw,auto,user,fmask=0000,dmask=0000 /dev/sda7 /mnt/my_partition","mount ""vfat"" filesystem ""/dev/sda7"" to ""/mnt/my_partition"" with read and write permission, umask of files and directories set to ""0000"", and save in fstab and allow ordinary users to mount"
find . -name *.txt -exec ls {} ;\,list *.txt files residing in the current directory tree
bash myscript.sh 2>&1 | tee output.log,"write output and error of ""bash myscript.sh"" to standard output and to ""output.log"""
find / -nouser -exec rm {}\;,delete all the files in the current folder  which do not belong to any user
"top -p ""$(pgrep ProgramName | head -n 1)""",use 'top' to monitor the newest instance of programname.
"find /usr/sbin /usr/bin -lname ""*/systemctl""","find symbolic links in /usr/sbin and /usr/bin to files whose pathnames end in ""*/systemctl"""
sort -u set1 set2,"sort lines in ""set1"" and ""set2"" to standard output preserving only unique lines"
read -n 1 -r,"read one character from standard input into variable ""reply"""
find /home -type f -size +100M -delete,locating large files (> 100 mb) in /home/ for 'cleaning'
find ~ -iname '*.jpg' -exec ls {} \;,display a long list of all the jpg files in the home folder
"finalName=$(basename -- ""$(dirname -- ""$path"")"")",removes first and last parts of path $path and saves the result in 'finalname' variable.
sudo rm /var/lib/mongodb/mongod.lock,removes '/var/lib/mongodb/mongod.lock' in 'sudo' mode.
awk '{print $1}' file2 | comm -1 -3 file1 - | join file2 -,show all lines in file2 that don't contain the first field of any line in file1.
find . -print0 | xargs -I{} -0 echo {},find all files/directories under current directory and print them
"find . -name somedir -prune , -name bin -prune -o -name ""*.txt"" -print","find all the text files in  the current folder and do not search in somedir, bin directories"
"ln -s ""$ACTUAL_DIR"" ""$SYMLINK""","create a symbolic link named ""$symlink"" to ""$actual_dir"""
ls | xargs -I {} mv {} Unix_{},"prefix all files and directories in the current directory with ""unix_"""
find . -type f -mtime +31 -print0 | xargs -0 -r rm -f,find all the regular files under current directory tree that have not been modified in the last 31 days and delete them
"uniq temp.txt | perl -e 'undef $/; $_ = <>; open(OUT,"">temp.txt""); print OUT;'",rewrite 'temp.txt' omitting any repeating lines
head -<$LINENUM + 10> filename | tail -20,prints +-10 lines around $linenum in filename
"unset $(printenv |grep G4 |awk 'BEGIN{FS=""="";}{print $1;}')",unsets all environment variables with 'g4' in name.
ssh $USERNAME@localhost -L 80:localhost:3000 -N,set up a local ssh tunnel from port 80 to port 3000
"cat file.txt | column -c 28 -s ""\ ""","format ""file.txt"" as space separated columns 28 characters in width"
sleep 5,sleep for 5 seconds
"\time -f ""%E real,%U user,%s sys"" ls -Fs",runs programs and prints formatted summary of system resource usage.
find /opt \( -name error_log -o -name 'access_log' -o -name 'ssl_engine_log' -o -name 'rewrite_log' -o  -name 'catalina.out' \) -size +300000k -a -size -5000000k,"find all the error, access, ssl_engine and rewrite logs which are bigger than 300mb and are less then 5gb in the folder /opt"
mkdir saxon_docs,"make directory ""saxon_docs"""
"cd ""/some/dir"" && find . -type f",change the current working directory to /some/dir and display all normal/regular files
find ~ -size +100M,find all files in your home directory and below that are larger than 100m.
"find -type f -name thumb.png -exec ./deslash.sh {} "";""",run script `deslash.sh' on all thumb.png files in the current directory tree
"cal -h|sed -r ""s/\b$(date|cut -d' ' -f3)\b/*/""","prints calendar for a current month, replacing current data with asterisk."
df -k .,print file system disk space usage in 1 kib blocks of the current directory's file system
find ./machbook -exec chown 184 {} \;,"find all the files in the folder ./machbook and change the owner of them to the user with id ""184"""
cp --parents src/prog.js images/icon.jpg /tmp/package,copies files 'src/prog.js' and 'images/icon.jpg' with fully-defined path to '/tmp/package' directory.
v=5 env|less,"add variable 'v' with value '5' to a temporary environment, list this environment using 'less' to interactively view it."
find . -name FOLDER1 -prune -o -name filename -delete,"remove all files named ""filename"" from the current directory tree, ignoring directory ""folder1"""
find /usr -follow -name '*.sh',"search all the "".sh"" files in the /usr folder and follow the symbolic links to their original file"
"cd ""`xsel`""","go into the directory whose name is selected in the x window system, ie. double-clicked in a terminal window."
compaudit | xargs chmod g-w,"remove group write permission on all files output by ""compaudit"""
find ~/code -type d | sed '/\/\\./d' | tr '\n' ':' | sed 's/:$//',find all directories under ~/code excluding hidden directories and their subdirectories and replace all newlines with : in the output then remove the last :
"find . -name '*.text' -exec sh -c 'if [ ! -f ""$(dirname ""$1"")/$(basename ""$1"" .text)"" ]; then echo == $1; fi' sh {} \;",find all text files which have extra extensions in the current folder
readlink -f PATH,"print absolute path of ""path"""
"find . -name ""*.c"" -print | xargs wc -l","display the number of lines in all the "".c"" files in the current folder"
echo MYVAR | grep -oE '/[^/]+:' | cut -c2- | rev | cut -c2- | rev,print nothing because 'myvar' string doesn`t match with '/[^/]+:' pattern
find . -name '*.gz' | xargs gunzip -vt,find all .gz archives in the current directory tree and check if they are valid
find -mtime +1,find all files under current directory that were modified more than 1 day ago
find –L –xtype l,find all symbolic links under the current folder and below
"ssh $(vagrant ssh-config | awk 'NR>1 {print "" -o ""$1""=""$2}') localhost","ssh into default vagrant host without running ""vagrant ssh"""
find . -depth -type d -mtime 0 -exec mv -t /path/to/target-dir {} +,find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir
find / -path /usr -prune -o \( -name rsync -o -name bash \) -print 2>/dev/null,search for bash and rsync files in the entire file system excluding search in /usr folder and discard all the errors
find ~ -size -300b,find all the files in the home folder which are less than 300bytes
"find . -type d -name 'uploads' | while read d; do chmod -R 755 ""$d""; done","search for the directory ""uploads"" in current folder and change the permission of the folder and all the files to 755"
"tac filename | awk '{for (i=NF; i>1; i--) printf(""%s "",$i); printf(""%s\n"",$1)}'",reverse both words and lines in file
for file in $(find asia emea -name \*.gz -print0 | xargs -0); do echo -n $(basename $file); gunzip -c $file |wc -l; done >> file_count.txt,find all *.gz files under asia and emea directory and print their names and line counts to file_count.txt
find . | xargs -n 1 echo,execute `echo' for each file found
cat file | column -t,"format the contents of ""[file]"" in a neat table"
"find . -type f -exec grep ""applicationX"" {} \;",find all files in the current folder and search for a word in them.
find ~/Music/ -iname 'cover.*' -printf '%h\n' | sort -u,"print a sorted list of directories from the ~/music tree containing files whose names begin with ""cover."""
paste file file2 file3 | sed 's/\t/ /',"print each line in ""file"", ""file2"", and ""file3"" and replace any tabs with spaces"
"date ; read -t 10 -p ""Hit ENTER or wait ten seconds"" ; echo ; date","print the date, then prompt ""hit enter or wait ten seconds"" with a 10 second timeout, then the date again"
find . -name .git -type d -execdir git pull -v ';',"search for the "".git"" folder in the current folder and run the git pull request"
grep 'Nov 12 2012' /path/to/logfile | less,"filter /path/to/logfile for any lines containing the specified date, paging interactively through the output."
env -i,list an empty environment (prints nothing)
"watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\`","execute ""ps -mo pid,tid,%cpu,psr -p \`pgrep firefox\`"" every half second displayed with no title and highlighting the differences"
rsync -av remote_host:'$(find logs -type f -ctime -1)' local_dir,"archive any files changed in the last day from ""remote_host"" to ""local_dir"""
ifconfig -a,"displays information about all network interfaces in system, including inactive ones."
logout,exits from login shell.
ls --color | less -r,interactively page through the color-coded output of 'ls'.
"join -o 1.1,1.2,1.3,1.4 -t, file1.csv file2.txt","for each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv - both files must be sorted first."
find . ! -path *mmm*,"display all the files in the current folder excluding search in the paths containing the folder having the word ""mmm"""
find .cache/chromium/Default/Cache/ -mindepth 1 -type d -size +100M -exec rm -rf {} \;,delete all directories under '.cache/chromium/default/cache/' directory tree that are bigger than 100mb and are at least 1 level deep
"rm `du * | awk '$1 == ""0"" {print $2}'`",find and delete all files with a used disk size of 0
grep -v '^$' YOURFILE | nl -s= -w99 | tr -s ' ' p,"replace each non-blank line in ""yourfile"" preceded with ""px="" where ""x"" is the line number"
"read -e -p ""Do that? [Y,n]"" -i Y input","read a line from standard input in an interactive shell into variable ""input"" with prompt ""do that? [y,n]"" and suggestion ""y"""
"find ""$FOLDER"" -mindepth 1 | sort",find all files/directories under minimum 1 level down the $folder directory and sort them
find . -name *.txt -print,find all *.txt files/directories under current directory
"top -p $(pgrep -d',' http)",monitor all processes whose command contains 'http'.
grep -ar -e . /your/dir | md5sum | cut -c-32,"calculate the md5 sum of all files in ""/your/dir"" including content and filenames"
gunzip $empty_variable,"unzip file ""$empty_variable"""
find -perm 664,find all files/directories with 664 permission under current directory tree
"basename ""`pwd`""",print the base name of the current working directory
"rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*","recursively removes all files and folders that match pattern '/usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*'"
"find /etc/ -type f -name ""*.conf"" -print0 | xargs -I {} -0 grep ""nameserver"" ""{}""","search for the word ""nameserver"" in all the configuration files of the /etc folder"
find . -type f -print,find all files under current directory
"ssh-keygen -t rsa -C ""$APP"" -N ""$SSHKEYPASS"" -f ~/.ssh/id_rsa",create a rsa key with comment specified by variable app and passphrase specified y sshkeypass.
find . -name '*.sql' -print0,find all .sql files in the current directory recursively and print their path names separated by zeroes
"set | grep "" () $"" | cut -d' ' -f1",list all functions defined in the shell
"find . -name ""*.c"" | xargs rm -f",delete all the .c files present in the current directory and below
find / -nouser -o  -nogroup,find files that do not have a listing in the /etc/passwd or /etc/group in the file system
ls -l | more,"display a detailed listing of the current directory, pausing for user input after each page."
find . -type f -printf '%f ' -exec openssl dgst -md5 {} \;,find all files under current directory and print their md5 sums
"screen -S SessionName -p 0 -X title ""remote_0""",set a title of a remote screen session
find -L -maxdepth 1 -name 'upvoter-*' -type f -perm /111,find all executable upvoter-* files (following symlinks) under maximum 1 level down the current directory
yes '| COUNTRY' | sed $(wc -l < file)q | paste -d ' ' file -,"append "" | country"" to every line in ""file"""
"echo ""The current default java is $(readlink --canonicalize `which java`)""","print the current default full path of the ""java"" executable"
find . -type f -print0 | xargs -0 perl -pi.bak -e 's/ +$//',remove trailing spaces from all files under current directory and keep backups of the originals
find /path/to/base/dir -type d,find all directories in the /path/to/base/dir tree
"find . -name ""*.c"" -print | vim -",open all .c files in the current directory tree in the vim editor
"find ""$DIR_TO_CLEAN"" -type -f -mtime ""+$DAYS_TO_SAVE"" -exec rm {} \; -printf '.' | wc -c",delete and count files in $dir_to_clean that are older than $days_to_save days
"echo ""$NEWFILE"" | sudo tee /etc/apt/sources.list","prints ""$newfile"" to the terminal and file '/etc/timezone' as a root user."
find -maxdepth 1 -type f | xargs grep -F 'example',"find all regular files in the current directory and search them for ""example"""
find ./ -type f -newer /tmp/date.start ! -newer /tmp/date.end -exec rm {} \;,remove the regular files from the current directory tree that are newer than /tmp/date.start but not newer than /tmp/date.end
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list > /dev/null,"append ""deb blah ... blah"" to ""/etc/apt/sources.list"" as root"
find . -type f | xargs -L 100 grep whatever,"search the regular files of the current directory tree for string ""whatever"""
alias devn='cat > /dev/null',"set alias ""devn"" for command ""cat > /dev/null"""
yum install --exclude='*glob*' *.rpm,"installs all packages from a current folder, excluding ones that match pattern '*glob*'."
gzip -d --stdout file.gz | bash,decompress 'file.gz' to standard output and execute the output in bash
"find /path/to/dir/* -printf ""%TY%Tm%Td%TH%TM%TS|%p|%l\n""",find all files/directories under /path/to/dir/* paths and print the timestamp in ymdhms format along with their paths and object of symlinks
"find -mindepth 1 -printf ""%T@ %P\n"" | sort -n -r | cut -d' ' -f 2- | tail -n +7",sort all files/directories under current directory according to modification time and print only the recent 7 of them
find -mtime +2 -mtime -5,look for any files that were modified 2-5 days ago
find /path-to-directory -type f -mtime +60 -exec ls -l {} \; > /path-to-directory/filenames.txt,display a long listing of all normal/regular files in a folder which have not been modified in the last 60 days and save the output to a file
"find . -iname ""*.mov"" -exec /path/to/myffmpeg.sh {} \;",find all *.mov (case insensitive) files under current directory and execute /path/to/myffmpeg.sh with each file path as its argument
"JAVA_HOME=$(readlink -f /usr/bin/java | sed ""s:/bin/java::"")","save the canonical path of ""/usr/bin/java"" with ""/bin/java"" removed to variable ""java_home"""
find . -type f -iname '*.txt' -print0 | xargs -0 mv {} {}.abc,add the .abc suffix to the names of all *.txt regular files in the current directory tree
ln -s .bashrc .bash_profile,"create a symbolic link named "".bash_profile"" to "".bashrc"""
find / -nogroup,find files owned by no group
history | cut -c 8-,"remove the first 7 characters of every line in the output of ""history"""
"alias logspace='find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''","set alias ""logspace"" for command 'find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; |  awk '\''{print $5, $9 }'\'''"
find  /home/family/Music -type f -name '*.m4a' -print0,find all *.m4a files under /home/family/music directory
rsync -azvu -e ssh user@host1:/directory/ user@host2:/directory2/,"archive ""user@host1:/directory/"" to ""user@host2:/directory2/"" via ssh and compressing data during transmission"
sudo chmod 755 -R /opt/lampp/htdocs,"recursively set all permissions under ""/opt/lampp/htdocs"" to 755"
find teste1 teste2 -type f -exec md5 -r {} \; | sort,"list the md5 digest of all files under ""teste1"" and ""teste2"" sorted alphabetically"
find . -name xxx -exec command {} +,"find files named ""xxx"" and pass their names as arguments to the ""command"""
"grep -RIl """" .",recursively prints paths to all text file in folder (ignores binary files).
find /tmp/ -type f -mtime +1 -exec rm {} \;,delete all the regular files in the temp folder which have not been modified in the last 24 hours
find /tmp/test/* -daystart -mtime +0,find all files/directories in directories/files taken from the glob pattern '/tmp/test/*' recursively that have not been modified from the start of the day
"find . -iname ""*.php~"" -exec mv ""{}"" /mydir +;",move all *.php~ (case insensitive) files under current directory to /mydir
screen -d -r remote-command,reattach to a screen session
find . -type f -mtime 7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`,find files that were modified 7 days ago and archive them
echo -n -e '\x61' | md5sum,calculate the md5 sum of hex byte 61
"echo -n ""logdir"" | md5sum - | awk '{print $1}'","calculate the md5 sum of ""logdir"" and print only the hash"
find . -type f -print0 | xargs -0r gzip,compress all files under current directory tree with gzip
find /home -not -group test,display all the files in the folder /home which do not belong to the group test
ls -lt | tr -d 0-9,show long listing of current directory by deleting all digits from the output
du -b FILE,find file size in bytes
find ./ -type f -name '*.r*' -print0 | xargs -0 rm -rf &> log_del.txt,find all the regular files in the current folder which have specific word in their name and force delete all these files and save the log to the file log_del.txt
find / -print0 | tar -T- --null --no-recursive -cjf tarfile.tar.bz2,archive the entire file system into tarfile.tar.bz2
find pathfolder -mindepth 2 -maxdepth 2 -type f -not -path '*/\.*' | wc -l,"find all the normal/regular files in the folder ""pathfolder"" which are 2 levels deep, excluding all hidden files and display the count"
find /dir/to/search -path '*/.*' -print,"display all the hidden directories in the directory ""/dir/to/search/"""
find /mp3-collection -name 'Metallica*' -and -size +10000k,"find all the files which start with the name ""metallica"" in the folder ""/mp3-collection"" and which are bigger than 10mb"
which programname,"print full path of command ""programname"""
find . -depth -name .svn -exec rm -fr {} \;,delete all .svn files/directories under current directory
find . -depth -name '*.zip' -exec rm {} \;,find and delete all .zip files in the current directory tree
"rmdir ""$(dirname $(dirname $dir))""","cuts off last two parts from the path $dir, and deletes resulted folder if empty."
find /data -type f -perm 400 -print0,find all 400 permission files under /data directory with null character as the delimiter
"fold -w ""$COLUMNS"" testfile | wc -l","count the number of lines in ""testfile"" wrapped to fit in a width of ""$columns"" characters"
"zcat file.gz | awk -v RS=""-----------\n"" '/A=2[ ,\n]/ && /dummy=2[ ,\n]/{count++} !/dummy=2[ ,\n]/{other++} END{print ""Final counter value="",count, ""; other="", other}'","count the number of times that a single ""-----------\n"" separated record contains both ""a=2"" and ""dummy=2"" and the number of records that do not have ""dummy=2"" in compressed file ""file.gz"""
find /tmp/foo -path /tmp/foo/bar -print,"search directory /tmp/foo for files containing ""/tmp/foo/bar"" in their full names"
find . -mtime -1 -print,display all the files in the current folder which have been modified in the last 24 hours
var2=$(echo $myvar | wc -c),saves byte size of $myvar variable value in the 'var2' variable.
"for dir in $(find -depth -type d); do [[ ! $prev =~ $dir ]] && echo ""$dir"" ; prev=""$dir""; done",list all leaf directories (directories which don't contain any sub-directory) under current directory
find Symfony -type f,display all regular/normal files in the folder symfony
"echo ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list","print ""deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" and append to file ""/etc/apt/sources.list"""
watch -n 5 wget -qO-  http://fake.link/file.txt,"execute ""wget -qo-  http://fake.link/file.txt"" every 5 seconds"
find . -type f -name *.tex -print0 | xargs -0 grep -l 'documentclass',"find *.tex files in the current directory tree that contain text ""documentclass"""
find . -type d -exec chmod 775 {} \;,change the permissions of all the directories  to 775 in the current folder
"find . -name ""*bills*"" -print0 | xargs -0 grep put","search the files residing in the current directory tree whose names contain ""bills"" for ""put"""
"su - postgres -c ""/usr/bin/psql database -c \""SELECT 'DROP TABLE ' || .... ""","run command ""/usr/bin/psql database -c \""select 'drop table ' || .... "" as user postgres"
"rsync -azP -e ""ssh -p PORT_NUMBER"" source destination","archive ""source"" to ""destination"" via ssh on port ""port_number"""
cd $(readlink -f $(dirname $0)),change directory to the real path of the directory containing the current script
su -l builder,simulate a full login of user builder
pushd .,pushes current folder to the directory stack.
cat allFolders.txt | xargs -n 1 cp fileName.txt,copies file 'filename.txt' to each of directories listed in the 'allfolders.txt' list.
"touch -d ""$(date -r filename) - 2 hours"" filename",adjust the timestamp of 'filename' by subtracting 2 hours from it.
"find . -regextype sed -regex '.*myfile[0-9]\{1,2\}'","search the current directory tree for files matching sed regular expression '.*myfile[0-9]\{1,2\}'"
"awk 'NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? ""equal"" : ""not_equal""; a = $1; b = $3 }' file | column -t","compare column 3 with column 2 of the next line in ""file"" and format output as a table"
"find . -type d -name ""mydir"" -print |  sed 's/$/\/abc.txt/g' | xargs touch","create an empty file in each directory named ""mydir"" under current directory."
screen -X -S SCREENID kill,kill a running screen session
find / -name photo.jpg,find files/directories named 'photo.jpg' in the entire filesystem
find /folder/path/* -mmin +120 -delete,find all files/directories in directories/files taken from the glob pattern '/folder/path/*' recursively that have not been modified in the last 2 hours and delete them
ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4,print command with pid 11383
tree -p -u -g -f -i,"display permissions, user, group, and full path for each file in the current directory tree as a list"
find posns -type f -exec split -l 10000 {} \;,"recursively find all files in the directory ""posns"" and split each one into files of at most 10000 lines each"
"find . -name '*.doc' -exec rm ""{}"" \;",remove all *.doc files from the current directory tree
"echo -e ""line1\r\nline2"" | awk '{ print $0; }' | od -a","display the named characters in ""line1\r\nline2"""
"find . -type f -name ""*cache.html"" -exec gzip -k {} \;","compress every file in the current directory tree that matches ""*cache.html"" and keep the original file"
find /home/folder1/*.txt -type f -exec ln -s {} \;,create symlinks to all  /home/folder1/*.txt files with the same name in current directory
find teste1 -type f,display all normal/regular files in a folder
find file -chour +1 -exit 0 -o -exit 1,test if a file named 'file' in the current directory is more than 1 hour old
"find /var  -type f -exec grep ""param1"" {} \; -print","find the ""param1"" string in regular files under and below /var"
"cal -h | sed ""s/ $(date +%d) /""$'\033\[94m&\033\[0m/g; '""s/ $(date +%d)$/""$'\033\[94m&\033\[0m/g'",highlights current day in a month calendar with color.
mkdir dir2,create directory dir2
find . -type f -exec chmod 500 {} ';',change permissions to 500 for all regular files under and below the current directory
ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents,"forcibly and verbosely create symbolic links in directory ""~/library/launchagents"" to all files located in /usr/local/opt/mongodb/ and that have filename extension "".plist"""
find . -type f -mtime -1 -exec ls -l {} \;,find all the normal/regular files in the current folder which have been modified in the last 24 hours and display a long listing of them
ipcs -a | grep `whoami`,show ipc information owned by the current user
md5 -s 'string to be hashed',find md5sum of 'string to be hashed'
alias cats='konqueror http:'//icanhazcheezburger.com'',"set alias ""cats"" for command 'konqueror http:'//icanhazcheezburger.com''"
find /myfiles -mtime 2,find all files/directories under /myfiles that were modified 2 days ago
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -exec grep ""debug ("" {} \; -print","find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string ""debug ("""
"mount -o remount,ro /system","remount ""/system"" as read only"
find ./ -mtime 3,find all the files in the current folder that have been modified exactly 24*3 hours ago
nl -ba  -nln  active_record.rb  | grep '^111 ',"search for line number 111 in file ""active_record.rb"""
"find . -iname ""*linkin park*""","search for all files in the current directory recursively whose names contain ""linkin park"", ignoring the case"
hostname  -i,print ip addresses of the host name
tar -I pbzip2 -cf OUTPUT_FILE.tar.bz2 paths_to_archive,create an archive using pbzip2 as a compress program
find root -mindepth 2 -type d -empty -delete,delete all empty directories in minimum 2 levels down the root directory
find . -name test,find all files/directories named 'test' under current directory tree
find . -name  * -exec ls -a {} \;,display a long listing of all the files in the current directory
find . -type f | tac,display all normal / regular files in current folder in reverse order
find /media/1Tb/videos -maxdepth 1 -type d -mtime +7 -exec rm -rf {} \;,remove directories in /media/1tb/videos modified more than 7 days ago
find /eserver6 -L,find all files/directories  under  /eserver6 directory and follow symlinks if needed
find -size 100k,find files that are 100k
tmux movew -s 4 -t 3,moves (change order) window from 4 place to 3.
find / -perm /222,"find all files/directories in entire file system that have  ""write"" bit set for either the owner, the group, or others"
"find /dir -name ""filename*"" -type f -exec rm {} \;",delete all filename* files under /dir directory
"find ./ -regex ""cmn-.*[\x4e00-\x9fa5]*\.xml""",find for xml files in current folder using regular expressions
echo 'someletters_12345_moreleters.ext' | cut -d'_' -f 2,extract five digits sequence from a filename with x number of alphanumeric characters followed by the five digit sequence surrounded by a single underscore on either side then another set of x number of alphanumeric characters.
split -l 20 file.txt new,"split ""file.txt"" into files of at most 20 lines each with a prefix ""new"""
echo $j | read k,"save the first line of ""$j"" into variable ""k"" in ksh"
find . -type f -mtime 2 -mtime -3 -daystart -exec ls -l {} \;,find all the normal/regular files in the current folder which have been modified two days ago and display a long listing of them
date +%Y-%m-%d,get year-month-day from date
read -d '' line,"read standard input until a null character is found and save the result in variable ""line"""
find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} .txt \; 2>/dev/null,"search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files stripped of the .txt suffix"
find . | grep html$ | xargs grep <string-to-find>,find all the html files in the current folder and search for a pattern in these files
find -daystart -mtime +0,find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago
screen -d -R -S test,reattach a session and if necessary detach or  even  create first
find test -print | grep -v '/invalid_dir/',"list all files in the ""test"" directory tree except those with '/invalid_dir/' in the pathnames"
"find ""$HOME/"" -name myfile.txt -print","search the file ""myfile.txt"" in home folder"
rsync -avzru --delete-excluded /media/Incoming/music/ server:/media/10001/music/,"archive ""/media/incoming/music/"" to ""/media/10001/music/"" on host ""server"" and skip files that are newer in the destination, delete any files in the destination not in the source, and compress data during transmission"
nl -s- -ba -nrz,"number every line of standard input as zero padded to 6 characters followed by ""-"""
find /home/username/public_html/modules -type d -exec chmod 750 {} +,find all directories under /home/username/public_html/modules  and set their permission to 750
sudo chown el my_test_expect.exp,"change owner of ""my_test_expect.exp"" to ""el"""
a=$(echo $each | wc -c),saves bytes count of the value of '$each' variable.
"for l in $(find . -type l); do cd $(dirname $l); if [ ! -e ""$(readlink $(basename $l))"" ]; then echo $l; fi; cd - > /dev/null; done",print out the names of broken symlinks in the current directory
"hey=$(echo ""hello world"" | gzip -cf)","compress ""hello world"" and save to variable ""hey"""
file `which python`,"print file type of the executable file of command ""python"""
"/usr/bin/find /home/user/Series/ -iname ""*sample*"" -exec rm {} \;",remove all files containing 'sample' (case insensitive) in their names under '/home/user/series' directory tree
mkdir aaa,"make directory ""aaa"""
"gzip -d --stdout file.gz | bash /dev/stdin ""arguments""","unzip ""file.gz"" to standard output and execute in bash with arguments ""arguments"""
find 0001 -type d | sed 's/^0001/0002/g' | xargs mkdir,"find every directory under ""0001"" and make new directories replacing ""0001"" with ""0002"" at the beginning of their names."
"echo ""$path"" | rev | cut -d""/"" -f1 | rev","get the base filename from variable 'path', similar to using the basename command."
make K_VERSION=`uname -r`,run 'make' with parameter k_version set to current kernel release.
find . -perm -220,search for files/directories which are writable by both their owner and their group
"sudo su - -c ""R -e \""install.packages('shiny', repos='http://cran.rstudio.com/')\""""","run command ""r -e \""install.packages('shiny', repos='http://cran.rstudio.com/')\"""" as user root with a full login simulation"
(time ls) > ls_results 2> time_results,saves 'ls' output to 'ls_results' file and time report to 'time_results' file.
sudo chgrp gpio /sys/class/gpio/export /sys/class/gpio/unexport,changes group ownership of /sys/class/gpio/export and /sys/class/gpio/unexport to 'gpio'.
grep -R 'word' *.properties | more,"interactively display all lines containing 'word' in all files whose name ends with .properties in the current directory, waiting for user input after each page."
find . -type f -exec echo {} {} \;,print the files under current directory twice per line
"find . -name ""filename"" -and -not -path ""*/myfolder/filename"" -delete","delete all files named ""filename"" in the current directory tree, except those with paths ending in ""/myfolder/filename"""
mkdir -p ~/temp/bluecove/target/,"make directory and parents as needed to ""~/temp/bluecove/target/"""
"xargs -n 1 -I '{}' find ""$(pwd)"" -type f -inum '{}' -delete",delete the files under the current working directory with inode numbers specified on standard input
ssh-keygen -t rsa,"create a ssh key of rsa type, and prompt for a filename to store it, presenting the default for this type of key as $home/.ssh/id_rsa"
"find $PATH_TO_LOGS -maxdepth 1 -mtime +$SOME_NUMBER_OF_DAYS -exec sh -c ""case {} in *.gz) ;; *)  gzip '{}' ;; esac;"" \;","compress all files not ending in "".gz"" in directory ""$path_to_logs"" that were last modified more than ""$some_number_of_days"" days ago"
scp -C file remote:,"copy file in current directory of local host to host ""remote"", connecting as ssh user matching current local username, and copying the file in home directory on remote host - enable compression during transfer."
rm -rf *~important-file,forcefully remove files *~important-file
find . -type f -atime 7,display all regular/normal files in the current folder that were accessed exactly 7*24 hours back
find ./ -name somename.txt -exec sed -e '1i My new text here` {} \;,search for a file in the current folder and prepend the first line
"chown $(stat -f%u:%g ""$srcdir"") ""$dstdir""","clone the permissions of ""$srcdir"" to ""$dstdir"" on osx"
find -user www-data -not -size +100k,search for all files owned by user www-data that are not larger than 100kb
"find ""$d"" -prune -empty -type d",print $d if $d is an empty directory
find . -type f -name INPUT.txt -print0 | xargs -0 -I file  sed -i.bak '/^#/d' file,"find all files called ""input.txt"" in the current directory tree and remove lines starting with # in them, saving backup copies as input.txt.bak"
"read -t 3 -n 1 -p ""Is this a good question (y/n)? "" answer","read a single character from standard input with prompt ""is this a good question (y/n)? "" and timeout of 3 seconds and save the response to variable ""answer"""
rsync -u -r --delete dir_a dir_b,"recursively copy ""dir_a"" to ""dir_b"" and delete any new files in ""dir_b"""
"find /etc -name ""*.conf"" -printf ""%f %a, %t\n""",find all the configuration files in /etc folder along with the last access & modification time
find . -type f -regex '.*\.\(c\|h\|cpp\)' -exec ls {} \;,list all files under current directory matching the regex '.*\.\(c\|h\|cpp\)'
find . -type f -atime +7,display all regular/normal files in the current folder which are not accessed in the last 7*24 hours
"find /home/you -iname ""*.mp3"" -atime 10 -type -f",search for all mp3 files in the folder /home/you which have been accessed exactly 10*24 hours ago
printf '%0.s-' $(seq 1 $variable),"print a line of ""$variable"" '-' characters"
find . -perm 777 -a -mtime 0 -a -print,display all the files in the current folder which have the permissions 777 and which have been modified in the last 24 hours.
find . -path '*/lang/en.css' -prune -o -name '*.css' -print,"find *.css files in the current directory tree, skipping all directories that match pattern '*/lang/en.css'"
find /usr/bin -type f -size -50c -exec ls -l '{}' ';',display a long listing of all regular files that are less than 50 bytes in size under '/usr/bin' directory tree
find . -type f -exec wc -l {} \; | awk '{total += $1} END{print total}',count the total number of lines that are present in all the normal/regular files
find . -delete,delete all in the current directory tree
find . -name '*.pl' | xargs grep -L '^use strict',"search all the *.pl files in the current directory and subdirectories, and print the names of any that don't have a line starting with 'use strict'"
(ls -t|head -n X;ls)|sort|uniq -u|xargs rm,delete all but the most recent x files in bash
"bind '""\eY"": ""\e2\e.""'",recall the second argument from a previous command by pressing alt-shift-y
find /usr -type l,locate symbolic links in /usr and below
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' | sort | uniq | tr -d '\n',"print a colon-separated list of all directories from the ~/code directory tree, except hidden ones and those below them"
"find /dir/path/look/up -name ""dir-name-here""",find files in /dir/path/look/up directory that names are dir-name-here
"find  /root -type f -iname ""*linux*""",find all regular files that contain 'linux' (case insensitive) in their names under '/root' directory tree
myHostName=`hostname`,"save the system host name to variable ""myhostname"""
find . -type f |wc -l,display the count of all the normal/ regular files in the current directory
find . -type f -mtime -14 > deploy.txt,save the list of files modified within a fortnight ago to `deploy.txt'
find . -name 'foo.cpp' '!' -path '.svn',"search the current directory, except the subdirectory tree "".svn"", for files whose name is ""foo.cpp"""
find /home/www/ -type f -exec perl -i.bak -pe 's/subdomainA\.example\.com/subdomainB.example.com/g' {} +,find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files invoking perl as few times as possible and also keep backups with .bak extension.
"find / -type d -name ""needle""","search the system for directories named ""needle"""
script -q /dev/null ./a | tee output.txt,"print output of 'script -q /dev/null ./a' to standard output and ""output.txt"""
find . -name '*.txt' -o -name '*.html',"list files found under the current directory ending in ""txt"" or ending in ""html"""
find / -name ‘*.*’ -exec grep -il “foobar” {} \;,search for '“foobar”' in all files starting with '‘' and ending with '’' and contain '.' in their names in the entire filesystem and display only the matched files
"find / -iname ""Dateiname""","find the file ""dateiname"" in the entire file system ( case insensitive search)"
"ssh user@target ""cd /some/directory; nohup myprogram > /dev/null 2>&1""","execute ""/some/directory/myprogram"" ignoring output in the background on target machine ""user@target"""
find /usr/bin -name '*vim*' -type l,find all symbolic links containg 'vim' in their names under '/usr/bin' directory tree
find . -mtime -1 ! -name '.DS_Store' -type f -exec basename {} \;,"search the current directory tree for regular files modified within the past 24 hours whose names do not end with "".ds_store"""
od -cvAnone -w1 | sort -b | uniq -c | sort -rn | head -n 20,print a top 20 histogram of characters used from standard input showing backslash escapes for non-displayables
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort),"decompress and sort ""$part0"" and ""$part1"" of files in different processes"
sudo mount -t vboxsf myFileName ~/destination,"mount the ""vboxsf"" filesystem ""myfilename"" on ""~/destination"""
watch -n 1 --color --exec bash -c 'python -m unittest discover |& pyrg',"execute ""bash -c 'python -m unittest discover |& pyrg'"" in a shell with color support every second"
"find ""somedir"" -type l -print0 | xargs -r0 file | grep ""broken symbolic"" | sed -e 's/^\|: *broken symbolic.*$/""/g'","list broken symbolic links under ""somedir"""
chgrp groupb myprog,changes group ownership of 'myprog' to 'groupb'.
find . -type f -mtime 1,find all the files that have been modified exactly 24 hours ago
"seq 5 | awk '{printf ""%s"", $0}'",print numbers from 1 to 5 without separating spaces and without a newline
find -s . -mindepth 1 -type f -print0; printf '\0';,find all regular files in current folder which are atleast 1 level deep and search in the alphabetical order of the directory names
gzcat large.csv.gz | split -l 1000 - xxx,"unzip ""large.csv.gz"" and save every 1000 lines into a file with prefix ""xxx"""
"find /usr/src ! \( -name '*,v' -o -name '.*,v' \) '{}' \; -print","search /usr/src for filenames not ending in ""*,v"""
"find /etc -name ""*.txt"" | xargs -I {} mv {} {}.bak",back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory
"find . -iname '*.page' -exec awk '{if(length($0) > L) { LINE=NR;L = length($0)}} END {print L""|""FILENAME"":""LINE}' {} \; | sort",get a sorted list of the longest line with line number for each file under current directory
"find . -name ""*,txt""","find all files in the current folder that end with "",txt"""
"find $path -type f -name ""*.$extension""",search the directory $path recursively for regular files with the given $extension
"timestamp=$(find ./$dir -type f -printf ""%T@ %t\\n"" | sort -nr -k 1,2 | head -n 1)","save the latest modification time (in format ""%t@ %t"" of any file under ""./$dir"" to variable ""timestamp"""
find . -lname '*test*',search the current directory tree for symbolic links to files matching pattern '*test*'
find $FILE -type f -mtime 30 -exec gzip {} \;,"compress all files in the ""$file"" directory tree that were last modified 30 days ago"
nl file | sort -nr | cut -b8-,"print the contents of ""file"" in reverse order"
unalias python,removes shell alias with name 'python'.
sudo mkdir /data/db,"make directory ""/data/db"""
"find tmp -type f -printf ""f %s %p\n"" | awk '{sub(/^[^ ]+ +[^ ]/,sprintf(""%s %10d"",$1,$2))}1'","print the names and sizes of regular files residing in the ""tmp"" directory tree"
find -type f ! -perm -444,find all regular files in the current directory tree that are not readable by all
yum install firefox,installs 'firefox' package.
dirname `readlink -e relative/path/to/file`,"print the directory name of the real full path of ""relative/path/to/file"" where each symbolic link component must exist"
shopt -s nullglob dotglob,enables shell options 'nullglob' and 'dotglob'.
find your/dir -mindepth 1 -prune -empty,"search the ""your/dir"" directory for empty subdirectories"
my_program | tee >(split -d -b 100000 -),"print and split the output of ""my_program"" into files of at most 100000 bytes each and use numeric suffixes"
"find . -name ""*.cpp"" -exec dirname {} + | sort -u",search for al cpp files in current folder and display distinct parent directory of these files in sorted order
"find . -name ""*.txt"" -print0 |xargs -0 du -ch",measure the disk space taken up by all *.txt files in the current directory tree
"env | grep ipo | awk 'BEGIN {FS=""=""} ; { print $1 } '","list all environment variables whose name contains 'ipo', showing only the names of the variables and not their values."
awk '{ ... }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz),"use awk command '{ ... }' on compressed files ""input1.vcf.gz"" and ""input2.vcf.gz"""
"export JAVA_HOME=$(readlink -f /usr/bin/java | sed ""s:bin/java::"")","save absolute path of java home to variable ""java_home"""
find /home/ABCD/ -type f -print,search folder /home/abcd/ recursively for regular files
"find -name ""*pattern*""",find all files/directories under current directory tree that contain 'pattern' in their names
"find . -name ""*.txt"" -print0 |xargs -0 du -ch | tail -n1",get the disk space used by all *.txt (case insensitive) files/directories under current directory
"find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf ""%f\0"" | xargs -0 -I{} echo svnadmin hotcopy /usr/local/svn/repos/\{\} /usr/local/backup/\{\}","build an ""svn hotcopy"" command for each subdirectory of /usr/local/svn/repos/"
"find ""$dir"" -maxdepth 1 -type f | wc -l",find all files in $dir directory (non-recursive) and count them
find . -name '*.code' -exec grep -H 'pattern' {} +,search the *.code files from the current directory tree for string 'pattern'
find /opt -atime 20,find all the files in the folder /opt which have been accessed exactly 20 days ago
find ~ -mtime 2 -mtime -4 -daystart,find all files in the home folder which have been modified between 72 and 96 hours before
"find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$S[1]; print ""$sum\n""'",print the file sizes for all files under current directory
grep -L -Z -r 'Subject: \[SPAM\]' . | xargs -0 -I{} mv {} DIR,"move all files that contain ""subject: \[spam\]"" to ""dir"""
"find $(pwd) -type f -name ""*.ext"" | while read file; do sed -e 's/^M//g' -i ""$file""; done;","find all files in current directory with the extension "".ext"" and remove all ""^m"" in those files"
"find -P . -type l -exec echo -n ""{} -> "" \; -exec readlink {} \;",display all symlinks and their targets in the current directory tree
"find . -name '*.php' -print0 | xargs -0 wc -l | sort -nr | egrep -v ""libs|tmp|tests|vendor"" | less","list all php files below current directory whose full pathname name does not include ""libs"", ""tmp"", ""tests"", or ""vendor"", sorted by number of lines, letting the user page interactively through the output."
cat -n,receive input and print it to terminal preceeding with line number
"find . -name ""*.txt"" -printf ""%T+ %p\n"" | sort | tail -1","find all *.txt files under current directory with their timestamps and paths, sort them and print the last entry only"
touch index.html,"create an empty index.html, or update its timestamp if it already exists."
"find /volume1/uploads -name ""*.mkv"" -exec rename 's/\.mkv$/.avi/' \{\} \;",rename '.mkv' extension to '.avi' for all files/directories under '/volume1/uploads' directory tree
"echo ""Cannot acquire lock - already locked by $(cat ""$lockfile"")""","print  ""cannot acquire lock - already locked by "" followed by content of $lockfile file"
uname -a,"display system information: kernel name, hostname, kernel release and version, machine architecture, processor type, hardware platform, and operating system type."
top -l 1 -s 0 -i 1 -stats vprvt -pid $PID,show the private address space used by process whose pid is specified by variable pid.
find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \;,find all .zip files in the current directory tree and unzip them
cut -d ' ' -f 2,print second section of space-separated data coming from stdin.
df . | tail -1 | awk '{print $1}',print source of the file system containing current working directory.
"echo -e ""length(FOO)==$(echo -ne ""${FOO}"" | wc -m)""","reports count of characters in the value of ${foo} variable as follows:  ""length(foo)==<counted number of characters>"""
mkdir -p ./some/path,create directorie(s) 'some/path' as required in the current directory
find . -inum 968746 -exec rm -i {} \;,find an inode and remove
head -n99999999 file1.txt file2.txt file3.txt,"concatenates file1.txt, file2.txt, and file3.txt with the filenames printed at the beginning of file contents"
"find /home/ -name 'myfile' -type f | rev | cut -d ""/"" -f2- | rev | sort -u",type unique list of all directories contiaining each file named 'myfile' under the /home directory
find / -size +3G,find all files in the file system whose size is bigger than 3gb
"find $PWD -exec echo -n '""{}"" ' \; | tr '\n' ' '",find all the files in the current folder and display adding quotations to each file and replace spaces with new line
"find -name ""$something""",find all files/directories named $something under current directory
ln -s -- ./local--pdf-kundendienst -pdf-kundendienst,"create a symbolic link named ""-pdf-kundendienst"" to ""local--pdf-kundendienst"" file"
find . -type f -exec grep California {} \; -print,find all files under and below the current working directory with the word california in the file
shopt -s histverify,set shell option 'histverify'.
"DST=`dirname ""${SRC}""`/`basename ""${SRC}"" | tr '[A-Z]' '[a-z]'`","compose filepath as folder path where file $src is located, and lowercase filename of $src file, and save it in 'dst' variable"
find /path -type f -exec rm '{}' +,remove all regular files found in and below /path
find /etc -daystart -ctime -1,find all files in etc which have been changed in the last 1 day
find <directory> -type f -size -1M -delete,remove files that are less than 1mb in size under <directory>
"find . -lname ""*""",display all symbolic links in current folder
find . -type f -exec bash -c 'echo ${1:0:5}' funcname {} \;,search for all the files in a directory and give the first five characters of the file
find . -print0 > mypipe,save the list of files in the current directory hierarchy separting file names with zeroes
find . -name “*.old” -print | xargs rm,delete all files with '.old' extension under current directory tree
echo orange | fold -w 1,"print each character in ""orange"" on a new line"
ls -d -1 $PWD/**/*,lists content of all subfolder (without recursion) in a current folder.
/usr/bin/ifconfig eth0 | grep --word-regexp inet | awk '{print $2}',"shows only ip4, not ip6 address of network interface eth0."
"cat ip_addresses | sort | uniq -c | sort -nr | awk '{print $2 "" "" $1}'","counts number of occurences of all ip addresses in 'ip_addresses' file, and prints all addresses with number of occurences in a descending order."
find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +,find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir
history | awk '{ print $2 }' | sort | uniq -c |sort -rn | head,print the top 10 commands with their use count
kill $PID,"variable pid contains a process id, send sigterm to this process if it exists."
find -name ‘*.lst’ -exec rename .lst a.lst {} \;,"change the extension of all the "".lst"" files in the current folder to ""a.lst"""
BZIP2_CMD=`which bzip2`,"set variable bzip2_cmd to the full path of command ""bzip2"""
find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -T -,create a tar ball of all pdf files in current folder
"cat FileWithColumnOfNumbers.txt | xargs ruby -e ""puts ARGV.map(&:to_i).inject(&:+)""","mathematically sum a column of numbers in ""filewithcolumnofnumbers.txt"""
"find -maxdepth 1 -type d ! -name "".*""",find all subdirectories of the current directory except hidden ones
find . -name '*.py' -exec grep --color 'xrange' {} +,"find all *.py files under and below the current directory and search them for ""xrange"""
finalName=$(dirname ${path#*/}),removes first and last parts of path $path and saves the result in 'finalname' variable.
"find /etc -name ""httpd.conf""",find httpd.conf file in /etc directory
sed -ibak -e s/STRING_TO_REPLACE/REPLACE_WITH/g index.html,"replace all instances of ""string_to_replace"" with ""replace_with"" in file ""index.html"" and make a backup with suffix ""bak"""
find `pwd` -name .htaccess,"list all files under the current working directory with name "".htaccess"""
comm -23 a b,"print unique lines of sorted file ""a"" compared with sorted file ""b"""
for FILENAME in *; do mv $FILENAME Unix_$FILENAME; done,"prefix all files and directories in the current directory with ""unix_"" if the files contain no whitespace or subdirectories"
find ./ -daystart -mtime -3 -type f  ! -mtime -1 -exec ls -ld {} \;,find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using find's -ls option
find . -depth  -type d  -empty -exec rmdir {} \;,remove all empty sub-directories under current directory
printf 'password' | md5,"find md5sum of a string ""password"""
find . -maxdepth 1 -type f -name '*.flac',"show all the "".flac"" files in the current folder and do not search in the sub directories"
find . -depth -print | cpio -ov > /dev/fd0,find all the files in the current folder and create a backup of it in floppy
"echo ""$FILE""|rev|cut -d""."" -f3-|rev",print file name without the last two extensions assuming the file name doesn't contain any other dots.
du -a -h --max-depth=1 | sort -hr,display the sizes and filepaths of all files/directories sorted in descending order of size
unset $(locale|cut -d= -f1),unsets all locale variables.
env | awk -F= '{if($1 ~ /X/) print $1}',list all variables (names only) with names containing x.
find . -type f -ctime -3 | tail -n 5,find all files under current directory whose status was changed less than 3 days ago and show last 5 lines of output
find . -perm -o+w,search the current directory recursively for files writable for `others'
jobs,list all running jobs
"find . -name ""*.txt"" -print -exec awk '$9 != """" && n < 10 {print; n++}' {} \;",run an awk program on every txt file found in the current directory tree
"find ~ -name ""test*"" -print","search the home directory for files whose names begin with ""test"""
find / -nogroup \( -fstype jfs -o -fstype jfs2 \) -ls,display a list of all the files in the file system which do not belong to any group and search only in jfs and jfs2 file systems
"find . -mtime -2 -type f -name ""t*"" -exec ls -l '{}' \;",display long listing of all normal/regular files in the current directory which have been modified in the last 2 days.
find . -type f -name '*.png',find all png files in the current folder
find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE_SUBDIR.*\.\./.*authors' '{}' '+' | wc -l,find all files named 'makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^master_site_subdir.*\.\./.*authors'
find -maxdepth 1 -type f -mtime -1,find all files in maximum 1 level down the current directory that were modified less than 1 day ago
ln -sfn source_file_or_directory_name softlink_name,"force create a symbolc link named ""softlink_name"" to ""source_file_or_directory_name"" without dereferencing ""softlink_name"""
[ $(find your/dir -prune -empty) = your/dir ],check if your/dir is empty or not
"seq 65 90 | awk '{printf(""%c"",$1)}'",print the character representations of 65 to 90
rename 's/^123_//' *.txt,"remove the ""123_"" prefix from all filenames of .txt files in current directory."
find . -name tecmint.txt,find all the files whose name is tecmint.txt
find /stuff -maxdepth 1 -type d -exec script.py {} +,search for all the directories in a folder and limit the search to current folder and give them as input to the python script
nl -nrz -w9 foobar,"number each line in ""foobar"" as right-justified zero padded to a width of 9"
tail /var/log/syslog,print the last 10 lines of the file '/var/log/syslog'
find /usr/tom | egrep '*.pl| *.pm' | xargs cat | grep <PATTERN>,find all files under /usr/tom that matches the extended regex '*.pl| *.pm'   in their names and also matches the regex <pattern> in their contents
"month=$(cal | head -1 | grep -oP ""[A-Za-z]+"")",finds name of a current month and saves it in a 'month' variable.
"find ""$dir""",find all files/directories under $dir directory
find . -type f -mtime +1,find all regular files that reside in the current directory tree and were last modified more than 1 day ago
"ln -s ""/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"" ~/bin/subl","create a symbolic link named ""~/bin/subl"" to ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"""
( cd ~/mydir && mycommand ),"if directory ""mydir"" exists in user's home directory, run ""mycommand"" in it, without changing the current shell's working directory, but do nothing if no such directory exists."
"pushd ""$HOME/Pictures""","add directory ""$home/pictures"" to the directory stack"
someCommand | tee someFile,"write the output of ""somecommand"" to standard output and ""somefile"""
"find . -type f ! \( -name ""*gz"" -o -name ""*tmp"" -o -name ""*xftp"" \) -exec gzip -n '{}' \;","find all files excluding files ending with 'gz', 'tmp' and 'xftp' in their names in the current directory tree and compress them with gzip not preserving timestamp and original name"
find -L . -type l |xargs symlinks,list all broken symlinks under the current directory with info on whether the links exist or not
"find /mnt/iso -name *.avi -printf ""%s\n"" | paste -sd+ - | bc","find the total size of all the "".avi"" files in all the sub-folders below ""/mnt/iso"""
find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls,display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems
find /tmp -type f -empty,find all empty files in /tmp
"find . -name ""*.pdf"" -print | grep -v ""^\./pdfs/"" | xargs -J X mv X ./pdfs/",find all pdf files in the current directory and its sub-directories that are not currently stored in the ./pdfs directory and move them into the ./pdfs directory.
pstree | grep MDSImporte | cut -c 1-${WIDTH},"prints process tree, showing only strings with 'mdsimporte', and chopping output after ${width} characters."
"find /dir -name ""filename*"" -type f -print | xargs rm",delete all filename* files under /dir directory
mount -n -o remount -t extX /dev/hdaX /,"remount ""extx"" filesystem ""/dev/hdax"" on ""/"" without writing in ""/etc/mtab"""
"host $(uname -n) | grep ""IPv6 address"" | head -n 1 | awk '{print $5}'",get current host's ipv6 address.
du -a --max-depth=1 | sort -n,display the sizes and filepaths of all files/directories sorted in ascending order of size
"chown ""dev_user"".""dev_user"" -R ~/.ssh/","recursively change the owner and group of ""~/.ssh/"" to ""dev_user"""
find . -maxdepth 1 -type f -name '.*' -printf '%f\0',list all hidden regular files from the current directory separating them with zeroes
LINES=$(cat /some/big/file | wc -l),save number of lines in '/some/big/file' to 'lines' variable
find / -type c,find all of the character devices on the system
cal -h 02 2012| cut -c4-17 | sed -r 's/(..)\s/\0\t\&/g' | sed 's/$/\t\\\\/' | head -n-1 | tail -n +2,convert unix `cal` output to latex table code.
find . -type f -exec /tmp/clever.sh {} \;,find all files under current directory and run /tmp/clever.sh for each of them with each file path as an argument
"find -mindepth 3 -maxdepth 3 -type d | grep ""New Parts""","search level 3 of the current directory tree for the directories whose pathnames contain ""new parts"""
find /dirpath \( -name \*.trc -a -mtime +30 \) -exec rm {} \;,"delete all the trace files ("".trc"") which have not been been accessed in the last 30*24 hours"
"ifconfig | grep -oP ""(?<=inet addr:).*?(?=Bcast)""",gets ip addresses of all active network interfaces.
"set | grep ""^_=""","display environment variable ""_"" of the current shell"
crontab -u $user -l 2>/dev/null | grep -v '^#',"filters out all comments from the output of the command ""crontab -u $user -l"" ignoring errors"
cal 02 1956,print the calendar for february 1956
ls -tr $(find /home/backups -name '*.gz' -o -name '*.tgz')|head -1|xargs rm -f,delete the oldest file with '.tgz' or '.gz' extension under '/home/backups' directory tree
"find /path/to/directory/folder{?,[1-4]?,50} -name '*.txt'","search the directories that match pattern '/path/to/directory/folder{?,[1-4]?,50}' for .txt files"
find folder -type f -print0 | xargs -0 file --media-type | egrep 'image|video' | cut -f1 -d : | tr '\n' '\0',search for all the regular/normal files in the current folder and display only video/image files
find -name '*.css',find all the css files
"find ./<SOURCE_DIR>/ -type d | sed 's/\.\/<SOURCE_DIR>//g' | xargs -I {} mkdir -p <DEST_DIR>""/{}""","copy directory hierarchy from ""./<source_dir>/"" to ""<dest_dir>"""
"(rsync -rcn --out-format=""%n"" old/ new/ && rsync -rcn --out-format=""%n"" new/ old/) | sort | uniq","create a sorted unique list of new or modified files comparing ""old/"" and ""new/"""
screen /bin/bash -c 'java Foo > foo.txt',redirect output inside screen session
find . -name AssemblyInfo.cs | xargs git diff --,"find files named ""assemblyinfo.cs"" in the current directory and below, and run ""git diff"" on them"
"find /usr/src -not \( -name ""*,v"" -o -name "".*,v"" \) '{}' \; -print","print all filenames in /usr/src except for those that are of the form '*,v' or '.*,v'"
tmux attach -t <session name>,attaches to a 'session name' tmux session.
find -name file -ok echo '-ok is an action so an implicit -print is not applied' \;,print '-ok is an action so an implicit -print is not applied' with confirmation from the user for each file or directory found by the name 'file' under current directory tree
"find . -ls | tr -s ' ' ,","list all files/directories under current directory by replacing all spaces with commas (,)"
find . -exec bash -c 'cmd1; cmd2' filedumper {} \;,"find all files/directories in current directory and execute multiple commands (cmd1, cmd2) for each file/directory"
dig +short -x 173.194.33.71,find a hostname that resolves to ip '173.194.33.71'
find -name '*.[ch]' | xargs grep -E 'expr',"find all .c and .h files in the current directory tree and search them for ""expr"""
readlink -ev mypathname,"print out the full path name of ""mypathname"" with dots resolved"
"find /tmp/ -exec ls ""{}"" +",display list of all the files in the /tmp folder
find-repos-of-install | grep rpmfusion | xargs yum update,updates all packages with 'rpmfusion' in name.
"who am i | awk '{print $5}' | sed 's/[()]//g' | cut -f1 -d ""."" | sed 's/-/./g'",determine display variable for the session when logged in via ssh
chown -R antoniod:antoniod /opt/antoniod/,"recursively change the owner and group of ""/opt/antoniod/"" to ""antoniod"""
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n' | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$',scan every file in /etc for ipv4 addresses while trying to elminate false positives.
"yum list installed  --disablerepo=""*"" --enablerepo=""fedora*""",lists installed packages from  'fedora' repository only.
find . -name '*.txt' -print | xargs perl -pi -e's/Windows/Linux/ig' *.txt,replace the text 'windows' with 'linux' in all text files in the current directory and below
"find YOUR_STARTING_DIRECTORY -type d -name ""*99966*"" -print","find all directories starting from your_starting_directory that contain the string ""99966"" in their names"
find /usr/bin -type f -atime +100,search /usr/bin for regular files that were last accessed more than 100 days ago
"for i in `find . | grep "".xml$""`; do bzip2 $i; done",find all xml files under current directory and archive them to .bz2 archives
"find path/ -name ""*.log""",find all *.log files under path/
"find ""$some_directory"" -type f -name '.*' | xargs rm",delete all hidden files under $some_directory
"find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -execdir echo ""It seems that {} wasn't modified during last 30 days"" ';'",find directories that are directly under /home/user/workspace directory (no-subdirectories) and were modified more than 30 days ago and print a message saying that the directory wasn't modified during last 30 days
"find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d"" """,find recursively the latest modified file in the current directory
read -rsp $'Press any key to continue...\n' -n 1 key,"silently read a single character from standard input into variable ""key"" without backslash escapes and using the prompt $'press any key to continue...\n'"
"find . -name ""filename_regex""|grep -v '.svn' -v '.pdv'|xargs grep -i 'your search string'",find all files under current directory tree named 'filename_regex' excluding '.svn' and '.pdv' directories and files then search for the case insensitive pattern 'your search string' in those files
find $PATH_TO_LOGS -maxdepth 1 -mtime +$SOME_NUMBER_OF_DAYS -exec gzip -N {} \;,"compress all files in directory ""$path_to_logs"" that were last modified more than ""$some_number_of_days"" days ago"
"find -type f -name '*.htm' -printf '%P\0%f\0' | xargs -0 -n2 sh -c 'fil=""${2/\.htm/}""; sed -i -e ""s;<title>.*</title>;<title>$fil</title>;"" $1' replace",find all the html files in current folder and replace some pattern in all these files
"find . -iname '*.jpg' | while read fn; do name=$(basename ""$fn"") ; dir=$(dirname ""$fn"") ; mv ""$fn"" ""$dir/$(basename ""$dir"")-$name"" ;done ./lib/bukovina/version.jpg ./lib/bukovina/bukovina-version.jpg",rename all *.jpg files under current directory by appending parent directory name at the beginning of their names
tar -c --checkpoint=1000 --checkpoint-action=dot /var,create an archive and show a progress bar
"find . -name ""a"" -type d | xargs rmdir",finds recursively all folders named 'a' within current folder and removes only ones without files and another folders within.
kill -0 $PID,"variable pid contains a process id, check if this process exists - resulting exit status from this command will be zero if it does and current user has permission to send it signals."
bg,sends current job to the background.
"ps -A -o pid | xargs -I pid readlink ""/proc/pid/exe"" | xargs -I file dirname ""file""","finds pids of all running processes, gets executable binary of each process, and prints containing folder of each binary."
find . -size +300M,find all files in current folder which are more than 300mb
find . -type d -name aa -prune,display all the directories in the current folder excluding those that are present in the aa directory tree
cat /file/with/numbers | php -r '$s = 0; while (true) { $e = fgets(STDIN); if (false === $e) break; $s += $e; } echo $s;',calculate the sum of the numbers in '/file/with/numbers'
find . -path ./dir1\*  -o -print,"list the current directory recursively ignoring the ""dir1"" subdirectory"
find dir -type f -print0 | xargs -0 md5sum > dir.md5,find all files under dir and calculate their md5sum and save the output to dir.md5
OUTPUT=`find . -name foo.txt`,"find the file ""foo.txt"" in the current folder and assign the output to a variable"
sort foo.txt | uniq,"print lines in ""foo.txt"" that are found only once"
"find . -type f -printf '%T@ %p\n' | sort -n | tail -10 | cut -f2- -d"" ""","find all file paths under current directory, sort them numerically and show last 10 lines of output with only their paths"
find . -name file* -maxdepth 1 -exec rm {} \;,"find files in the current directory whose names begin with ""file"" and remove them"
"find . -name ""*.jar"" -exec zipinfo {} \;",list detailed information about all jar files in the current directory tree
"find . -name ""filename"" -and -not -path ""./path/to/filename"" -delete","delete all files named ""filename"" in the current directory tree, except the one with path ./path/to/filename"
"find . -type f -name ""*"" -newermt 2013-12-04 ! -newermt 2013-12-05 | xargs -I {} tar -czvf files.tar.gz {}",creae a tarball 'files.tar.gz' containing all regular files under current directory tree that are newer than 2013-12-04 and older than 2013-12-05
find / -user root | head,find all files that belongs to user root under / directory and show a few lines of output from the beginning
find / -xdev -name document -print,find all files/directories named 'document' in the root filesystem partition
"find ""$DIR"" -type f -exec grep -q ""$SEARCH"" {} + ;",search for the regex expanded by the variable $search in all regular files under $dir directory tree
"su - joe -c ""/path/to/my_daemon > /some/output/file"" &","run command ""/path/to/my_daemon"" as user joe and redirect the output to file /some/output/file"
rsync -P -e ssh local_file user@host:remote_file,"copy ""local_file"" to ""user@host:remote_file"" via ssh protocol, saving partially transferred files, and showing progress"
"join -t, <(sort test.1) <(sort test.2) | join -t, - <(sort test.3) | join -t, - <(sort test.4)",join comma-separated information in 4 files
find . -exec mv '{}' ~/play/ \;,move all files/directories under current directory to ~/play
"find . -name ""image*.png""",find all the png files in the current folder which begin with the word image
"find . \( ! -path ""*target*"" -a ! -path ""*tools*"" -a ! -path ""*.git*"" -print \)","display all the files in the current directory excluding the paths ""targert"", ""tools"", ""git"""
find . -name '*~' | xargs rm,find recursively all emacs backup files in the current directory and remove them
"find . -printf ""%h/%f : dernier accès le %AA %Ad %AB %AY à %AH:%AM:%AS\n""",display all files in the current folder along with their last accessed timestamps
find . -name '*.log' -mtime +3 -print0 | xargs -0 -P 4 bzip2,create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine)
path=$(basename $path),"remove containing directories from variable 'path' ie. ""/some/specific/directory"" becomes ""directory""."
"ps aux | awk '$11"" ""$12 == ""python csp_build.py"" { system(""kill "" $2) }'","send sigterm signal to any process which 'ps' lists as ""python csp_build.py"""
chgrp loggroup logdir,changes group ownership of 'logdir' to 'loggroup'.
find . -size +10k -ls,display in a list of all the files that are bigger than 10kb in current folder
"ping google.com -n 10 | grep Minimum | awk '{print $3}' | sed s/,//","print the minimum transmission time of 10 ping requests to ""google.com"" from cygwin"
diff -y /tmp/test1  /tmp/test2,display differences between /tmp/test1 and /tmp/test2 side-by-side.
find ~/ -name '*.txt' -print0 | xargs -0 wc -w,see the word count of every *.txt file in the home directory
find -name file -exec echo '-exec is an action so an implicit -print is not applied' \;,print '-exec is an action so an implicit -print is not applied' for every file/directory found by the name 'file' under current directory tree
"find /travelphotos -type f -size +200k -not -iname ""*2015*""","find files in the /travelphotos that are greater than 200k in size but do not have ""2015"" anywhere in the file name"
find / -size +50M -size -100M,find all the files in entire file system which are greater than 50mb and less than 100mb.
"find . -name ""*.txt"" | xargs rm -rf",find all the text files in current folder and force delete them
set -o errexit -o nounset -o noclobber -o pipefail,"exit the shell immediately if an error is encountered, treat references to unset variables as errors, disable overwriting existing files, and use the first non-zero exit code of a set of piped commands as the exit code of the full set of commands"
mkdir /path/to/destination,"make directory ""/path/to/destination"""
"find -name ""*.txt"" -exec mv {} `basename {} .htm`.html \;",rename all the text files  in the current folder to html files
cat -n text.txt | join -o2.2 lines.txt -,"lines.txt contains a list of line numbers, one entry per line - output only these lines from text.txt omitting the rest of the file."
"echo -ne ""$VAR1"" | xxd -r -p | od -c","print a dump of the plain hex data in ""$var1"" as printable characters"
od -cvAnone -w1,list characters from standard input showing backslash escapes for non-displayables
"ls ""`pwd`/file.txt""","list the combined path of the current working directory and ""file.txt"""
finger |  cut --complement -c36-40,"delete characters in columns 36 through 40 from the output of ""finger"""
"sudo -u username2 -H sh -c ""cd /home/$USERNAME/$PROJECT; svn update""","run command ""cd /home/$username/$project; svn update"" with a shell as user username2"
"sudo ln -s ""/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl"" /usr/local/bin/subl","create a symbolic link named ""/usr/local/bin/subl"" to ""/applications/sublime text 2.app/contents/sharedsupport/bin/subl"""
dig -x $IP | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5,get domain name with 'google' from address $ip
"tmpfile=$(mktemp $(dirname ""$file1"")/XXXXXX)","create 6-letter named temporary file in a folder path $file1, and save the path to it in a variable 'tmpfile'"
find /path/to/start/from/ -type f | xargs perl -pi -e 's/applicationX/applicationY/g',replace a word in all the regular/normal files in the current folder
find . -executable -type f,search the current directory tree for executable regular files
find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \;,move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}
"find -type f -name ""*.wav"" | grep export | ./calc_space",find all *.wav files under current directory that match 'export' in their names and pipe the output to ./calc_space
find -mmin 1 -print,find all files in the current folder that are modified exactly 1 minute ago
"find / -name ""*.dbf""",find all *.dbf files/directories in entire file system
sort filename | uniq -c | sort -nr,"print a count of duplicate lines in ""filename"" sorted by most frequent"
find / \( -type d -a -perm -777 \) -print,"find all the directories in the file system which have read, write and execute to all the users"
"find ./polkadots -type f -name ""*.pdf""",find all *.pdf files under ./polkadots
( find . -name '*.txt' -exec cat {} ';' ) | sed 's/ /\n/g' | grep '^aaa$' | wc -l,search for the regex '^aaa$' in all *.txt files under current directory and count the number of matches
"tail -n +2 ""$FILE"" > ""$FILE.tmp"" && mv ""$FILE.tmp"" ""$FILE""","delete the first line of ""$file"" using intermediate file ""$file.tmp"""
mount -t ntfs-3g /dev/mapper/myvolume /media/volume,"mount ""ntfs-3g"" filesystem ""/dev/mapper/myvolume"" on ""/media/volume"""
tree $absolute/path/of/your/dir,"recursively print all files and directories in the directory tree ""$absolute/path/of/your/dir"""
find . -type f -exec ls -al {} \; | sort -nr -k5 | head -n 25,find the top 25 files according to their size in the current directory and its subdirectories
find . -iname 'process.txt' -print,"search for the file ""process.txt"" in the current folder (case insensitive search)"
"[ -z ""$(find aaa/ -maxdepth 1 -type f)"" ] && echo ""empty""",print 'empty' if aaa/ is an empty directory
find . -type d \( -path dir1 -o -path dir2 -o -path dir3 \) -prune -o -print,find all files under the current folder except dir1 dir2 dir3  folder
uname -r,display kernel release name.
set | grep -P '^\w*X\w*(?==)' | grep -oP '(?<==).*',list environment variable values whose name matches '^\w*x\w*'
$ find other -maxdepth 1,print a listing of the `other' directory
"find . -exec grep ""www.athabasca"" '{}' \; -print","search for ""www.athabasca"" in all files under current directory"
find $DIR -type f -mtime +450 -exec rm {} \;,find all the regular files in $dir directory tree which have not been modified in the last 450 days and delete them
"find . -not -name ""*.exe"" -not -name ""*.dll"" -type f","search the current directory tree for files whose names do not end in "".exe"" and "".dll"""
find -mtime -5 -type f -print,find all regular/normal files in the current folder that have been modified in the last 120 hours
find /home/me/target_dir_1 -type d,find all directories under /home/me/target_dir_1
"find . -name  ""*.java""",find all *.java files/directories under current directory
find . -name abc | xargs grep xyz,"search all files called ""abc"" that reside in the current directory tree for string ""xyz"""
ssh root@something 'ls -l',"execute ""ls -l"" on host ""something"" as user ""root"""
find /target/ | grep -v '\.disabled$' | sort,"display all the files in the current folder excluding those ending with "".disabled"" in sorted order"
"ln -s ""$(find dir -name '*.jpg')"" .","create a symbolic link in the current directory for each .jpg file under ""dir"""
"find . -type f \( -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt"" \) -print0 | xargs -0 -n1 echo","display the html, javascript and text files in the current folder (print0 is used to preserve the filenames of all the files which have newlines in their names)"
find root -name '*.rmv' -type f -exec cp {} /copy/to/here \;,find .rmv files in the ./root directory recursively and copy them to directory /copy/to/here
gunzip -c bigfile.txt.gz | grep -f patterns.txt | sort | uniq -c,"unzip ""bigfile.txt.gz"" to standard output, search for patterns in ""patterns.txt"", and list the unique matches"
find . -name \*.txt -print0 | xargs -0 -I{} process {} argument,find all *.txt files/directories under current directory and execute process for each of them
"find . | grep -v ""excluded files criteria"" | xargs rm","remove all files from the current directory tree whose names do not match regular expression ""excluded files criteria"""
find / -name 'secret.keys' -print 2>/dev/null,search for file 'secret.keys' redirecting error messages to /dev/null
update-client 2>&1 | tee my.log,"write output and error of ""update-client"" to standard output and to ""my.log"""
rsync -av <SOURCE_DIR> rsyncuser@192.168.1.110:/srv/www/prj112/myfolder,"archive ""<source_dir>"" to ""rsyncuser@192.168.1.110:/srv/www/prj112/myfolder"""
"df /tmp | grep -q tmpfs && echo ""Shared Memory"" || echo ""Not Shared Memory""","print ""shared memory"" if shared memory mounted at /tmp or print ""not shared memory"" otherwise."
"find /etc -maxdepth 2 -name ""*.conf"" | tail",find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end
rsync -aPSHiv remote:directory .,"archive ""directory"" preserving hard links from host ""remote"" to the current local directory and keep partial files, handle sparse files efficiently, and itemize changes made"
tar -zxvf $1,extract archive stored in $1
yes Y | command-that-asks-for-input,"continuously send ""y"" to input of ""command-that-asks-for-input"""
find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} \;,delete all files in the /mydir directory tree that were last modfied 7 days ago
MYVAR=`git ls-files -m|wc -l|tr -d ' '`,"returns the number of modified files in a git repository, whitespaces stripped."
find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \;,"move all files matching patterns ""*.old"", "".old"", "".*.old"" from the current directory to directory ""../old/"""
find plsql -type f  -perm /ug=rw -exec ls -l {} \; 2>/dev/null,"find files that are writable by the user, the group, or both"
"echo -e ""\n\n\n"" | ssh-keygen -t rsa","pipe 3 newlines to sshe-keygen, answering prompts automatically."
sudo ln -s /usr/lib/jvm/java-7-oracle /usr/lib/jvm/default-java,"create a symbolic link named ""/usr/lib/jvm/default-java"" to file ""/usr/lib/jvm/java-7-oracle"""
"rsync -a --rsync-path=""mkdir -p /tmp/x/y/z/ && rsync"" $source user@remote:/tmp/x/y/z/","create directories ""/tmp/x/y/z/"" on remote host before copying ""$source"" to ""user@remote:/tmp/x/y/z/"""
find ./ -daystart -mtime +3,find all the file that have not been modified in the last 3 days ( considers day starting not 24 hours )
mount -l,display what flags mount points are mounted with
"sudo ln --symbolic --verbose --force ""$pluginpath"" ""$pdir""","force create a symbolic link named ""$pdir"" to ""$pluginpath"" with verbose output"
tree -I '3rd*',"display the current directory tree except files or directories starting with ""3rd"""
"find . -name ""*txt"" -type f -print | xargs rm",delete all *txt files under current directory
find . -name .snapshot -prune -o -name '*.foo' -print,"find the ""*.foo"" files in the current directory tree that are not under "".snapshot"" directories"
split -l 50000000 --filter=./filter.sh 2011.psv,"split ""2011.psv"" into chunks of at most 50000000 lines each as input to ""./filter.sh"""
dig +short myip.opendns.com @resolver1.opendns.com,request ip address of 'myip.opendns.com' from name server 'resolver1.opendns.com'
find . -type f -inum 31467125 -exec mv {} new_name.html \;,rename all regular files under current directory tree with inode number 31467125 to 'new_name.html'
find . -type f -print0 | xargs -0 ls -ltr | tail -n 1,find recursively the latest modified file in the current directory
"find / -type f -regextype posix-extended -regex '.*/.{1,24}$'",search the file system for regular files whose names are shorter than 25 characters
"find . -name ""*.py"" -type f -exec grep ""something"" {} \;","search the .py files residing in the current directory tree for ""something"""
"grep [option] ""text string to search” directory-path","recursively finds strings with""text string to search” in files under 'directory-path', regarding provided options '[option]'."
ping google.com | xargs -L 1 -I '{}' date '+%+: {}',prepend date to ping output to google.com
"find . -maxdepth 1 -type f -name '\.*' | sed -e 's,^\./\.,,' | sort | xargs -iname mv .name name",unhide all hidden files in the current directory
"find . -type f -name ""*.gz"" -exec zgrep 'GET /foo' {} \;",search for a string in gzip'd files
tar -c --use-compress-program=pigz -f tar.file dir_to_zip,create an archive using 'pigz' as a compress program
"cd ""$TAG""",change to the directory pointed by variable tag
sed 's/\([^ ]*\) /\1\n/' input | fold -w 100,"print the first word followed by the rest of the line formatted to fit in 100 characters for every line in ""input"""
ssh -L 4444:raptor.lan:22 genja.org,"create ssh tunnel through ""genja.org"" connecting localhost port 4444 to ""raptor.lan"" port 22"
find -name file -okdir echo '-okdir is an action so an implicit -print is not applied' \;,print '-okdir is an action so an implicit -print is not applied' for each file/directory found by the name 'file' under current directory tree
"find ~/dir_data -type f -exec chmod a-x,u+w {} \;","change permissions of all regular files in the ~/dir_data directory tree in accordance with mode `a-x,u+w'"
find . -type f -print0 | xargs -0 grep -cH '' | awk -F: '$2==16',search for all regular/normal files in current folder and display all the files which contain 16 lines
"find . -perm /u=w,g=w",search for files/directories which are writable by either their owner or their group
"find . -name ""*foo*"" | sed -e ""s/'/\\\'/g"" -e 's/""/\\""/g' -e 's/ /\\ /g' | xargs cp /your/dest","copies all files like ""*foo*"" under the current directory to the '/your/dest' directory."
find foo -path /tmp/foo/bar -print,"search directory foo for files containing ""/tmp/foo/bar"" in their full names"
grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1,"print the most repeated line in ""list2.txt"" that exists in ""list1.txt"" prefixed by the number of occurrences"
mount -t ntfs -o ro /dev/mapper/myldm /mnt,"mount ""nifs"" filesystem ""/dev/mapper/myldm"" on ""/mnt"" as read only"
seq 100000 | paste -sd+ | bc -l,calculate the sum of all the numbers from 1 to 100000
content_dir1=$(mktemp),creates temporary file and saves path to it in 'content_dir1' variable.
find /usr -type f | wc -l,find the count of all the regular files in a directory
find / \! \( -newer ttt -user wnj \) -print,find all the files/directories in the entire filesystem that do not belong to user 'wnj' and are not newer than the file/directory 'ttt' by modification time
"read -p ""Press [Enter] key to release lock...""","read a line from standard input into variable ""reply"" with prompt ""press [enter] key to release lock..."""
"find . -mtime +7 -name ""G*.html"" -execdir  /path/to/script_7zipi {} +","find all ""g*.html"" files modified more than 7 days ago in the current directory tree and pass them as arguments to script /path/to/script_7zipi"
"find ""/path/to/pdfs/"" -type f -name ""$1*.pdf"" -printf ""%TY/%Tm/%Td %TH:%TM %p\n""      | sort -n -k1.1,1.2 -k1.3,1.4 -k1.6,1.7 -k1.9,1.10 -k2.1,2.2 -k2.4,2.5 -k3  > remoteuser@remoteserver:/u/tmp/CustTmp/zzz_pdfs.txt",display all the pdf files in a folder which start with a specific word along with their timestamp in sorted order of time and save output to a in remote server
find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \;,replace the word apple with orange in all the regular/normal files in the current folder
"git ls-files | grep ""\.java$"" | xargs wc -l",counts the number of lines in each *.java file in a git repository.
alias iTMSTransporter='`xcode-select --print-path`/../Applications/Application\ Loader.app/Contents/MacOS/itms/bin/iTMSTransporter',"set alias ""itmstransporter"" for command '`xcode-select --print-path`/../applications/application\ loader.app/contents/macos/itms/bin/itmstransporter'"
cat ${TMP}/${SCRIPT_NAME}.name|sort -r;,reversibly sorts content of the '${tmp}/${script_name}.name' file
jobs | wc -l,count amount of jobs running
"ping 8.8.8.8 | awk -F""[= ]"" '{if($10>50) {cmd=""date""; cmd | getline dt; close(cmd) ; print $10, dt}}'","print the time to ping ""8.8.8.8"" followed by a time stamp if the ping is greater than 50"
"su -c ""cd /home/$USERNAME/$PROJECT ; svn update"" -m ""$USERNAME""","run command ""cd /home/$username/$project ; svn update"" as user named as value of the variable $username"
sort file1 file2 | uniq -d,"print each unique line that is duplicated in files ""file1"" and ""file2"" combined"
"find /home/you -iname ""*.txt"" -mtime -60 -exec cat {} \;",search for text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search) and display their contents
find -mtime +2,look for any files that have not been modified in the last two days
find / -type d -name 'man*' -print,"find all the directories in the file system which begin with ""man"""
tail -1000 file-with-line-too-long.txt | more,"display last 100 lines of file-with-line-too-long.txt, waiting for user input after each page."
"command time -f ""%E real,%U user,%s sys"" ls -Fs",runs programs and prints formatted summary of system resource usage.
find ~/mydir -iname '*.htm' -exec rm {} \;,delete all html files under tree ~/mydir
"echo ""dirname: `dirname ""$0""`""",prints folder where current script is located
"find . -type f -name ""*.ext"" -exec grep -v ""^{}$"" list.txt && echo {} \;","display files ending with "".ext"" in current folder excluding those that are present in the list list.txt"
"find . -type f | while read f; do g=`md5sum $f | awk '{print $1}'`; echo ""$g $f""> $f-$g.md5; done",calculate md5 sums for all regular files in the current directory tree
OS=`uname -s`,"set variable os to the name of the operating system, ie. ""linux"""
ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com,"log into ""ubuntu@ec2-xx-xxx-xxx-xxx.us-west-2.compute.amazonaws.com"" using identity file ""~/path/mykeypair.pem"""
TMPDIR=$(mktemp -d),creates temporary folder and save path to that in a tmpdir variable.
find . -inum 1316256,find the file whose inode number is 1316256
"find . -type f  -name ""your_pattern"" -exec du -ch {} + 2>/dev/null | grep total$.","find regular files whose filename is ""your_pattern"" and display the total size of the files in human readable format."
sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g',replace all newlines from standard input except the last with spaces
du -a,find disk usage of all files inside the directory
"find kat -type f \( -name ""*~"" -p -name ""*.bak"" \) -delete","delete all the "".bak"" or swap files in kat folder"
find . -name *20120805.gz -exec zcat {} \;,"execute zcat on every file matching ""*20120805.gz"" in the current directory and subdirectories"
"find . -perm a=rwx,g-w,o-w","search the current directory recursively for files with the exact permissions u=rwx,g=rx,o=rx"
find /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2,create a bzip2 archive of all .log files from the /var/log directory tree
"find /Applications/ -name ""*.java"" -exec grep -i TODO {} +",search the .java files from the /applications/ directory tree for todo lines
ssh -o ServerAliveInterval=60 myname@myhost.com,"ssh into ""myhost.com"" as user ""myname"" with a check every 60 seconds that the server is still alive"
`sudo chown -R mongodb:mongodb /data/*`,"evaluate the output of recursively changing the owner and group of ""/data/*"" to ""mongodb"""
"echo 'your, text, here' | fold -sw 70","print input ""your, text, here"" formatted to fit 70 characters per line breaking at spaces"
"find . -name ""*.pyc"" | xargs -0 rm -rf",delete all .pyc files in the current directory tree
"diff ""$source_file"" ""$dest_file""","compare ""$source_file"" and ""$dest_file"" line by line"
nl -v1000001 file,"add line numbers to each non-blank line in ""file"" starting with number 1000001"
"seq -s ""*"" 1 500 |bc",calculate the factorial of 500
find /usr/X11/man/man5 -print,display all files in a folder
"find / -name ""my.txt""",find all files/directories named 'my.txt' in the entire filesystem
find -type d,find all directories in the current directory tree
"basename ""$FILE"" | cut -d'.' -f-1",print base name of the file name without all extensions.
"find . -type f -name ""*.py[c|o]"" -exec rm -f {} +",recursively removes all files like '*.pyc' of '*.pyo' in a current folder without prompting.
"find /PROD -type d -exec sh -c 'cd ""{}"" && for f in *.json; do /tmp/test.py ""$f""; done' \;",search in all the directories of the folder /prod for json files and send them as input to the python file /tmp/test.py
comm -1 -2 file1.sorted file2.sorted,print only common strings in content of files 'file1.sorted' and 'file2.sorted'
yes 123456789 | head -2,"print 2 lines of ""123456789"""
"echo ""$string"" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//'","remove leading and trailing spaces or tabs from ""$string"""
echo $foo | rev | cut -c1-3 | rev,display the last 3 characters of variable foo.
history -r,read the history file and append the contents to the history list
find ./ -type f -exec rm -rf {} \;,remove all regular files in the current directory
"find . -type f | while read file; do sed -e 's/^M//g' -i ""$file""; done",convert directory of files from dos to unix
"find ~ -iname ""screen*"" | more",find all files/directories that start with 'screen' (case insensitive) in their names under user's home directory tree and show them by paging through one screenful at a time
"echo `whoami` `stat -c %i ""/home""`","print the current user name and inode number of ""/home"""
"find / -iname ""*.mp3"" -type f | xargs -I '{}' mv {} /mnt/mp3",search for all the regular/normal mp3 files in the file system and move them to the folder /mnt/mp3
find / -name /transfer -prune -o -print,display all files in the entire file system excluding those that are in the transfer directory
find /tmp -size 0 -atime +10 -exec rm -f {} \;,force delete all the temp files which are of size 0 bytes and which have not been accessed in the last 10 days
comm -3 a b,"print unique lines of ""a"" and ""b"""
find . -name '*.doc',"display all the doc files in the current folder ( files ending with "".doc"" )"
sort,sort standard input in alphabetical order
"watch 'echo -e ""\033[31mHello World\033[0m""'","execute 'echo -e ""\033[31mhello world\033[0m""' every without color support 2 seconds"
"find /home/you -iname ""*.mp3"" -daystart -type f -mtime 1","search all mp3 files in the folder ""/home/you"" which have been modified yesterday (from the start of day 00:00 to 23:59)"
cat whatever | egrep 'snozzberries|$',print content of 'whatever' file
"j=`echo $i | rev | cut -d ""."" -f2`;",print revesed second from the end dot-bounded field in $i value
"find . -type d -empty -exec rmdir ""{}"" \;",removes all empty folders under current folder.
v=$(whoami | tr [:lower:] [:upper:]),"save the user name in upper case of the current user in variable ""v"""
find / -type f -perm 0777 -print -exec chmod 755 {} \;,find files with 777 permissions and change them to 755
"find . -name ""*.txt"" -type f -print | xargs file | grep ""foo="" | cut -d: -f1",list all *.txt files under current directory that match 'foo=' in their file information
"find . -type f -print0 | grep -Fxvz -f <(cd ""/some/dir"" && find . -type f) | xargs -0 echo rm",find all the normal/regular files in current folder and delete all the files which are not present in /some/dir
pstree -a,displays a tree of all process alongside their command line arguments.
find build -not \( -path build/external -prune \) -not \( -path build/blog -prune \) -name \*.js,find all js files under the build direcotry except build/external and build/log directory.
"find . -type f -printf ""%s\t%p\n"" | sort -n |head -1",find smallest file in the current directory with find commad
"find . -type f -print | \ egrep  '/,|%$|~$|\.old$|SCCS|/core$|\.o$|\.orig$' >>Exclude",search for all the files excluding directories ending with old or sccs or core or orig in the project folder and append the output to the file exclude
"find /path/to/folders/* -type d  -exec mv {} {}.mbox \; -exec mkdir {}.mbox/Messages \; -exec sh -c ""mv {}.mbox/*.emlx {}.mbox/Messages"" \;",move each of the directories in /path/to/folders/* to another directory whose name is constituted by appending .mbox to each directory name and create a directory named messages in this directory then move all *.emlx files into this directory
gzip -cd myDB.sql.gz | pg_restore ...,"unzip ""mydb.sql.gz"" to standard output as input to ""pg_restore ..."""
find /some/dir -mmin -$((currtime + (24 * 60))) -a -mmin +$((${currtime} + 1)),find all files that have been modified yesterday
find etc home apps -depth -print | cpio -ov > dev/rmt0,create a back up of several folder
echo $filename | rev | cut -f 2- -d '.' | rev,remove filetype suffix (last dot and following characters if any) from filename
find . -size 2000k -print,find files in the current directory and below that are 2000 kb in size
"ln -s ""../config/environments""","create a symbolic link in current directory named ""environments"" to file ""../config/environments"""
find /home/feeds/data,find all files/directories under /home/feeds/data directory
"find . -type f -maxdepth 1 -not -empty -print0 | xargs -0i sh -c ""cat /dev/null > \""{}\""""",truncate all non-empty regular files under the current directory
find /home/luser -type f -name '*.mpg' -print0 | xargs -0 rm -f,remove all .mpg files in the /home/luser directory tree
find . -name \*.php -type f -exec grep -Hn '$test' {} \; | wc -l,search for a word in all the php files in the current folder and display the count of all matching lines.
find . -type l -ls,find all symbolic links starting from the current directory and list them
"find . -type f -iname ""*.py""","this find command ignore the case when searching for file name , to ignore the case  in this example all .py & .py file will search"
find . -name '*.txt'|xargs grep -m1 -ri 'oyss',search for first match of the case insensitive regex 'oyss' in all *.txt files under current directory and print the file paths along with the matches
bunzip2 -c bigFile.bz2 | wc -c,shows size of compressed file in .bz2 archive.
find /Users/david/Desktop/-type f,display all regular/normal files in the folder /users/david/desktop/
"zcat log.tar.gz | grep -a -i ""string""","search for case-insensitive ""string"" in ""log.tar.gz"""
find -type f -maxdepth 1 -writable,find writable regular files in the current directory
find $root -type d | tr '\n' ':',find all directories under $root and replace all newlines with : (colon) in the output
find . -name \*.txt -exec chmod 666 {} \; -exec cp {} /dst/ \;,"find all *.txt files under current directory, change their permission to 666 and copy them to /dst/ directory"
sed -i '' -e 's/subdomainA/subdomainB/g' $(find /home/www/ -type f),find all regular files under /home/www and replace every occurrences of 'subdomaina' with 'subdomainb' in those files (may produce 'agument too long' error)
find . -type d | grep DIRNAME,find all directories under current directory having dirname in their name
find / \( -name '*.txt' -o -name '*.doc' -o -size +5M \),"find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5mb in size"
"doFirst="""" true",run the command 'true' with an empty environment variable dofirst
"FILE=""/tmp/command_cache.`echo -n ""$KEY"" | md5sum | cut -c -10`""","calculate md5 checksum of $key, take the 1st to 10th character, append them with the string '/tmp/command_cache.' and save the rsultant string to variable file"
"w | sed '1,2d' | cut -f1 -d' ' | sort | uniq -c","finds all user session in system, and shows sorted user names with number of sessions of each user."
"find ""$dir"" -path ""$dir/prune_me"" -prune -o -exec bash -c 'echo ""$0""'  {} \;",list all files under $dir directory except path $dir/prune_me directory
"find . -maxdepth 1 -type f -newermt ""Nov 22"" \! -newermt ""Nov 23"" -exec echo {} +","print the list of regular files from the current directory that were last modified on november, 22"
find /win/C -iname *JPG,"find all the ""jpg"" file in a folder."
echo `cat $FILE | head -n 100 | wc -c` / 1024 | bc -l,prints the size in kb of the first 100 lines of a file
find . -name bad -empty -delete,delete recursively empty files named 'bad'
find . -name '*.mp3' -name '*.jpg' -print,all the files that end with .mp3 and end with .jpg
"find . -type f -printf ""%f %s\n""",print the file names along with their sizes under current directory tree
find -type d -path '.svn' -prune -o -print,display all the directories in the current folder excluding those that are present in the .svn directory tree
tac FILE |egrep -m 1 .,prints the last non-empty line of a file
cat $file | sed '/\/\//d' | sed '/^\s*$/d' | wc -l,"counts lines in file $file ignoring '//' commented lines, lines with spaces only and empty lines."
find . -type f -exec cat {} \;,search for all the regular files in the current folder and display the contents
find /var/www/ -name wp-config.php -maxdepth 2,search for the wp-config.php file in /var/www and one level below
top -b -p `pidof a.out` -n 100,"use 'top' to monitor process 'a.out', printing information 100 times."
perl -pe 's/((:\S*){3}):\S*/$1/g' file | column -t,"remove what follows the forth occurrence of the character "":"" in any field which contains it"
find . -name *.so -print0 | xargs -0 myCommand | grep ExpectedResult,"find all *.so files/directories under current directory and run mycommand with the file/directory paths as its argument, then search for expectedresult in the output"
find /usr -name '*.foo' -print,"find all the files ending with "".foo"" in the folder /usr"
yum update $(find-repos-of-install | grep rpmfusion),updates all packages with 'rpmfusion' in name.
find -depth -printf '%m:%u:%g:%p\0' >saved-permissions,backup permissions of the files in the current directory tree
"read -s -p ""Password: "" password","read a line from standard input into variable ""password"" without echoing the input and using the prompt ""password: """
find . -mtime -1 | cpio -oa 2>/dev/null | ( cd $backup_dir && cpio -imd),"find all files in current directory that were modified less than 1 day ago, and create cpio archive in $backup_dir"
"find /path -type d -printf ""%f\n"" | awk 'length==33'",find all directories under /path whose names are 33 characters long
someCommand 2>&1 | tee -a someFile,"write the standard output and error of ""somecommand"" to the console and append it to ""somefile"""
find / -mtime +50 -mtime -100,find all the files which were modified more than 50 days but less than 100 days ago
"find . -name ""*.foo"" -exec somecommand ""{}"" \;","find all files under the current directory that end in ""foo"" and execute somecommand on each quoted filename"
alias pwd='/bin/pwd | pbcopy',"set alias ""pwd"" for command '/bin/pwd | pbcopy'"
LD_PRELOAD=./linebufferedstdout.so python test.py | tee -a test.out,"execute python script ""test.py"" with ""ld_preload=./linebufferedstdout.so"" and write the output to console and append to ""test.out"""
du -s <file>,find file size in blocks
"find /Path -path ""/Path/bar*"" -name ""file_name*""","search the /path directory tree for files whose pathnames match pattern ""/path/bar*"" and whose names match pattern ""file_name*"""
find -user root -exec chown www-data {} \;,change the ownership of all files in the current directory tree from root to www-data
"ls -1 | paste -sd "","" -","lists all files in a current folder, separating names with comma."
diff -arq folder1 folder2,"print summary of new/missing files, and which files differ between folder1 and folder2."
find . -atime +6,find all the files in the current directory which have been modified in the  last 6 days.
find /var/www -type d -mtime 0 -name logs -exec sudo rm -fr {} \;,force remove all the directories with the name logs in the folder /var/www
"find . -name ""*.rb"" -type f -print0 | xargs -0 wc -l",count the number of lines in every regular .rb file in the current directory tree
read -e,read a line of standard input in an interactive shell
find / -iname TeSt123.txt,perform case-insensitive search for file `test123.txt' on the system
find . -type f -exec ls -l '{}' \;,list all regular files in the current directory tree
read -d'' -s -n1,read a single character from standard input with delimeter '' and no echo
"perl -ne 'print length().""  line $.  $_""' myfile | sort -nr | head -n 1","prints the length, line number, and contents of the longest line in myfile"
find . -mmin -60 -type f -ls,list all regular files from the current directory tree that were modified less than 60 minutes ago
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\[|Downloading:' | tr -d ' \n'),"save maven project version to variable ""version"""
echo -n $line | od -x,"print ""$line"" in hexadecimal 2-byte units"
echo hello `whoami`,"print ""hello"" followed by the current user name"
shopt -s promptvars,enables shell option 'promptvars'.
"date +%Y:%m:%d -d ""1 day ago""",print yesterday's date as yyy:mm:dd
sudo find ./bootstrap/cache/ -type d -exec chown apache:laravel {} \;,"change all directories under ""./bootstrap/cache/"" to owner ""apache"" and group ""laravel"""
"find $HOME/Library/Safari/Icons -type f -atime +30 -name ""*.cache"" -print -delete",delete all regular files with '.cache' extension that were accessed more than 30 days ago under $home/library/safari/icons directory tree
find /var -name lighttpd,find for lighttpd in /var
find $STARTDIR -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf '{}.ps' '{}.pdf',convert all *.ps files under $startdir directory to *.pdf files
"dirname ""/path/to/vm.vmwarevm/vm.vmx""","prints path to folder that contains file ""/path/to/vm.vmwarevm/vm.vmx""."
"nl -s""^M${LOGFILE}>  ""","add prefix like number and ""^m${logfile}> "" to every non-blank line received on standard input"
find /var/www/html/zip/data -type d -mtime +90 | uniq,find all directories in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print only unique paths
"find . -name ""*.mpg"" -type f -print0 | xargs -0 -I {} -n 1 -P 4 ffmpeg -i {} {}.mp4",find all *.mpg (regular) files under current directory and run an ffmpeg command on each of them
"join -j1 -o 2.1,2.2,1.2,1.3  <(sort test.1) <(sort test.2)","for each line which has a common first field in test.1 and test.2, output the first 2 fields of test.2 and the field 2 and 3 of test.1"
"ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_,"" "");print _[1]}'",gets ip addresses of all active network interfaces on host.
rmdir latest,removes 'latest' folder if empty.
join <(sort -n file1) <(sort -n file2),"run 'join' with the number-sorted output of file1 and file2, without modifying file1 or file2: for each line with a common first field in file1 and file2, output the common field followed by the extra fields in both files."
"find . -iname ""*.mov"" -follow","search the current directory recursively for mov files, following symlinks"
"find . -path ""*src/main*"" -type f -iname ""*\.scala*""","display all scala files in the directory ""src/main"""
"find . -name ""*.php"" -exec sed -i 's/foo/bar/g' {} \;","replace ""foo"" with ""bar"" in all php files in the current directory tree"
"find other -maxdepth 1 -printf ""%P\n""",print a listing of the `other' directory
find . -name '*.axvw' -print0 | xargs -0 grep -n 'some string',search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers
"find . -type f -noleaf -links +1 -printf ""%n %i %f\t%h\n"" | sort | less","make a list of regular files from the current directory tree that have more than 1 link and view it with the ""less"" pager"
find . -iname filename.txt,"search for the file, filename.txt in the current folder ( case insensitive search )"
"find /var/www/ -type f -name ""*"" -size +100M -exec du -h '{}' \;|grep -v /download/",find files larger than 100mb in /var/www and exclude files with /download/ in their path from the output
find $1 -type f -not -regex '.*/\..*' -exec $0 hashmove '{}' \;,find all files under $1 not matching the regex '.*/\..*' and execute hashmove on each of them with the file path as its argument
"var=`hg st -R ""$path"" | tr -d '\n'`","delete newlines from output of 'hg st -r ""$path""' and save to variable ""var"""
find . -name '*.[ch]' | xargs grep $1 | less,find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex provided by first positional argument and show the output by paging through one screenful at a time
find /,display all files in the entire file system
"find . -name ""*.txt"" -print | less",find all your text files and page through them
"source <( sed 's/:\(.*\)/=""\1""/' msgs.config )",pick up a list of variable:value pairs from msgs.config and add them to the current shell or script's environment.
head -$((${RANDOM} % `wc -l < file` + 1)) file | tail -1,prints a random line from file
"find ""$DIR_TO_CLEAN"" -mtime +$DAYS_TO_SAVE | wc -l",count files in $dir_to_clean that are older than $days_to_save days
TMPDIR=$(mktemp -p /tmp -d .daemonXXXXXXX),"creates temporary directory with name formatted like .daemonxxxxxxx in /tmp/ folder, and saves path to it in 'tmpdir' variable."
find /path/to/base/cache /path/to/base/tmp /path/to/base/logs -type d -exec chmod 755 {} +,"find all directories under /path/to/base/cache, /path/to/base/tmp, /path/to/base/logs  and change their permission to 755"
"find . -type f -iname ""*linkin park*"" -exec cp -r {} /Users/tommye/Desktop/LP \;","find all files in the current directory recursively with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"
{ yes yes | sed 4q; yes no | sed 1q; } | ./script,"send ""yes"" 4 times followed by 1 ""no"" to ""./script"""
mount --bind /something /new_something,"bind mount ""/something"" on ""/new_something"""
mkdir ~/.npm-global,create the directory '.npm-global' in the user's home directory(~).
"find .  \( ! -path ""./output/*"" \) -a \( -type f \) -a \( ! -name '*.o' \) -a \( ! -name '*.swp' \) | xargs grep -n soc_attach","recursively finds in all folders but ""./output/*"" all files but *.o, *.swp and prints strings with 'soc_attach' text pattern and number of matched string."
"find /nas01/backups/home/user/ -type d -name "".*"" -print0 -exec ls -lrt {} \;",to match only hidden dot directories
find /proc -print0 | xargs -0,print all file/directory names with white space safety under the /proc directory
"find  / -type d -iname ""project.images"" -ls",find a directory named 'project.images' case insensitively in the entire filesystem and show it in long listing format
"find ""$1"" -perm -u+r -print0 | xargs chmod g+r",find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories
find /export/home/someone -exec curl -u someone:password -vT {} ftp://somehost/tmp/,find all files/directories under current /export/home/someone directory and upload them to ftp://somehost/tmp/
find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i 's/[:space:]+$//' \{} \;  -exec sed -i 's/\r\n$/\n/' \{} \;,remove trailing white spaces and replace crlf with lf in all files under current directory ignoring .git and .svn directories
"read -p "" Enter Here : "" text","read a line from standard input into variable ""text"" with the prompt "" enter here: """
"df /mnt/myUSBdisk | grep -q /mnt/myUSBdisk && echo ""Mounted"" || echo ""Not mounted""","print ""mounted"" if /mnt/myusbdisk exists on a mounted file system or print ""not mounted"" otherwise."
cd `find . -name file.xml -exec dirname {} \;`,"find ""file.xml"" under the current directory and change directory to its parent"
find . -empty -exec ls -l {} \;,display long listing of all the empty files in the current folder
find . | xargs md5sum,calculate and show md5 sums for every files under current directory tree
"find /source_path -name \*.data  | while read -r filename; do cp ""${filename}"" ""$(printf ""%s\n"" ""${filename}"" | sed ""s/^.*[/]\(category[^/]*\)[/]\(.*[.]data\)$/\/target_path\/\1_\2/"")""; done",copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names
df -k,report file systems disk usage in kilobytes.
find /some/directory -user joebob -print,find all files/directories owned by user 'joebob' under '/some/directory' directory tree
find /myDir -mindepth 1 -mtime +7 -delete,delete all files in the /mydir directory tree that were last modfied more than 7 days ago
ssh -f mysql_access_server -L 3309:sqlmaster.example.com:3306 -N,"forward all connections to client localhost 3309 via the ssh tunnel to ""mysql_access_server"" and then connect to host ""sqlmaster.example.com"" on port 3306"
"find /root -type f -iname ""*linux*""","find all regular files under and below /root that match pattern ""*linux*"", case insensitive"
find -type f -exec du -Sh {} + | sort -rh | head -n 5,display the biggest file sizes only
find -delete,delete all files and directories
"find . -name ""*.pyc"" | xargs rm -rf",delete all .pyc files in the current directory tree
tar xzf archive.tar.gz -C /destination,extract 'archive.tar.gz' to /destination
find . -name test -type d -print0|xargs -0 rm -r --,find all 'test' directories in the current directory tree and remove them
mktemp,creates temporary file in a tmpdir folder with name like tmp.xxxxxxxxxx.
find /path/to/your/directory -regex '.*\.\(avi\|flv\)',search /path/to/your/directory for *.avi and *.flv files
find . -iname '*.jpg',find all *.jpg (case insensitive) files under current directory
"read -p ""$(echo -e 'Please Enter a Message: \n\b')"" message","read a line from standard input into variable ""message"" with escaped prompt ""please enter a message: \n\b"""
$@ | tee $FILE,"execute all arguments to a shell script and write the output to console and ""$file"""
find ./ -iname ! -iname dirname,"find all files and directories in the current directory tree except those whose name is ""dirname"", case insensitive"
tr -sc '[:punct:]' '\n',replace all non-punctuation characters with newlines from standard input
find . -name '*.gz',find all .gz archives in the current directory tree
find . -empty -exec rm {}\;,delete all the empty files in the current directory
find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print,list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo'
"find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname ""*.pl""",search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday
"find . \( -iname ""*photo*"" -or -name ""*picture*"" \) -and ! -type d -and -mmin -30",find all regular/normal files in the current folder whose name has the word photo or picture and which have been modified in the last 30 minutes
find . -type f -not -name '*ignore1' -not -name '*ignore2' | xargs rm,"remove all regular files from the current directory tree whose names do not end with ""ignore1"" or ""ignore2"""
"find /srv/www /var/html -name ""*.?htm*"" -type f",find all regular files matching the name pattern '*.?htm*' under '/srv/www' and '/var/html' directory tree
"find /user/directory/ -name ""*txt"" -mtime 0 -type f -printf '%p: ' -exec tail -1 {} \;",find all text files in user/directory/ which have been modified today and display the last line of these files
gunzip -c openssl-fips-2.0.1.tar.gz | tar xf ­-,"unzip and untar ""openssl-fips-2.0.1.tar.gz"""
find test1 -type f -name 'textfile.txt' -print,"search the ""test1"" directory recursively for regular files named ""textfile.txt"""
find $DIR/tmp/daily/ -name '*.tar.gz' | sort -n | tail -3,"find all files/directories with '.tar.gz' extension under $dir/tmp/daily/ directory tree, sort them numerically and show the last 3 of them"
"find . -name ""openssl"" | sed '/Permission denied/d;'",find all files/directories named 'openssl' under current directory tree without printing 'permission denied' error messages
find . -name file1 -or -name file9,find all file1 and file9 files/directories under current directory
ssh -l buck hostname,"ssh into ""hostname"" as user ""buck"""
set -g mouse on,tmux configuration to enable mouse support within tmux
find . -type f -empty | wc -l,display the count of total number of empty files in the current folder
echo something | read param,"save ""something"" into variable ""param"" in ksh"
sed 's/[^x]//g' filename | tr -d '\012' | wc -c,"count the number of ""x"" characters in ""filename"""
find . -name '*.js' -and -not -path directory,exclude directory from find . command
"find ""$DIR_TO_CLEAN"" -mtime +$DAYS_TO_SAVE | while read FILE; do rm ""$FILE""; done",delete files in $dir_to_clean that are older than $days_to_save days
ssh -f -N -L localhost:12345:otherHost:12345   otherUser@otherHost,forward port 12345 bound on 'localhost' to port 12345 on 'otherhost' as user 'otheruser'
chown user2:user2 -R subdir2,"recursively change the owner and group of ""subdir2"" to ""user2"""
find /var/www/ -path '*wp-admin/index.php' | xargs -i sh -c 'mv {} $(dirname {})/index_disabled',move *wp-admin/index.php files to *wp-admin/index_disabled under /var/www/
wc -l `tree -if --noreport | grep -e'\.php$'`,"count the number of lines in all "".php"" files in the current directory tree"
"yes | grep y | sed 100q | awk '{printf( ""%03d "", NR )}'; echo","print a single line of numbers from ""001"" to ""100"""
sort | uniq -c | sort -n,print a count of each unique line from standard input sorted from least frequent to most frequent
"find . -path ""*.git*"" -prune -o -type f -print","display all the regular files in the current folder excluding those that are present in the path ""git"""
mkdir certs/,"make directory ""certs"""
"find . -name ""file.ext"" -execdir pwd ';'","find all files named ""file.ext"" in the current directory tree and print the path names of the directories they are in"
echo 'test/90_2a5/Windows' | xargs dirname | xargs basename,"extract the second-to-last slash-separated path component, ie. ""90_2a5"" in this case."
"find . -type f -maxdepth 1 -print0 | xargs -0i sh -c ""cat /dev/null > \""{}\""""",truncate all regular files under the current directory
"find / -maxdepth 1 -xdev -type f -exec grep -li ""stringtofind"" {} + | parallel sed ""'/./d'"" '{}'",delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions
cat dbdump.sql.gz | gzip -cd | mysql,"uncompress file ""dbdump.sql.gz"" through standard input and pass to ""mysql"""
"find . -type l | while read f; do /bin/cp -rf --remove-destination -f $(find . -name $(readlink ""${f}"")) ""${f}"";done;",convert symlink to regular file
"find /home/www -name ""*.java"" -type f -print0 | xargs -0 sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g'",find all *.java files under current directory and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files
file utf8.txt,display human-readable file type description of utf8.txt
"tmp=$(mktemp -d $(dirname ""$1"")/XXXXXX)","create 6-letter named temporary directory in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmp'"
ln -s `cd \`dirname $2\`; pwd`/`basename $2` $1/link,"create a symbolic link named ""link"" in directory named as value of the variable $2 to a file that named as result of the command `cd \`dirname $2\`; pwd`/`basename $2`"
find /tmefndr/oravl01 -type f -newer /tmp/$$,find all regular files newer than '/tmp/$$' (where $$ expands to current process id) under '/tmefndr/oravl01' directory tree
find /usr -perm 0777 -print,display all the files in the /usr folder which have the permissions 777
"find . -name ""*.php"" -print0 -fprint >(pv --line-mode) | xargs -0 chmod 755",change the permission of all php files in current folder
"find /usr -name ""Chapter*"" -type f","search through the /usr directory for all files that begin with the letters chapter, followed by anything else."
"find . -name ""*.pyc"" | xargs -i rm '{}","search for all the "".pyc"" files inthe current folder and remove them"
"yes | head -n 10 | awk '{printf( ""%03d "", NR )}'    ##for 01..10","print a single line of numbers from ""001"" to ""010"""
"find ./ -name ""*.plist""",find all *.plist files/directories under current directory
find /var/www -type d -print0 | xargs -0 chmod g+s,force the group stickiness for directories under /var/www
find . -name '*.[ch]' -exec grep $i {} | less,find all files/directories with '.c' or '.h' extension under current directory tree and search for the regex expanded by the variable $i and show the output by paging through one screenful at a time
cp -rs /mnt/usr/lib /usr/,duplicate directory tree under /mnt/usr/lib to /usr but creating symlinks to files instead of copying them.
"find -iname ""MyCProgram.c"" -exec md5sum {} \;","calculate the md5sum of all the files with name ""mycprogram.c"", ignoring case"
find -used +2,find all files that have been used more than two days since their status was last changed
gzip -dc /file/address/file.tar.gz,"decompress ""/file/address/file.tar.gz"" to standard output"
find /dump -type f -name '*.xml' | sed -e 's/\.xml$/.out/' | xargs make -j8,invoke make for all the xml files in the current folder by changing their extension from xml to log.
find ~ -type f -name 'foo*' -ok ls -l '{}' ';',find all files named 'foo' under your home directory and list them with confirmation prompt
"echo ""* * * * * script"" | crontab -","erase user's cron jobs and add one cron job to run ""script"" every minute."
cp -Rvn /source/path/* /destination/path/,"recursively copies everything from '/source/path/*' to the '/destination/path/', preserving from overwriting existing files, and printing info message on each operation."
find /home/david -amin -10 -name '*.c',"display all the "".c"" files which have been modified in the last 10 minutes"
"cat `find src/js -type f -name ""*.js"" -print0 | xargs -0 stat -f ""%z  %N"" | sort -n | sed -e ""s|[0-9]*\ \ ||""` > public/js/myCleverScript.js",find all the java script files in a folder and display them in a sorted order based on their type and save the output to a file
set | grep -oP '^\w*X\w*(?==)',list environment variables whose name matches '^\w*x\w*'
"split -l ${2:-10000} -d -a 6 ""$1""","split ""$1"" into files of at most ""$2"" or default 10000 using a numeric suffix of length 6"
find . -newer /reference/file,find all files/directories under current directory that were modified later than /reference/file
chgrp www-data /home/www-user/php_user.sh,changes group ownership of '/home/www-user/php_user.sh'  to 'www-data'.
zcat FILE | awk '{ ...}',"execute awk command '{ ...}' on compressed file ""file"""
cat file | grep pattern | paste -sd' ',"search for ""pattern"" in ""file"" and join each line by a space"
sudo mount -o remount -o exec /dev/sda7,"remount ""/dev/sda7"" partition as executable"
tmux show-environment -g | grep RBENV,check if *rbenv* variable is defined in global environment
"cd ""${dirs[-1]}""","go to directory pointed by last element of array ""dirs"" in bash version 4.2"
find -type d -exec rmdir --ignore-fail-on-non-empty {} + ;,remove empty directories
find . -name *.c -exec grep -n -e blash {} \;,"search the *.c files residing in the current directory tree for string ""blash"""
find . | xargs grep 'chrome',"search the files from the current directory tree for ""chrome"""
find . -name core -exec rm {} \;,search core files in current direcory and delete .
"find /usr/src -name ""*.html"" | xargs grep -l foo | wc -l","count the *.html files residing in the /usr/src directory tree and containing string ""foo"""
"kill -9 $(ps -A -ostat,ppid | grep -e '[zZ]'| awk '{ print $2 }')",clean up all zombie processes by instantly killing their parent process with sigkill signal.
find \( -size +100M -fprintf /root/big.txt %-10s %p\n \),display all the files in the current folder which are bigger than 100mb and save the output list to the file /root/big.txt
"ssh-keygen -f ""/root/.ssh/known_hosts"" -R gitlab.site.org",remove gitlab.site.org from root's known hosts file.
"find . -name ""*.txt"" | xargs rm",remove all .txt files in and below the current directory
svn status | grep '\!' | cut -d' ' -f2- > removedProjs,write list of missing files in subversion repository to file removedprojs.
man find | grep ...,search for the regex ... in the manual of the find command
find /usr/share/doc -iname readme\*,find all files/directories under '/usr/share/doc' directory tree that contain 'readme' (case insensitive) at the beginning of their names
find . | grep -qi /path/to/something[^/]*$,find files/directories under current directory that matches the regex /path/to/something[^/]*$  in their paths
find /somefolder -type f -name $FILE_PATTERN,find all files under /somefolder matching the pattern expanded by $file_pattern in thier names
find . -iname '*test*' -exec cat {} \;,"concatenate all files under the current directory and below that contain ""test"" in their names"
"sort -k1,1 -k2,2 -t';' --stable some_data","sort ""some_data"" by the first and second "";"" delimited entries and stabilizing the sort"
"ifconfig en0 | awk '$1 == ""inet"" {print $2}'",gets ip address of 'en0' network interface.
"find . -iname ""*.php~"" -exec mv {} /mydir \;",move all *.php~ (case insensitive) files under current directory to /mydir
"find folder1/ -type f -printf ""%d\t%p\n"" | sort -n | sed -e ""s|[0-9]*\t||""",display all files in current folder in sorted order of depth
ssh -X whoever@whatever.com,login in 'whatever.com' as user 'whoever' with x11 forwarding to enable gui programs on remote to be run
"git ls-files | xargs file | grep ""ASCII"" | cut -d : -f 1 | xargs wc -l",count number of lines for each file containing ascii text under git repository.
find /srv/${x} -mindepth 1 -type f -not -amin -10080 -exec rm {} \;,"search directory tree /srv/${x} for regular files accessed at least 10080 minutes ago, and remove those files"
find /path/to/directory/folder{1..50} -name '*.txt'  2>/dev/null,search directories /path/to/directory/folder{1..50} for .txt files
"$ ls -Fltr ""./my dir"" ""./anotherdir""","prints long listing of directories ""./my dir"" and ""./anotherdir"" sorted from oldest to newest, with appended indicators."
ping -c 4 -q google.comz,"send 4 ping requests to host ""google.comz"", displaying only the summary info after the last request completed."
find /path/to/dir -name '*.gz' -exec zgrep -- 'pattern' {} +,"this will recursively grep all the files, compressed or uncompressed.2 if you want to grep only the compressed files then find + zgrep would be a better option."
read -s foobar,"read a line from standard input into variable ""foobar"" and suppress showing user input"
find . | xargs -I'{}' mv '{}' ~/play/,move all files/directories under current directory to ~/play
"full_backup_dir=""$(find . -depth \( -wholename \./\.\* \) -prune -o -print | cpio -oav)""","find all files in current directory excluding hidden files, archive them and put the output into variable  full_backup_dir"
find . > files_and_folders,display all files in current directory and save the output to a file
find . -type f -mtime -3,find all files that are modified in last 3 days
"su oracle -c ""/home/oracle/database/runInstaller"" &","run programm ""/home/oracle/database/runinstaller"" as user oracle in background"
"touch ""$correctFilePathAndName""","create an empty file (or update timestamp of file) specified by variable ""correctfilepathandname"""
"ps aux | awk '{print $4""\t""$11}' | sort | uniq -c | awk '{print $2"" ""$1"" ""$3}' | sort -nr |grep mysql","print cpu usage and memory usage of processes running ""mysql"""
extract_dir=$(diff .dir_list_1 .dir_list_2 | grep '>' | head -1 | cut -d' ' -f2),"save the first word of the first difference in "".dir_list_2"" compared to "".dir_list_1"" into variable ""extract_dir"""
shred -v -n 1 -z -u /path/to/your/file,"overwirte file '/path/to/your/file' with random content, then overwrite with zeroes, and remove, showing progress while execution."
cat infile | sed 's/\r$//' | od -c,"remove ""\r"" at the end of each line in ""infile"" and display the result as printable characters or backslash escapes"
cd foo | cat,change to directory 'foo' and print to terminal all received on standard input
sort file1 file2 | uniq -d | wc -l,"count the number of unique duplicate lines in ""file1"" and ""file2"" combined"
wc -l < $FILE,counts lines in file $file.
find . -name '*shp*'   -execdir mv '{}/*' shp_all ';',find all *shp* directories under current directory and move '*' (literal) file/directory inside those directories to shp_all
$sudo chown root file.sh,change owner of the file file.sh to user root
"set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000","set variable ""maven_debug_opts"" to ""-xdebug -xnoagent -djava.compiler=none -xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"" on windows machines"
seq 1 100000 | tail -n +10000 | head -n 10,"print lines 10000 to 10010 from input ""seq 1 100000"""
find . -type d -mtime $FTIME,find all directories under current directory tree that were modified $ftime days ago
file `which file`,"print file type of the executable file of command ""file"""
find /home -perm /u=s,display all the files in the folder /home which have the setuid bit enabled
ls -tQ | tail -n+4 | xargs rm,removes all files from current folder but 3 newest ones
"file -ib ""$file""","display mime type of file specified by variable ""file"""
pushd %Pathname%,adds %pathname% to the dirs stack (windows format).
tr -d -C X <infile | wc -c,"count the number of ""x"" characters in ""infile"""
find . -name .snapshot -prune -o \( \! -name *~ -print0 \) | cpio -pmd0 /dest-dir,create a backup of all the files in the current folder excluding those that are present in the .snapshot sub directory and excluding the swap files (files ending with  ~)
"find . -name ""abc"" -exec grep ""xyz"" {} \;","search all files called ""abc"" that reside in the current directory tree for string ""xyz"""
find . -type f -exec file {} \; > /tmp/filetypes.log,execute the `file' command on all regular files from the current directory tree and save the output as /tmp/filetypes.log
"find /store/01 -name ""*.fits"" -exec chmod -x+r {} \; \","change the permissions of all the files ending with ""fits"" in the folder ""/store/01"""
"find . -type f -exec echo chmod u=rw,g=r,o= '{}' \;","print chmod commands that can change permissions of regular files residing in the current directory tree to u=rw,g=r,o="
mkdir -p foo/bar/baz,create intermediate directories foo and bar as required and directory foo/bar/baz
find man5 -print,display all files in a folder
find ./ -type f | tee /tmp/grep1 /tmp/grep2 >/dev/null,write the list of regular files in the current directory tree to files /tmp/grep1 and /tmp/grep2
"find / -xdev -name ""*.txt""",find all the text files in the file system and search only in the disk partition of the root.
find / -iname top,find all files/directories named 'top' (case insensitive) in the entire filesystem
find your/dir -prune -empty -type d,"find directory ""your/dir"" if it is empty"
"read -s -p ""Enter your password: "" passwd","silently read a line into variable ""passwd"" with prompt ""enter your password: """
"find . -name ""*.trc"" -ctime +3 -exec ls -l {} \;","search the current directory tree for the files with extension ""trc"" and list them if they are more than three days old"
find .  -type f -links +2 -exec ls -lrt {} \;,find all file which have more the 2 hard link
(find /boot | sed s'/^/STDOUT:/' ) 3>&1 1>&2 2>&3 | sed 's/^/STDERR:/',"display all files in the boot directory prepending each filename with stderr, stdout accordingly"
screen -S lynx lynx,assign a name when starting a screen session
sudo yum --releasever=2013.09 update openssl,update 'openssl' package to '2013.09' version.
cat numbers.txt,"print the contents of ""numbers.txt"""
rsync --progress -avhe ssh /usr/local/  XXX.XXX.XXX.XXX:/BackUp/usr/local/,"archive ""/usr/local/"" to ""/backup/usr/local/"" on host ""xxx.xxx.xxx.xxx"" via ssh and show progress"
"find /Path -name ""file_name*""","search the /path directory tree for files matching pattern ""file_name*"""
find . -name .DS_Store -exec rm {} \;,remove all the ds_store files in the current directory
"find .  -name ""*.txt"" -type f -daystart -mtime +89 | xargs rm -f",force remove all the text files that have not been modified in the last 89 days
date -d @1278999698 +'%Y-%m-%d %H:%M:%S',convert epoch second timestamp to date
find .  -name '*.txt' -exec rsync -R {} path/to/dext \;,remote copy all text files from one location to another
rm -ri *,remove everything in a current folder prompting user on each action.
find . -newer tmpfile,find files newer than `tmpfile' starting from the current directory
ping -b 10.10.0.255 | grep 'bytes from' | awk '{ print $4 }',"continuously send ping requests to broadcast address ""10.10.0.255"" and print the ip addresses who respond"
find /usr/ports/ -name pkg-plist\* -exec grep -l etc/rc.d/ '{}' '+' | wc -l,count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'etc/rc.d/'
"find /mycool/project/ -type f -name ""*.py"" -print0 | xargs -I {} -0 grep -H --color ""methodNameHere"" ""{}""","search for the word ""methodnamehere"" in all the python files in the folder ""/mycool/project/"" and display color on the matched lines in the output"
sudo chown -R $USER ~/tmp,"recursively change the owner of all files in ""~/tmp"" to ""$user"""
"for i in `find . | grep "".xml.bz2$""`; do find_graph -build_graph $i.graph $i; done","find all *.xml.bz2 files under current directory and run the command find_graph with -build_graph, $i.graph and $i as it's arguments where $i is expanded to each file path"
find /home -name Trash -exec rm {} \;,"remove all files and directories in the /home directory tree whose names are ""trash"""
"egrep -R ""word-1|word-2” directory-path","recursively finds strings with 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings."
find . -size +10k -type f -maxdepth 1 -exec ls -lh {} \; > myLogFile.txt,display a long list of all the files that are bigger than 10kb in current folder and save the output to the file mylogtxt.text
whoami,print the user name of the current user
su -l kenneth -c 'echo $PROJ_PATH',print value of the variable $proj_path of the kenneth system user environment
"cat <(fgrep -i -v ""$command"" <(crontab -u test -l)) <(echo ""$job"") | crontab -u test -",create new crontab set for user 'test' including $job and only jobs from current crontab of 'test' user that don`t contain $command
find . -type f -exec echo {} \;,print the names of all regular files in the current directory tree
"read -n1 -p ""Do that? [y,n]"" doit","read a single character from standard input into variable ""doit"" with prompt ""do that? [y,n]"""
nohup vlc -I dummy --quiet ~/mp3_directory/* &,"start a vlc process with a dummy (headless) interface in the background, immune to sighup (hangup) signals, to play all media files in mp3_directory from the user's home directory."
"find /home/user1 -name ""*.bin""","search the /home/user1 directory tree for files whose names end in "".bin"""
cat text,"display the contents of ""text"""
find . -name '*.h' -execdir /bin/diff -u '{}' /tmp/master ';',compare each c header file in or below the current directory with file /tmp/master
find /home -name tecmint.txt,find all the files under /home directory with name tecmint.txt
find /target/dir -type l ! -exec test -e {} \; -print,search for all the symbolic links in a folder and display all the broken/non-existent links
find . -name \*.sql -not -samefile $oldest_to_keep -not -newer $oldest_to_keep,find all *.sql file that are not newer than  $oldest_to_keep excluding the  $oldest_to_keep file
curl -s www.google.com | md5,"find md5sum of content from ""www.google.com"""
ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1',gets list of ip addresses of all network interfaces.
find /home/user/demo -type f -print,find all regular files under and below /home/user/demo/
"grep -L -r 'Subject: \[SPAM\]' . | while read f; do mv ""$f"" out; done","move all files that contain ""subject: \[spam\]"" to ""your_file"""
find ./ -name '*~',find all '*~' files under current directory
find . -type f -exec sh -c 'echo first; true' \; -exec echo second \;,find all files in current directory and execute multiple commands for each file
vi $(find . -type f -name 'btree*.c'),run vi with all btree*.c files under current directory
"rsync -rl --delete-after --safe-links pi@192.168.1.PI:/{lib,usr} $HOME/raspberrypi/rootfs","copy the entire ""/lib"" and ""/usr"" directory including symlinks from ""pi@192.168.1.pi"" to ""$home/raspberrypi/rootfs"" and delete files after the transfer"
find ./polkadots -name 'image.pdf' -exec convert -transparent white -fuzz 10% {} image.png \; -print,convert all image.pdf files to image.png files under ./polkadots
find /home/me -type d,find all directories under /home/me
"find whatever ... | xargs -d ""\n"" cp -t /var/tmp",find all files/directories under whatever and ... directory and copy them to /var/tmp
echo this dir: `dirname $BASH_SOURCE`,prints path location of $bash_source file.
"find /path-to-directory -type f -mtime +60 -printf ""%T@ %p\n"" | sort","find all regular files that were modified more than 60 days ago under '/path-to-directory' directory tree, sort them according to timestamp and print the filenames preceded with the timestamps"
find -mindepth 2 -maxdepth 2,find all files/directories in level 2 down the current directory
"find ""`pwd`"" -type f",find all files under current directory
IFS= read -s -n 1 SELECT,"unset ifs and read a single character of standard input with no echo and save the response in variable ""select"""
"find . -type f -name '*.html' -exec sed -i -e '1r common_header' -e '1,/STRING/d' {} \;",find all *.html files under current directory and for each file replace the first occurrence of string and previous lines with the content of common_header file
curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash,"download file  ""https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh"" and execute it"
yes 0 | script -c 'ispell text.txt' out.txt,"automatically spell check file ""text.txt"" using ""ispell"" command and log the output to ""out.txt"""
"find . -name '*.deb' -printf ""%f\n""","display only the file names of all the files which end with "".deb"""
cd $(git rev-parse --show-cdup),go to top level of git tree using relative path
df -ih,report file system inodes usage in human readable format
sudo chmod 755 .git/hooks/pre-commit,"change permissions of "".git/hooks/pre-commit"" to 777"
find . \! -name '[A-Z] *' -exec lpr { }\;,print all the files in the current folder which do not begin with a capital letter
find . type -f -ctime -2,search the current directory recursively for regular files last changed less than 2 days ago
find . -exec $0 {} +,find all files/directories in current directory and execute the script itself with minimal invocation for those files/directories
find . -size +1024 ?print|xargs -i rm \;,delete all the files in the current folder which are bigger than 1kb
find . -type f -perm 644 -exec chmod 664 {} \;,find all files with 644 permission and change the permission to 664
find . -name '*.axvw',find all *.axvw files/directories under current directory
find . | xargs grep 'word' -sl,"recursively finds all files and prints only names of files that contain ""word"" and suppressing error messages ."
ssh -X -C -L 5900:localhost:5900 remotehost x11vnc -localhost -display :0,"tunnel vnc port 5900 over compressed ssh and x11 forwarded session to ""remotehost"""
"tac temp.txt | sort -k2,2 -r -u","eliminates partially duplicate lines by column, keeping the last occurrence"
LC_ALL=C find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f,find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$' in their names with locale set to default c locale
find / -user root,find all files that belong to user root
"find / -xdev -name ""*.rpm""","find all files, starting from / but ignoring removable media, whose names end with "".rpm"""
"mount /mnt/mountpoint -oremount,rw","remount ""/mnt/mountpoint"" with read and write permission"
find / -iname “*.mp3″ -type f -print0 | xargs -0 -I ‘{}’ mkdir -p /mnt/mp3/`basename {}`,search for all the regular/normal mp3 files in the file system and create a directory int /mt/mp3/ with the basename of the mp3 file
find /foo/bar -name '*.mp4' -exec mv -t /some/path {} +,move all *.mp4 files from directory /foo/bar and its subdirectories to /some/path
"mount -o ro,remount /dev/stl12 /system","remount ""/dev/stl12"" on ""/system"" as read only"
history -a,append history lines from this session to the history list
echo $string | cut -d';' -f2,print second field from semicolon-seprated line $string.
find /tmp /var/tmp ~ -type f -size +10M -mtime +60 -ctime -100 -exec file -N -i -- {} + | sed -n 's!: video/[^:]*$!!p',find all the video files which are bigger than 10 mb which have not been modified in the last 60 days but have been changed in the last 100 days in /tmp and /var/tmp folder home folders
find $LOCATION -print -exec shred $TIMES -u '{}' \;,"finds all files in $location, prints file names, overwrite files with random content $times times, and finally remove them."
"find /usr/src/linux -name ""*.html""",find *.html files in the /usr/src/linux directory tree
find /PATH_to_SEARCH -ls | sort -n | awk '!seen[$1]++',"list the files/directories under /path_to_search, do a numeric sort and print the ones with different inode numbers"
"find . \( -name ""*.php"" -or -name ""*.html"" \) | xargs grep -l StringA | xargs sed -i -e 's/StringA/StringB/g'","replace all occurrences of ""stringa"" with ""stringb"" in the *.php and *.html files residing in the current directory tree"
find . -iname 'MyFile*',"find files whose name starts with ""myfile"", ignoring the case"
find . -type f -not -name '*txt' | xargs rm,recursively removes all files in a current folder but '*txt' files.
~ $ . trap.sh | cat,print output of script 'trap.sh'
find / -type f -print0 | xargs -0 grep -liwZ GUI | xargs -0 rm -f,"remove all files from the system whose path names contain ""gui"""
alias unix='echo $(date +%s)',"set alias ""unix"" for command 'echo $(date +%s)'"
ls -l | head -2 | tail -1,"print the second line of output of ""ls -l"""
find / -size +3 -print,find all the files in the file system which are bigger than 3 bytes
find $SrvDir* -maxdepth 0 -type d,print the directories that are taken by the glob pattern $srvdir*
"mysqldump -e --user=username --password=pswd database | gzip | uuencode my-dbbackup.`date +""\%Y-\%m-\%d""`.gz | mail me@domain.com","backup mysql database ""database"" with ""username"" and ""pswd"", compress with gzip and add the time stamp before emailing to ""me@domain.com"""
find /some/dir -maxdepth 1 \( -name '*.c' -o -name '*.h' \) -print,display all the c files and the header files in the path /some/dir and do not search in sub directories
"grep ""^core id"" /proc/cpuinfo | sort -u | wc -l",reports count of processors in system.
find . -print | xargs ls,list all files and directories from the current directory tree
"find . -name '*.txt' | while read line; do echo ""Copying '$line' to /tmp""; cp -- ""$line"" /tmp; done",copy all *.txt files from the current directory tree to /tmp
find . -type f -print0 | xargs -0 chmod 644,assign permissions 644 to files in the current directory tree
join -a1 -a2 <(sed s/^Gene/00ne/ S43.txt | sort) <(sed s/^Gene/00ne/ S44.txt | sort) | column -t | sed s/^00ne/Gene/,"create a table containing all information from s43.txt and s44.txt, merging lines where the first field of both files matches, and keeping the line that starts with ""gene"" at the start of the file."
yes x | head -n 10,"print 10 lines of a single ""x"""
diff -qr dir1/ dir2/,"print which files differ in ""dir1"" and ""dir2"" recursively"
find -mtime +7 -print | grep -vf file.lst > found.lst,"display all the files in the current folder which have not been modified in the last 7 days and which are not in the list ""file.lst"" and save the output to a file"
"find /mydir -type f -name ""*.txt"" -print0 | xargs -0 chown root $(mktemp)","change owner of the files into directory ""/mydir"" with "".txt"" extension to user root"
find . -name file_name,find all files/directories named 'file_name' under current directory tree
"find . \( -iname ""*.png"" -o -iname ""*.jpg"" \) -print -exec tar -rf images.tar {} \;",append all png and jpg files to tar archive 'images.tar'
"find /usr/src -name ""*.html"" -execdir /usr/bin/grep -H ""foo"" {} ';' | wc -l","count the total number of lines in all html files under /usr/src that contain string ""foo"""
scp -i /path/to/your/.pemkey -r /copy/from/path user@server:/copy/to/path,"recursively copy local file/directory ""/copy/from/path"" to remote location ""/copy/to/path"" on host ""server"", connecting as ssh user ""user"" and using identity key file ""/path/to/your/.pemkey"" instead of the default in ~/.ssh/"
md5sum <(zcat /tmp/tst.gz) <(bzcat /tmp/tst.bz2) <(lzcat /tmp/tst.lzma) <(xzcat /tmp/tst.xz),"calculate md5sum of the contents of the archives '/tmp/tst.gz', '/tmp/tst.bz2', '/tmp/tst.lzma' and '/tmp/tst.xz'."
find . -name .svn | xargs rm -fr,delete all .svn files/directories under current directory
"founddata=`find . -name ""filename including space"" -print0`",search for all the files having spaces in the current folder and save the output to the variable founddata
find . -type d -perm 777 -print -exec chmod 755 {} \;,find all 777 permission directories and use chmod command to set permissions to 755
od file-with-nulls | grep ' 000',"search for "" 000"" in the hex dump of ""file-with-nulls"""
"cd ""$(xsel)""","go into the directory whose name is selected in the x window system, ie. double-clicked in a terminal window."
"find /path -type d -exec chmod 0755 ""{}"" \;",change permissions to 0755 for all directories in the /path directory tree
find . -type d -mtime 0 -exec mv {} /path/to/target-dir \;,find directories in the current directory tree that were modified within the last 24 hours and move them to /path/to/target-dir
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs rm","find ""*prefs copy"" files in the /mnt/zip directory tree and remove them"
find . -maxdepth 2 -name '*.tex',find all *.tex files/directories in maximum 2 levels down the current directory
du -a /var | sort -n -r | head -n 10,"list the 10 largest files or directories and their sizes under (and including) ""/var"""
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" -type d | wc -l); let n--; printf ""%4d : %s\n"" $n ""$dir""; done",find list directory  with sub-folder count .
fifo_name=$(mktemp -u -t fifo.XXXXXX),generates temporary file name with full path by template 'fifo.xxxxxx' and saves it to variable 'fifo_name'
"find "".performance_test"" -not -path "".performance_test/prune_me*"" -exec bash -c 'echo ""$0""' {} \;",list all files under .performance_test directory except .performance_test/prune_me directory
find -depth -type d |sed 'h; :b; $b; N; /^\(.*\)\/.*\n\1$/ { g; bb }; $ {x; b}; P; D',list all leaf directories (directories which don't contain any sub-directory) under current directory
diff -ENwbur repos1/ repos2/,"compare each file in ""repos1/"" and ""repos2/"", treat absent files as empty, ignore differences in whitespace and tab expansions, and print 3 lines of unified context"
find . -type f -print | xargs -L1 wc -l,prints line count of each file within current directory.
find . -not -path '*/\.*',find all files/directories under current directory tree excluding hidden files/directories
find /your/source/dir/ -iname '*.txt.mrg' -exec ln -s '{}' /your/dest/dir/ \;,"create symbolic links in directory ""/your/dest/dir/"" to all files located in ""/your/source/dir/"" and have filename extension ""txt.mrg"""
ps aux | grep '[t]erminal',"find process ""terminal"" displaying the searching process"
env | grep DUALCASE,finds if environment variable like 'dualcase' exists in environment.
cat /home/pkglist.txt | xargs yum -y install,"installs all packages from a '/home/pkglist.txt' list, answering 'yes' on all questions."
"find -type f -exec grep -l ""texthere"" {} +","findx all files having text ""texthere"" recursively in a current folder, and prints only file names with matching strings."
find . -mtime -7 -print0 | xargs -0 tar -cjf /foo/archive.tar.bz2,get all files in a current directory modified in the last 7 days
"find ""$DIR_TEMPORAL"" ""$DIR_DESCARGA"" -maxdepth 2 -name ""$nombre"" -printf '%f.torrent\n'",find all files/directories with name pattern $nombre that are at most 2 levels down the $dir_temporal and $dir_descarga directories and show only the file names (without parent path) appended with '.torrent'
td=$( mktemp -d ),creates temporary folder and saves path to it in 'td' variable.
"find . -type f -name '*.php' -exec bash -c 'wc -l ""$0""' {} \; | awk '{s+=$1} END {print s}'",counts total lines in all *.php files.
head -c 100 < /dev/zero | tr '\0' '=',print a line of 100 '=' characters
alias vimrc='$EDITOR ~/.vimrc',"set alias ""vimrc"" for command ""$editor ~/.vimrc"""
tac a.txt | awk 'NF{print $NF; exit}',print the last word in a.txt
find /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents,find all .txt files in the /home/user1 directory tree and copy them to /home/backup
"find /home -name "".*""",display all the hidden files in the folder /home
"find . -name ""*.java"" -exec sed -i s/foo/bar/g \;",find *.java files in the current directory with gnu find and replace foo with bar in those files
find . -type f -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {},find the largest 10 files (regular files) under current directory
find . \( \! -user xx -exec chown -- xx '{}' + -false \),"change all files in the current directory tree to owner ""xx"""
sort ip_addresses | uniq -c,"print a count of each unique line in ""ip_addresses"""
"find . -name ""*"" -maxdepth 1 -exec sh -c 'mv ""$@"" ""$0""' /home/foo2/bulk2 {} +",move all files in the current folder another folder and do not move the files in the sub folder
yum --enablerepo=remi php-mssql,installs 'php-mssql' package with enabling repository 'remi'.
"find ./ -type f | xargs grep ""foo""","recursively finds string with text ""foo"" in all files of a current folder."
find . -type d -iname '*foo*' -depth -exec rename 's@Foo@Bar@gi' {} +,"recursively search for all directories containing ""foo"" (case insensitive) under the current directory, renaming them to replace ""foo"" (case insensitive) with ""bar"""
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^use "" {} \; | sort -t "":"" -k 2 -n -r","get the number of ""use"" statements in all php files, ordered"
"find ""*.gz"" -exec gunzip -vt ""{}"" +",find all .gz archives in the current directory tree and check if they are valid
diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq,finds files in 'directory' folder with the same name and location but different content than files in 'directory.original' folder and prints location of such files.
fif2=$(mktemp -u),creates temporary file and saves path to it in 'fif2' variable.
find -type d -and -atime +3,display all directories which have not been accessed in the last 24*3 hours
find b -type f -cmin -5,find recursively all regular files changed within the last 5 minutes starting from directory b
"echo $(cd $(dirname ""$1"") && pwd -P)/$(basename ""$1"")",prints absolute file path of a file
find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644,change permissions to 644 for all regular files under and below /path/to/somedirectory/
watch -n 3 -d ./my_script.sh,"execute ""./my_script.sh"" every 3 seconds and highlight the differences in successive runs"
"find . -name ""*.flac"" -exec ffmpeg -i {} -ab 160k -map_metadata 0 -id3v2_version 3 {}.mp3 \;","find all the "".flac"" files in the current folder and convert them to mp3 with 160k bit rate"
diff -r dir1 dir2,display differences between directories dir1 and dir2.
"alias my_command=""$oldalias --fail-if-command-contains=$bad_string""","set alias ""my_command"" for command ""$oldalias --fail-if-command-contains=$bad_string"""
mkdir -m 777 dirname,"make directory ""dirname"" with permissions set to 777"
find . -maxdepth 2  -type f,find all files in maximum 2 levels down the current directory
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^class "" {} \; | grep "":[2-99]"" | sort -t "":"" -k 2 -n -r",find php files containing 2 or more classes
./script.sh | sort -u,prints only unique lines of './script.sh' output.
LINE=$(top -b -n 1 | tail -n +8 | head -n 1 | tr -s ' '),"set variable line to full process info of process currently taking the most cpu time, squeezing multiple consecutive spaces into one."
"find /home/vmail/ -type d -path ""*/*/Maildir/.LearnAsHam/cur"" -exec sh -c '(cd {} && mv ./* ../../.Inbox/cur)' ';'","find directories in /home/vmail that match pathname ""*/*/maildir/.learnasham/cur"", and move them to folder .inbox/cur"
set -o xtrace,set the 'xtrace' shell option
find / -mmin -1 -print,show the list of files modified less than a minute ago
"find ""$source_dir"" -name ""*.$input_file_type"" -print0",find all *.$input_file_type files/directories under $source_dir with the null character as the delimiter
rename s/0000/000/ F0000*,"rename all files in current directory whose name starts with 'f0000', trimming a zero from any sequence of four zeroes in the name."
"find /home -name ""*.txt"" -size 100k",find all files/directories with '.txt' extension under '/home' directory tree that are exactly 100kb in size
program1 | tee >(program2) >(program3),"pipe the output of ""program1"" to both ""program2"" and ""program3"""
"find / -name  ""*.txt"" -fstype vfat 2> /dev/null",find all *.txt files on the vfat file system
who | awk -F '[()]' '/orschiro/{print $(NF-1)}' | grep -v orschiro | uniq,"print display of ""orschiro"" user"
"cat /etc/passwd | sed 's/^\([^:]*\):.*$/crontab -u \1 -l 2>\&1/' | sh | grep -v ""no crontab for""","print crontabs of all users in system, skipping messages that some users don`t have crontab."
find ./photos/john_doe -type f -name '*.jpg' -exec du -ch {} + | grep total$,find the total size of *.jpg files within the directory tree ./photos/john_doe
"cal $m $y | sed -e '1,2d' -e 's/^/ /' -e ""s/ \([0-9]\)/ $m\/\1/g""","prints dates of $m month in $y year, preceded by month number and slash like ' 10/1'."
find /home -name core -exec rm {} \;,remove all the core files in the home folder
vagrant ssh-config --host default | ssh -F /dev/stdin default,"ssh into default vagrant host without running ""vagrant ssh"" and without an interactive ssh shell"
find . -mtime 1,find all the files that were modified exactly one day ago
ping -c 2 www.google.com,"send two ping requests to ""www.google.com"""
md5sum * | sort | uniq -w32 --all-repeat=separate | awk '{print $2}',list files in the current directory that have at least one duplicate
cp -r $1 $2,recursively copies '$1' directory to '$2' directory.
"find . \( -name ""*.c"" -or -name ""*.cpp"" -or -name ""*.h"" -or -name ""*.m"" \) -print0 | xargs -0 wc",count lines of c or c++ or obj-c code under the current directory
rsync -avR $i /iscsi;,"archive directory specified by variable ""i"" to ""/iscsi"" preserving relative paths."
"ping -c4 www.google.com | awk '/---/,0'","print the ping statistics of 4 requests to ""www.google.com"""
history | grep -C 5 ifconfig,"search for ""ifconfig"" in the output of ""history"" and print 5 lines that precede and follow"
find . -perm 777 -type f -exec ls -l {} \;,long list al the files in the current directory which have all the permissions
"read -e -p ""Enter your choice: "" choice","read a line of standard input with prompt ""enter your choice: "" in an interactive shell and save the response to variable ""choice"""
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | grep screen | wc -l,check whether current terminal is opened in a screen session.
find . -name '*.log' -mtime +3 -print0 | xargs -0 -n 500 -P 4 bzip2,"create a zip of log files in the current directory which have not been accessed in the last 3 days (-p is for parallel processing for a 4 cpu machine, -n is for maximum work units)"
find . -type f -mtime +7 -mtime -14 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`,find files that were modified more than 7 days ago but less than 14 days ago and archive them
find . -links 1,find files in the current directory tree that have one link
find . -print0 -name '*.coffee'|xargs -0 grep -m1 -ri 're',search for first match of the case insensitive regex 're' in all *.coffee files under current directory and print the file paths along with the matches
find $homeDirData -type d -mmin +10 -print0 | xargs -0 rmdir,removes all empty folders with modification time more that 10 minutes ago from $homedirdata folder.
rsync -a --progress --remove-source-files src/test/ dest,"move all files from ""src/test/"" to ""dest"" displaying progress"
find ~/tmp -type f -mtime 0 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}END{print total/1024}',search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them in mb
find / -size +1000 -mtime +30 -exec ls -l {} \;,print all files that exceed 1000 blocks and were modified at least a month ago
"date +""%T""",print timestamp as hh:mm:ss
md5sum main.cpp*,calculate md5 sums for each files matching 'main.cpp*'
"find . -name ""*.css""",find all css files
"find . -type f -name \* | grep ""tgt/etc/*""",find all regular files under current directory tree that match the regex 'tgt/etc/*' in their paths
find . -name Chapter1 -type f,search in the current directory for any file named chapter1.txt
mkdir -p es/LC_MESSAGES,make directorie(s) 'es/lc_messages' as needed in the current directory
diff <(sort -n ruby.test) <(sort -n sort.test),"sort numerically and compare files ""ruby.test"" and ""sort.test"""
"find / -type f -print | xargs grep ""device""",search for the string 'device' in all regular files in the entire filesystem
find -iname “*.c” -exec grep -l ‘main(‘ {} \; -a -exec cp {} test1/ \;,"find all .c and .c files in the current directory tree that contain ""main("" and copy them to directory test1/"
bzip2 -kv */*/*/*/*,verbosely compresses all files on fourth and fifth depth level keeping original files in place.
"awk '{print(NR""\t""$0)}' file_name | sort -t$'\t' -k2,2 | uniq --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'","remove duplicate lines in ""file_name"" and print the output on stdout"
"find /home/foo -name ""*.gz""",find all gzip files in a folder
"grep -o ""_foo_"" <(paste -sd_ file) | tr -d '_'","replace newline with ""_"" in ""file"" then search for ""_foo_"" and output with ""_"" characters deleted"
cat file | column -c 80,format output of 'file' content to columns with wide not less than 80 pixels
sudo mkdir -p $javaUsrLib,create all directories in the path specified by variable $javausrlib as super user
find /path/to/files* -mtime +5 -exec rm {} \;,remove files modified at least five days ago in directory trees /path/to/files*
"find . -type f -name ""*.txt"" | xargs    -i ksh -c ""echo deleting {}; rm {}""",remove all files with a txt extension under current directory
fold -w30 longline | tr '\n' '|' | sed 's/|$/\n/',"insert ""|"" every 30 characters in file ""longline"""
od -c foo |head -2,"display the first 32 bytes in ""foo"" as printable characters with 16 characters per line"
find /path/to/base/dir -type d -print0 | xargs -0 chmod 755,find all directories under /path/to/base/dir and change their permission to 755
history -cr,clear the in-memory history and read from the current history file
find -name cookies.txt,list all files under the current directory called cookies.txt
find / -name fluidpoint 2> /dev/null,"find the file ""fluidpoint"" in the file system and discard all the errors"
ls | xargs -I {} mv {} PRE_{},"prefix all files and folders in the current directory with ""pre_"""
"find /home -user tecmint -iname ""*.txt""",find all *.txt files of user tecmint under /home directory
comm -23 <(find dir1 -type d | sed 's/dir1/\//'| sort) <(find dir2 -type d | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/',"print all unique directory paths under ""dir1"" compared to ""dir2"""
ifconfig eth0 hw ether 00:80:48:BA:d1:30,assigns mac address 00:80:48:ba:d1:30 to interface eth0.
df -h path-to-file,report file system containing path-to-file disk usage human-readable.
find $1 -perm -u+w -exec chmod g+w {} \;,find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories
echo '2-1.1.1'|sudo tee /sys/bus/usb/drivers/usb/unbind,"write ""2-1.1.1"" to standard output and to file ""/sys/bus/usb/drivers/usb/unbind"""
"saveIFS=$IFS; IFS=$'\n'; for dir in $(find -depth -type d ); do [[ ! $prev =~ $dir ]] && echo ""${dir}"" ; prev=""$dir""; done; IFS=$saveIFS",list all leaf directories (directories which don't contain any sub-directory) under current directory
"ls -Al | grep ""^d"" | awk -F"" "" '{print $9}'","filters only directories including hidden ones from long file listing of a current directory, and prints their names."
"find . -name \*.coffee -exec awk '/re/ {print FILENAME "":"" $0;exit}' {} \;",search for first match of the regex 're' in all *.coffee files under current directory and print the file names
find . -maxdepth 1 -type d -print | xargs echo Directories:,show the subdirectories of the current directory
"find /user/directory/* -name ""*txt"" -mtime 0   -type f -exec awk '{s=$0};END{print FILENAME, "": "",s}' {} \;",find all text files in user/directory/ and display the last line
find /myprojects -type f -name '*.cpp' -print0 |    xargs -0 echo sed -i 's/previousword/newword/g',print sed commands that would replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree
"find data -xdev -name ""filepattern-*2009*"" -print0 | tar --null --no-recursion -uf 2009.tar --files-from -",archive all filepattern-*2009* files/directories under data/ into 2009.tar
touch -m 201111301200.00 $log_dir/last.check,"create an empty file 'last.check' in directory pointed by variable ""log_dir"", with specified timestamp."
find /home/user/Maildir/.SPAM/cur -type f -exec rm '{}' +,remove all files under /home/user/maildir/.spam/cur
"tail -f logfile.log | grep --line-buffered ""something"" | read -t 3","search appended data in ""logfile.log"" for ""something"" with a timeout of 3 seconds"
find . -name '*.text' -exec $SHELL -c '[ ! -f ${1%.*} ]' $SHELL '{}' ';' -print,find all text files which have extra extensions in the current folder
diff file1 file2 | grep ^[\>\<] | wc -l,"count the number of differing lines in ""file1"" and ""file2"""
find . -type f | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u,print a sorted list of the extensions of the regular files from the current directory tree
nl -n ln | sort -u -k 2| sort -k 1n | cut -f 2-,print the unique lines from standard input preserving the order they appear
find /home -type f -perm 0777 -print -exec chmod 700 {} \;,change the permission of all the regular files in the folder /home to 700
sed '/^\s*$/d' $i | wc -l ## skip blank lines,counts all non-blank lines in the $i file.
"find . -name '*.py' -exec bash -c 'test -f $(dirname ""$1"")/Makefile' -- {} \; -print",list the .py files which reside in the current directory tree and whose parent directory contains a makefile
"find / -type f -size +20M -exec ls -lh {} \; 2> /dev/null | awk '{ print $NF "": "" $5 }' | sort -nk 2,2",find files on the system that are bigger than 20 megabytes and show the sorted list of their filenames
"echo ""Welcome `whoami`!""",print a welcome message with the current user's user name
find /home/ -name monfichier,"search in the home folder for all the files with the name ""monfichier"""
find tmp -maxdepth 1 -name '*.mp3',search the 'tmp' directory for .mp3 files
find . -name '*.cgi' -print0 | xargs -0 chmod 775,find all *.cgi files/directories under current directory and change their permission to 775
find -type f -and -mmin -30,display all regular/normal files which have been modified in the last 30 minutes
"while read line; do mkdir -p ""${line%/*}""; done < infile","make directories and parents for each line in ""infile"" excluding the file name"
find -name '*.zip' | xargs -n 1 unzip,unzip all *.zip files below the current directory
"seq  -f ""#"" -s '' 10",print a line of 10 '#' characters
$(cat myfile),list content of 'myfile' in a subshell and returns output to parent shell
find . -follow -uid 0 -print,find all files/directories following symbolic links under current directory tree that are owned by 'root' user
"ls | tr  ""\n"" "" """,list all files/folders in current directory by separating them with spaces
find /etc/sysconfig -amin -30 -type f,find all regular files under the /etc/sysconfig directory that were accessed in the last 30 minutes
set %PATH% | clip,copy %path% variable on windows to clipboard
"find . -name ""*.mp3"" -print0 | xargs -0 mplayer",find all *.mp3 files under current directory and run mplayer with these files
pushd $(/bin/pwd),pushes current folder to the directory stack.
pushd -2,"rotates the dirs stack so that the second directory (counting from the right of the list shown by `dirs', starting with zero) is at the top."
find /path -perm /011,find all files under /path and below executable by `group' or `other'
"find / -name ""*.php"" -print -o -path '/media' -prune",find all .php files starting from the root directory and ignoring /media
find . -name '*.php' -exec chmod 755 {} \; | tee logfile.txt,"change mode of all files ending with "".php"" under the current folder to 755 and write the output to the console and ""logfile.txt"" file"
echo $(date) doing stuff,print the current date followed by ' doing stuff'
mkdir -p $tempWork,create all directories in the path specified by variable $tempwork
rsync -rvc --delete --size-only --dry-run source dir target dir,"recursively copy ""source"", ""dir"", and ""target"" to ""dir"" as a dry run"
alias cd-='cd $(history -p !!:1)',"alias ""cd $(history -p !!:1)"" as ""cd-"""
chgrp -R GROUP /path/to/repo,recursively changes group ownership of everything within a '/path/to/repo' to 'group'.
who | sed 1d | wc -l,count the number of users logged in minus one
"df $path_in_question | grep "" $path_in_question$""",check if $path_in_question is mount point of filesystem
ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p',gets list of ip addresses of all network interfaces.
"find . -type f -name ""composer.json"" -exec composer validate {} \;","use ""composer validate"" command on all composer.json files"
find . -type f -exec file '{}' \;,run the file command on every regular file under current directory
mvn help:evaluate -Dexpression=project.version | tail -8 | head -1,prints the maven project version
shred -s 10 - > my-file,creates file with random 10-byte size content.
find /directory-path  -type d -exec sudo chmod 2775 {} +,find all directories under /directory-path and change their permission to 2755
find . -name '*.php' -exec chmod 755 {} \; -exec echo '+' \;,"change permissions of all files ending in "".php"" under the current directory to 755 and print a '+' for each file"
"find ./ -name ""*"" -printf ""%f\n"" | xargs grep ""searchName""",find all files in current directory and search for 'searchname' in those files and show errors for files that are not directly on the current directory
find . -type f -name '*.gz' -printf '%s %p\n'|sort -nr|head -n 1,list the largest file prefixed by its size in bytes of all files under the current directory
od -c oldfile,"display a character dump of ""oldfile"""
grep -Eo '([0-9]+-){3}[0-9]+' infile | tr - .,print all '-' separated digits in file 'infile' as dot ('.') separated digits
find /book -print | xargs grep '[Nn] utshell',"search for the word ""nutshell"" or ""nutshell"" in all the files in the folder book"
find /path -type f -name '*~' -print0 | xargs -0 -I % cp -a % ~/backups,"copy all regular files whose names end in ""~"" from the /path directory tree to ~/backups/"
"find . -name ""*~"" -print | xargs rm","delete all the files ending with ""~"" in current folder"
find -D help,show the explanation of find's debugging options
"find . -type f -executable -exec file {} \; | grep -wE ""executable|shared object|ELF|script|a\.out""",search the current directory tree for executable regular files
ifconfig | awk '$0 ~ /HWaddr/ { print $5 }',gets mac addresses of all active network interfaces.
"find . -name ""*1"" -print0 |xargs -0 grep ""1""","search all files in the current directory tree whose names end in ""1"" for string ""1"""
cat n,"print the contents of ""n"""
su -cp filename.sh,run script filename.sh as root with preserved user environment
"grep -v ""pattern"" filename > filename2; mv filename2 filename",removes strings with pattern from file 'filename'.
find -fprint0,find files/directories under current directory and write them to a file as null terminated strings.
"find temp/medium/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 428x270"">"" -quality 80 -compress JPEG -monitor -strip","find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/medium/* paths and run `mogrify -resize 428x270"">"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"
find . -name 'cmn-*.flac',"find all "".flac"" files in current folder starting with ""cmn-"""
"find . -name ""*.java"" -exec grep -Hin TODO {} + | cut -d "":"" -f 1","find .java files in the current directory tree that contain 'todo', and print their pathnames"
"join -t "" "" -j 1 <(sort file1) <(sort file2)","print lines in ""file1"" that exist in ""file2"""
"find ./ -type f -name ""*.php""  | xargs -r rename ""s/php/html/""","find all files in the current directory and below with extension .php and replace ""php"" with ""html"" in their names"
"head -200 /dev/urandom |cksum | cut -f1 -d "" "" | awk '{print $1%63000+2001}'",prints a random number between 2000 and 65000
"awk '{print $2}' < file.txt | paste -s -d, -","print the 2nd white space separated fields in ""file.txt"" as a comma separated list"
curl https://www.npmjs.com/install.sh | sh,"download contents from ""https://www.npmjs.com/install.sh"" and execute"
"watch -n1200 ""xbacklight -set 0% && sleep 20 && xbacklight -set 100%""","execute ""xbacklight -set 0% && sleep 20 && xbacklight -set 100%"" every 1200 seconds"
find . -maxdepth 2  -type f -exec ls -l {} \;,list all files in maximum 2 levels down the current directory
"find /home/u20806/public_html -maxdepth 1 -mmin +25 -type f -name ""*.txt"" -delete",delete all regular files with '.txt' extension that were modified in more than 25 minutes ago in maximum 1 level down the directory '/home/u20806/public_html'
"find . -name ""orapw*"" -type f","search the current directory tree for regular files whose names begin with ""orapw"""
find /home/user/Desktop -name '*.bmp' -o -name '*.txt',find .bmp or .txt files
set -o nounset,treat references to unset variables as errors
"find /fss/fin -type d -name  ""essbase"" -print",find all directories named essbase under /fss/fin
"find ""$DIR_TO_CLEAN"" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf ""Total: %d\n"" $#; rm ""$@""' _ {} +",delete and count files in $dir_to_clean that are older than $days_to_save days
find /home/michael/foxpro/mount/A[1FV]/[12][0-9][0-9][0-9] -name '*.dbf' -type f -exec ln -s {} \;,"create a symbolic link in the current directory for each file .dbf under the directories matching ""/home/michael/foxpro/mount/a[1fv]/[12][0-9][0-9][0-9]"""
yes | mv ...,"continuously answer ""y"" to any prompt from ""mv ..."""
cal | awk '$6{date=$6}END{print date}',prints the day of last friday in a current month.
"column -s""${tab}"" -t","display standard input as a table with ""${tab}"" separators"
echo -n $(pwd) | pbcopy,"puts working directory into clipboard, stripping newlines"
find . -exec chown myuser:a-common-group-name {} +,change the ownership of all files in the current directory tree to myuser:a-common-group-name
find /home -type d -empty,search for all empty directories in the folder /home
find . -depth -print0 | cpio --null -o > ../lpicpio.1,find all files in the current directory with default depth size and compress them to lpicpio.1 file
gzip `find . \! -name '*.gz' -print`,create a gzip of all the files in the current folder excluding the already gzipped files
shopt -s lastpipe,enables shell option 'lastpipe'.
find . -path ./dir1  -prune -o -print,"list the current directory recursively ignoring the ""dir1"" subdirectory"
find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]',"search for directories in the folder ""test"" which end have 5 digits as their name"
find /var/www/ -path '*wp-admin/index.php' -exec mv {} $(dirname {})/index_disabled,move *wp-admin/index.php files under /var/www/  to ./index_disabled
chown owner:nobody public_html,"change the owner to ""owner"" and group to ""nobody"" of ""public_html"""
find /path -type f | sort -u | xargs cat | md5sum,"calculate the md5 sum of the contents of all files sorted in directory tree ""/path"""
"find . -name ""filename including space"" -print0 | xargs -0 ls -aldF > log.txt",display a long listing of all the files in the current folder which have spaces in their names and save the output to the file log.txt
split -l9 your_file,"split ""your_file"" into files with at most 9 lines each"
find a,display all the files in the folder a
find /var/www -name *.gif,find all .gif files in the /var/www directory tree
env DISPLAY=`hostname`:0 skype,"set the environment variable ""display"" to the system host name followed by "":0 skype"""
join -v1 <(sort file1) <(sort file2),"for each line of the sorted output of both file1 and file2, print lines whose first field of file2 does not appear as first field of file1."
"printf '%s' ""$pass"" | md5",find md5sum of a string stored in $pass
"find ./ -type f -name ""*.[mh]"" -exec wc -l {}  \; | sed -e 's/[ ]*//g' | cut -d""."" -f1 | paste -sd+ - | bc",prints total number of lines of all *.m and *.h files in a current folder and subfolders.
od -t x1 file|cut -c8-,display a binary file as a sequence of hex codes
pstree -p $$,prints process tree of the current command process.
rsync -auv -e ssh --progress sourcedir/ user@dest.com:/dest/dir/,"recursively copy newer files in ""sourcedir/"" to ""user@dest.com:/dest/dir/"" via ssh"
"find . -type f -mtime +356 -printf '%s\n'  | awk '{a+=$1;} END {printf ""%.1f GB\n"", a/2**30;}'",find all the files which have not been modified in the last 1 year and display the total disk usage of them  in gb
"find /usr/local/apache/logs/ -type f -name ""*_log""|xargs du -csh",display the amount of disk space used by all the log files in the folder /usr/local/apache/logs/
ls 2>&1 | tee /tmp/ls.txt,"write the standard output and error of ""ls"" to standard output and ""/tmp/ls.txt"""
"find -type f -name ""*.htm"" | sed 's@^./@@g;s@/@-@g' | awk -F'-' '{print $1 ""-"" $2 ""-"" $3 ""-"" substr($4, 5, 2) ""-"" $5}'",find all *.htm files under current directory and print the changed names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format
"find ""$some_directory"" -name '.*' ! -name '.' ! -name '..' -delete",delete all hidden files/directories under $some_directory
"python hello.py `find . -name ""*.txt""`",find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments
seq 10 | sed '0~2d',"delete every second line from output of ""seq 10"""
find root -mindepth 2 -type d 2>/dev/null -exec rm -fR {} \;,delete all directories in minimum 2 levels down the root directory
find /tmp/a1 -exec tar -rvf dirall.tar {} \;,"create tar archive ""dirall.tar"" and copy all files from directory tree /tmp/a1 to it"
find . /home/admin/data/ -type d -exec chown admin.admin {} \;,change the owner and group of all the directories in the current folder and /home/admin/data/ to admin & admin
find / -perm /u=s,find all suid set files
"find . -iname '.#*' -print0 | while read -r -d '' i; do foobar ""$i""; done","find all files matching pattern '.#*' in the current directory tree and execute ""foobar"" for each of them with the file name as an argument"
"alias mycd=""cd `echo $1`""","set alias ""mycd"" for command ""cd `echo $1`"""
find -x / -user george -print0 | xargs -0 chown eva,change the ownership to eva for all files/directories that belong to the user 'george' in the entire file system without traversing to other devices/partitions
find . -type f -printf '%s %p\n' | sort -rn | head -20,print the largest 20 files under current directory
find . -type f -print0 | xargs -0 -n 1,list all regular files under current directory ensuring white space safety
cd $(find . -name config -type d | sed 1q),"search for the directory ""config"" in the current folder and change directory to the first instance of the search"
"find /var/www/vhosts/*/httpdocs -type f -iwholename ""*/wp-includes/version.php"" -exec grep -H ""\$wp_version ="" {} \;","search for the regex ""\$wp_version ="" in all the regular files that end with '/wp-includes/version.php' (case insensitive) in their paths in directories/files taken from the glob pattern '/var/www/vhosts/*/httpdocs' and show the matched lines along with the file names"
"paste -sd',,\n' file","print every three lines of ""file"" as a comma separated line"
tree -D,print the current directory tree with the date of last modification for each file or directory
"zcat daily_backup.sql.gz| grep -E ""'x'|/x/""","unzip ""daily_backup.sql.gz"" and search for lines matching ""'x'|/x/"""
"find -iname ""MyCProgram.c""","find all files with the name ""myprogram.c"" in the current directory and its sub-directories while ignoring the case of the file name."
"find / -name ""*.php""",find all .php files starting from the root directory /
find . -maxdepth 1 ! -perm  -o=r,find all files/directories in maximum 1 level down the current directory which do not have only read permission for 'other'
"echo ""$(date +%H:%M:%S): done waiting. both jobs terminated on their own or via timeout; resuming script""",print the current date in '%h:%m:%s' format followed by the string ': done waiting. both jobs terminated on their own or via timeout; resuming script'
find 'Test Folder' -type d -print0 | xargs -0 rm -rf,"force delete all the directories the folder ""test folder"""
"find . -name ""*.jpg"" -print0 | xargs -0 ls",list all .jpg files in the home directory tree
"echo ""su whoami"" |ssh remotehost",run command 'su whoami' on host 'remotehost'
"find . \! -name ""*.gz"" -exec gzip {} \;",create a gzip of all the files in the current folder excluding the already gzipped files.
"find . -iname ""$srch*"" -exec grep ""Processed Files"" {} \; -print",search for 'processed files' in all $srch* (case insensitive) files under current directory
"find  / -type d -name ""project.images"" -ls",find a directory named 'project.images' in the entire filesystem and show it in long listing format
find <path> -xdev -type f -name *.txt -exec ls -l {} \;,list all *.txt files in <path> with details about their attributes
du -h your_directory,find a used disk space of a target directory and files inside of it
"tmux new-window -t vims -d -n ""win0"" ""vim foo""","starts new window named 'win0' in detached tmux session 'vims', opens file 'foo' within."
file -L $(python -c 'import sys; print(sys.executable)'),"locate python interpreter and show its human-readable file type description, resolving any symlinks."
"ls -1 | awk 'ORS="" ""'","lists all files in a current folder, separating names with space."
find /usr/tom | egrep '*.pl| *.pm',find all files/directories under /usr/tom which matches the extended regex '*.pl| *.pm'  in their names
comm -23 <(sort a.txt) <(sort b.txt),"print lines in the sorted contents of ""a.txt"" that are not in the sorted contents of ""b.txt"""
sudo su -l oracle,login as user postgres
find \! -name . -type d -print0 | xargs -0 rmdir,remove all directories in and below the current directory
"find dir1 -type f -a \( -name ""*.java"" -o -name ""*.as"" -o -name ""*.xml"" \)","display all the java, xml and action scripts (.as) files in a directory"
ls -ltq  <path>  | head -n 1,returns the single most recent file in a directory
find /. -name 'toBeSearched.file' 2>&1 | grep -v 'Permission denied',find a file in current folder and show all errors apart from permission denied
find . -type f -print0 | xargs -0 grep string,"search the current directory tree for regular files that contain ""string"""
join <(sort -n A) <(sort -n B),"join lines in file ""a"" with lines in file ""b"" if the lines share a common first word"
find -atime 0,find all the files in the current folder that have been accessed in today
find . -type f -mtime +7,find all regular files that reside in the current directory tree and were last modified more than 7 days ago
split -l 100000 database.sql database-,"split ""database.sql"" into files of at most 100000 lines each with prefix ""database-"""
find -type f -print0,find all files under current directory and append a null character at the end of each of their paths
which find,get the actual find exectuable path
"find  / -type d -name ""apt"" -ls",just find directories and skip file names
"cnt=`ps -ef| tee log | grep ""cntps""|grep -v ""grep"" | wc -l`","save long listing of all running processes in the 'log' file, and save number of process strings that contain 'cntps' in the 'cnt' variable."
ls -d -- */                    ### more reliable GNU ls,lists all subdirectories in the current directory
ssh -O exit officefirewall,"request that the master ssh connection ""officefirewall"" exits"
"echo ""some output"" | sudo -u some_user tee /some/path/some_file","write ""some output"" to standard output and to ""/some/path/some_file"" as user ""some_user"""
ls | xargs chown -R apache:apache,"recursively change the owner and group of all files in the current directory to ""apache"""
find ./ -name *.ogv -exec myfile {} \;,"execute ""myfile"" on all .ogv files from the current directory tree"
echo $(cat /proc/$$/cmdline),print the type of the current shell
find /tmp -type f -name '*' -mtime +7 -print0 | xargs -0 rm -f,remove all regular non-hidden files modified more than 7 days ago and residing in the /tmp directory tree
compress $* &,"compresses all files listed in array $*, executing in background."
find * -type f -print,"search the current directory recursively for regular files, skipping hidden files in the current directory"
"diff -rq /dir1 /dir2 | grep -E ""^Only in /dir1.*"" | sed -n 's/://p' | awk '{print $3""/""$4}'",recursively list all the files and directories that are only in directory /dir1 with their full paths.
chown -R root:root /var/cache/jenkins,"recursively change the user and group of all files in ""/var/cache/jenkins"" to ""root"""
rev urllist.txt | cut -d. -f 2- | rev,"remove top-level domain (.com, .org) from url's in urllist.txt"
kill -9 `cat save_pid.txt`,"file 'save_pid.txt' contains a process id, instantly kill this process with sigkill signal."
find /path/to/dest -type d \( ! -name tmp \) -print,display all the directories in the folder /path/to/dest except tmp directory
file_changed=$(find . -depth \( -wholename \./\.\* \) -prune -o -mtime -1 -print | cpio -oav),find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them and put the output into the variable file_changed
find . -type d -exec basename {} \; | wc -l,find how many directories are in a path (counts current directory)
su $username -c tar xzvf ..,"run ""tar -xzvf ..."" as user $username"
find /mnt/raid/upload -mtime -7 -print,search the /mnt/raid/upload directory tree for files that have been modified within the last 7 days
find ~ -type f -mtime +1825 |xargs ls -l,list all regular files in and below the home directory that were modified more than 5 years ago
"echo ""error"" 1>&2 | tee -a log","write ""error"" to standard error and do not append to ""log"""
"watch -n1 'ps x -o ""%p %r %c"" | grep ""test"" '","prints the pid, pgid and command name of the process with the name 'test' every second"
find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir,find all *.csv files under /foo/bar and move them to some_dir
"ls -d * | grep -v foo | xargs -d ""\n"" chown -R Camsoft","recursively change the ownership of all directories in the current directory excluding ""foo"" to ""camsoft"""
"find ~ -name ""*.txt"" — print -o -name "".*"" — print",display all the text files and hidden files in the home folder
"find /path -type f -not -name ""*.*"" -exec mv ""{}"" ""{}"".jpg \;","recursively add "".jpg"" to all files without an extension in the directory tree ""/path"""
ls -l --time-style=long-iso | sort -k6,"list all files and directories in long list format with a time style of ""long-iso"" and sort from oldest modifed to newest modified"
echo $(pwd)/$filename,print full path of relative filename
find /some/dir/ -maxdepth 0 -empty,"find directory ""/some/dir"" if it is empty"
find . -type f -name '*.pdf' |sed 's#\(.*\)/.*#\1#' |sort -u,find all the pdf files in the current directory and display only the directory name in which the pdf file is present
find {} -type f -depth 1 -print0 -perm +0111 | xargs -n1 -0 basename | sort -r && echo,find all executable files under {} and take their names only and reverse sort them
mount none -t tmpfs /path/to/dir,"mount ""tmpfs"" filesystem to ""/path/to/dir"""
hostname --ip-address,print ip addresses of the host name
"find dir -type f -printf ""f %s %p\n""","print the names and sizes of regular files residing in the ""dir"" directory tree"
"find sourceDir -mindepth 1 -exec mv ""{}"" --target-directory=destDir \;",move all files from the `sourcedir' directory tree to the `destdir' directory
find . -name .svn -exec rm -rf {} +,delete all .svn files/directories under current directory
rsync -pogtEtvr --progress --bwlimit=2000 xxx-files different-stuff,"synchronize ""xxx-files"" to ""different-stuff/xxx-files"" recursively preserving metadata with a bandwidth limit of 2000 kib/s"
"find . -path ""./sk"" -prune -o -name ""*.txt"" -print","find all the text files in the current folder expect those which are in the path ""sk"""
find . -name '*.pyc' -print0 | xargs -0 rm,recursively removes all files like '*.pyc' in a current folder.
find . -type f -print0 | xargs -0 grep pattern,find all the normal/regular files in current folder and search for a pattern
yes 1 | nl | tee /tmp/to,"infinitely write ""1"" with line numbers to the console and ""/tmp/to"""
size=`cat script.sh | wc -c`,saves file sctipt.sh size in 'size' variable.
find . -amin -60,find files in the current directory tree that were accessed within the last 60 minutes
"find . -type d -exec sh -c 'cd -P -- ""{}"" && pwd -P' \;",find all the directories in the current folder and change to these directories and run a command
"df -P ""$path""  | tail -1 | awk '{ print $NF}'",print mount point of the file system containing $path.
"find . -name ""sample*_1.txt"" | perl -pe 's/_1\.txt$//' | parallel program {}-out {}_1.txt {}_2.txt","find all sample*_1.txt files/directories under current directory, remove _1.txt from the end of file paths and pipe them to the command `parallel program {}-out {}_1.txt {}_2.txt`"
find . -type f -exec md5sum {} \; > MD5SUMS,"calculate md5 sums for all regular files in the current directory tree and save the result as ""md5sums"""
find . -type f -regex '.*\(c\|h\|cpp\)' -exec ls {} \;,list all files under current directory matching the regex '.*\(c\|h\|cpp\)'
rsync -avz tata/ tata2/,"archive directory ""tata"" to directory ""tata2"", compressing data during copy."
ln -s www1 www,"create a symbolic link named ""www"" to file ""www1"""
find /dir/to/search/ -type f -name 'expression -and expression' -print,"find regular files named ""expression -and expression"" under and below /dir/to/search/"
diff -U 0 file1 file2 | grep ^@ | wc -l,"count the number of areas that differ in ""file1"" and ""file2"" with 0 lines of unified context"
find . -type f -newer file.log,"display all the regular files in the current folder that are modified after the file ""file.log"""
"find . -name ""*.cc"" | xargs grep ""xxx""","search the *.cc files in the current directory tree for string ""xxx"""
find . -atime +7 -size +20480 -print,find any files in the current directory and its sub-directories that were last accessed more than 7 days and are larger than 20480 blocks in size.
rmdir --ignore-fail-on-non-empty newBaseDir/Data/NewDataCopy,"remove empty folder, and skip error message if one is not empty."
find /myDir -type d -delete,delete all directories in the /mydir directory tree
find . -type f -ctime -1,search the current directory tree for regular files changed less than 1 day ago
ls | column -c 80,"display the output of ""ls"" for an 80 character wide display"
find . -name \? -mtime -1,display all files in the current folder that have been modified in the last 24 hours whose name has only 1 letter
ls /home/ABC/files/*.csv | rev | cut -d/ -f1 | rev,print file names of all files ending with '*.csv' in  '/home/abc/files/' directory
du -sh */ | sort -n,list each directory in the current directory prefixed with its disk usage in human readable format and sorted from smallest to largest
split --bytes=1500000000 abc.txt abc,"split ""abc.txt"" into files with at most 1500000000 bytes each and use prefix ""abc"""
"find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \( -size +100M -fprintf /root/big.txt  '%-10s %p\n' \)","traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt."
"subnet=$(hostname -i | cut -d. -f1,2,3)","save the first three octets of the host name's ip address to variable ""subnet"""
find . -name 'a(b*' -print,find all files in the current directory tree that match pattern 'a(b*'
"find . -type f -exec grep -Iq . {} \; -and -print0 | xargs -0 grep ""needle text""","search the current directory recursively for files containing ""needle text"""
find . -name '*.deb' -exec basename {} \;,"find all the files which end with "".deb"" and display their base name (strip the extension)"
"find /Path \( -path ""/Path/bar*"" -o -path ""/Path/foo* \) -name ""file_name*""","search the /path directory tree for files whose pathnames match ""/path/bar*"" or ""/path/foo*"" and whose names match pattern ""file_name*"""
"find . -name ""AssemblyInfo.cs"" -print0 | xargs -0 git diff --","find files named ""assemblyinfo.cs"" in the current directory and below, and run ""git diff"" on them"
find /path -type f -exec ls -l \{\} \;,finds all files in a '/path' folder and prints long listing for them.
find /somelocation/log_output -type f -ctime +40 -exec ls -l {} \;,list in detail the regular files from the /somelocation/log_output directory tree that were last changed more than 40 days ago
find -name photo.jpg,find all files/directories named 'photo.jpg' under current directory tree
find $HOME/. -name *.txt -exec head -n 1 -v {} \;,print the first line of each file under the home directory
gunzip test1/*/*.gz,"unzip all files matching ""test1/*/*.gz"""
comm -12 <(find . -maxdepth 1 | sed -e 's/^.\///' ) <(cat 1),find all files/directories 1 level down the current directory that are enlisted in file 1
find . -atime +30 -print,find all files in the current directory and its sub-directories that have not been assessed in more than 30 days.
"find . \( -name somedir -prune \) , \( -name bin -prune \) -o \( -name ""*.txt"" -print \)","find all the text files in  the current folder and do not search in somedir, bin directories"
"find | xargs -i sh -c ""echo {} {}""",find all files/directories under current directory and print them twice in each line
find /home/apache -size 100c -print,find all files/directories that are bigger than 100 bytes under '/home/apache' directory tree
"tmux new -d ""bash -c '$CMD'""",starts new detached tmux session and runs command $cmd within.
find -name *.tar.gz,search for all tar.gz compress files  in the current folder
find /home/bozo/projects -mtime -1,display all the files/directories under '/home/bozo/projects' directory tree that have been modified within the last day
"seq 1 10 | xargs -n1 -P2 bash -c 'i=$0; url=""http://example.com/?page${i}.html""; curl -O -s $url'","download 10 web pages ""http://example.com/?page${i}.html"" at most 2 at a time with ""${i}"" ranging from 1 to 10"
"find . -name '*bills*' -exec grep -H ""put"" {} \;","search the files residing in the current directory tree whose names contain ""bills"" for ""put"""
find . -mindepth 1 -maxdepth 1 -type d| grep \/a |xargs -n 1 cp -i index.html,copies file 'index.html' to each top-level directory in the current directory beginning with 'd'.
"cal | awk 'NR==2 {for (i=1;i<=NF;i++) {sub(/ /,"""",$i);a[$i]=i}} NR>2 {if ($a[""Tu""]~/[0-9]/) {printf ""%02d\n"",$a[""Tu""];exit}}' FIELDWIDTHS=""3 3 3 3 3 3 3 3""",prints day of first tuesday in a month.
find . -name “*.jpg”,find all .jpg files in the current directory and below.
"find . -maxdepth 1 -type d -iname ""*linkin park*"" -exec cp -r {} /Users/tommye/Desktop/LP \;","find all directories in the current one with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"
find . ! -name '.gitignore' ! -path '.git' ! -path '.git/*' -exec rm -rf {} \;,delete all files/directories under current directory tree excluding '.gitignore' files/directories and files/directories matching the patterns '.git' or '.git/*' in their paths
xargs -I '{}' rm '{}',take a file path from standard input and remove it.
script1=`mktemp /tmp/.script.XXXXXX`;,creates temporary file with name formatted like '.script.xxxxxx' in '/tmp/' folder and saves path to it in 'script1' variable.
find . -name '*.txt' -print -o -name '*.html',"find files under the current directory ending in ""txt"" and list them, or ending in  ""html"" but do nothing."
find -daystart   -atime 0,find all the files in the current folder that have been accessed in today from the start of the day
find . -size 0,find all empty files in the current directory ( empty file = size 0 bytes )
find . -name 'Lemon*.mp3' -print0 | xargs -0 mplayer,find all lemon*.mp3 files under current directory and run mplayer with these files
find project -name '*.php' -type f -print0 | xargs -0 grep -l ireg,search for 'ireg' in all php files under 'project' directory tree and show only the files that match
"echo `ls` ""`cal`""",prints sequentially listing of a current folder and calendar of a current month.
"find . -name ""S1A*1S*SAFE"" | awk -F/ '{print $NF""/""$0}' | sort -t_ -k 5,5 | cut -d/ -f 2-",find files in current folder using name patterns and sort the display the file names in the sorted order
find -mindepth 2 -maxdepth 3 -name file,find all files/directories named file in 2 and 3 levels down the current directory
echo $(($(date +%s) / 60 / 60 / 24)),prints days since epoch
sort set1 set2 | uniq,"print each line in ""set1"" and ""set2"" that does not exist in the other"
sort --merge file*.txt | split -l 100000 - sorted_file,"merge already sorted files ""file*.txt"" and split the result into files of at most 100000 lines each with a prefix ""sorted_file"""
find ./ -type f -name '*.html' | xargs sed -i '$s/$/<\/description>/',find all the html files in the current folder and replace the end of each line with a pattern
find / -type f -user bluher -exec ls -ls {}  \;,display a long listing of all the regular files owned by the user 'bluher' in the entire filesystem
find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90,find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days
find /home -atime +7,find all files in the /home/ directory tree that were last accessed more than 7 days ago
mkdir /cpuset,"make directory ""/cpuset"""
find -type d | xargs chmod 775,find all directories under current directory and set their permission to 775
cat report.txt | grep -i error | more,"case-insensitive search for ""error"" in file report.txt, display one page at a time, waiting for user interaction between each."
echo pwd: `pwd`,"print the current working directory prepended by ""pwd: """
find sort_test -type f | env -i LC_COLLATE=en_US.UTF-8 sort,print a list of regular files from directory tree sort_test/ sorted with lc_collate=en_us.utf-8
sudo chown root process,"change the owner of ""process"" to ""root"""
find originals -name '*.jpg' | xargs -1 makeallsizes,excute script makeallsizes with all '*.jpg' file under originals directory.
set +e,disable exiting the shell on error
"ls -l $(find /etc -name ""*.txt"" )",list all *.txt files/directories under /etc
./program | tee a.txt,"write the output of ""./program"" to the console and ""a.txt"""
"rsync -a -f""+ */"" -f""- *"" source/ destination/","copy all directories recursively from ""source/"" to ""destination/"" excluding all files"
find /home/feeds/data -type d \( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \) -prune -o -name '*.*' -print,find all *.* directories under /home/feeds/data directory
find ~ -type d -exec mkdir junk {} \; 2> /dev/null,create directory `junk' in the home directory
find /path/to/directory/folder{1..50} -name '*.txt' -exec basename {} \; 2>/dev/null,"search directories /path/to/directory/folder{1..50} for .txt files, outputting only the names of the matched files"
"join -t, in1 in2",merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted.
/bin/true $(seq 1 100000),"pass numbers 1 to 100000 as arguments to ""/bin/true"""
zcat filename.gz | grep -i user-user,"search decompressed ""filename.gz"" for case-insensitive ""user-user"""
shopt globstar,shows state of 'globstar' shell option.
chown -v root:root /path/to/yourapp,"change file owner and group of ""/path/to/yourapp"" to root and print a diagnostic"
"history|awk '{$1="""";print substr($0,2)}'",print the output of history without line numbers
set prompt=\[`id -nu`@`hostname -s`\]\#\,"sets the shell prompt to ""[user@host]"" where user is the current user and host is the short host name"
"find . -xtype f \! -iname *.html   -exec mv -iv ""{}""  ""{}.html""  \;",change the extension of all the files in the current folder to html excluding those html files and those which are present in another disk partition
ln -s /usr/share/my-ditor/my-editor-executable /usr/bin/my-editor,"create a symbolic link named ""/usr/bin/my-editor"" to file ""/usr/share/my-ditor/my-editor-executable"""
"cat file | grep pattern | paste -sd'~' | sed -e 's/~/"" ""/g'","search for ""pattern"" in ""file"" and separate each line with '"" ""'"
df -Ph | column -t,"print file system disk space usage in posix and human readable format, format as a table"
cat ${SPOOL_FILE}                   | tee -a ${LOG_FILE},"print the contents of ""${spool_file}"" file to the console and append to ""${log_file}"" file"
who,show who is logged on
gzip -d ${set1[@]} &,decompress ${set1[@]} files with gzip
bzip2 -kv */*/*,verbosely compresses all files on third and fourth depth level keeping original files in place.
alias your_env='source ~/scripts/your_env.sh',"set alias ""your_env"" for command 'source ~/scripts/your_env.sh'"
"echo ""password"" | md5sum","calculate the md5 sum of ""password"""
find -mtime +7 -print > found.lst,search for all the files in the current folder which have not been modified in the last 7 days and save the output to a file
cat /dir/file.txt | wc -l,"count the number of lines in ""/dir/file.txt"""
find . type -f -amin -2,search the current directory recursively for regular files last accessed less than 2 minutes ago
mktemp -d -p /path/to/dir,creates temporary folder relative to directory '/path/to/dir'.
month=$(od -t x1 --skip-bytes=8 --read-bytes=1 file.moi | head -1 | awk '{print $2}'),"save hexadecimal byte 9 in binary file ""file.moi"" to variable ""month"""
"find ""$source_dir"" -type f -regex "".*\.\(avi\|wmv\|flv\|mp4\)"" -print0",find all files under $source_dir that match the regex .*\.\(avi\|wmv\|flv\|mp4\) in their paths and print them with null character as the delimiter
find / -nouser -nogroup,find all files in the file system which have no user and no group
"echo ""luke;yoda;leila"" | tr "";"" ""\n""","convert "";"" separated list ""luke;yoda;leila"" to new line separated list"
cal | sed '1d;2{h;s/./ /g;x};/^\s*$/b;G;s/\n/ /;s/^...\(.\{15\}\).*/\1/;s/.../ &\t\&/g;s/\&$/\\\\/',convert unix `cal` output to latex table code.
"crontab -l | egrep ""word""","list all cron jobs which contain ""word""."
find . -iname foo -type d,"search for all directories named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory."
"find ${directory} -name ""${pattern}"" -print0 | xargs -0 ${my_command}","find all files matching the pattern ""${pattern}"" in their name and execute ${my_command} for each of them with the file path as argument"
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$"" | xargs -n 1 ls","list all files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names"
gzip -dc hello-0.2.tar.gz | tar -xf -,"decompress and unarchive ""hello-0.2.tar.gz"""
tar -c --checkpoint=.1000 /var,create an archive and show a progress bar
find -name test2,"find all files named ""test2"" in the current directory tree"
sudo chown -R $(whoami) /usr/lib/node_modules/,"recursively change ownership of ""/usr/lib/node_modules/"" to the current user"
find / -path excluded_path -prune -o -type f -name myfile -print,search every directory except the subdirectory excluded_path for a regular file 'myfile'
column -t -s $'\t' FILE,"format tab separated fields in ""file"" as a table"
find /path/to/check/* -maxdepth 0 -type f,find all /path/to/check/* regular files without descending into any directory
php -i | more,"display php info one page at a time, pausing for user interaction after each page."
find /dev/sd*[a-z] | wc -l,count the number of files in the directory trees whose pathnames match pattern '/dev/sd*[a-z]'
"yes '' | nl -ba | sed -n -e 11,24p -e 24q",print right aligned numbers from 11 to 24
grep something file | more,"display all lines in 'file' containing 'something', pausing for user input after each page."
zcat /usr/share/man/man1/man.1.gz  | groff -mandoc -Thtml,"convert ""/usr/share/man/man1/man.1.gz"" to html"
"find .  -type f -name ""CDC*"" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \;",find all cdc* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files
yum --help,prints help on 'yum' utility.
find . -mnewer poop,return a list of files newer than file poop
"find . -iname ""*foobar*"" -exec cp ""{}"" ~/foo/bar \;",copies all files under the current directory like any-cased '*foobar*' to the '~/foo/bar' directory.
comm -23 <(sort -u A.txt) <(sort B.txt),"print unique lines of sorted file ""a.txt"" compared to sorted file ""b.txt"""
USERS=$(awk '/\/X/ {print $1}' <(w)),finds users with x session in system and puts the result into users variable
su - postgres,login as user postgres
"find . -name ""*[1k]*""",find all files/directories under current directory tree that contain '1' or 'k' in their names
cd $(dirname $(which ls)),go to first directory specified in path which contains the command 'oracle'
"find ""$d"" -prune -empty",print $d if $d is empty
find /var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \;,search for files/directories with the case insensitive pattern anaconda.* in /var/log directory and create an archive (file.tar) of the last file found
find . |xargs grep search string | sed 's/search string/new string/g',"find files whose pathnames contain ""string"" and print these pathnames replacing 'search string' with 'new string'"
mount -oremount /,"remount root filesystem ""/"""
echo 'abcdefg'|tail -c +2|head -c 3,"print characters 2 through 4 of ""abcdefg"""
$ cat 1,print content of '1' file
number=$(echo $filename | awk -F _ '{ print $2 }'),"extract number from $filename of the form ""something_12345_else"" and set the variable ""number"" to this number."
"join -11 -21 -o1.1,1.2,1.3,2.3 file1 file2","for each line in file2 whose first field appears as a first field in file1, print an output line constructed following the specified -o format."
"find ./ -type f -name ""pattern"" ! -path ""excluded path"" ! -path ""excluded path""","search for pattern matched files in the current folder and subfolders exclude ""excluded path"""
find . -print | grep -i foo,"find all files in the current directory tree containing ""foo"" in their names"
find $HOME -iname '*.ogg',find all *.ogg (case insensitive) files/directories under your home directory
find -name file -exec echo 'This should print the filename twice if an implicit -print is applied: ' {} +,print 'this should print the filename twice if an implicit -print is applied: ' appended with file paths for all files named 'file' under current directory tree
find -name “*.xml” -exec grep -l “slc02oxm.us.oracle.com” {} \;,"search for the host ""slc02oxm.us.oracle.com"" in all the xml files in the current folder and display the files which has the matched content"
find /etc -type l,find symbolic links in directory /etc and below
"find . -name ""*.png"" -mtime +50 -exec rm {} \;",recursively finds all '*.png' files older than 50 days in a current folder and removes them.
find ./ -empty -type d -delete,find all the empty directories in current folder and delete them
date --date @120024000,format and print the time string @133986838 according to the default time format
find -name '*~' -print0 | xargs -0 -I _ mv _ /tmp/,"find all the files ending with ""~"" in current folder and move them to temp folder"
find ~/container  -mindepth 3 -type f -exec mv {} .. \;,find all regular files starting from level 3 of directory tree ~/container and move them to the current directory's parent
"find . -name ""*.c"" -print0 | xargs -0 rm -rf",remove all files with the .c extension in the current directory tree
find . -type f -print0 | xargs -0 wc -l,find all normal/regular files in current folder and display the total lines in them
find /path -mtime +30m,find all files/directories under /path directory that were modified more than 30 minutes ago
find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000,change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree
cat /proc/config.gz | gunzip,"print the kernel configuration options found in ""/proc/config.gz"""
echo -n | md5sum,calculate md5 sum of empty string
history -n,read all history lines not already read from the history file
find sources -type f -exec grep -H foo {} +,search for 'foo' in all regular files under 'sources' directory tree and show the matched lines with filenames
ping -c 1 hostname | grep 192.168.11 | grep 'bytes from' | awk '{print $4}' | sed 's/://g',"ping hostname, grep for 192.168.11 and print the ip from the output"
ls 2>&1 | tee -a /tmp/ls.txt,"write the standard output and error of ""ls"" to the console and append it to ""/tmp/ls.txt"""
find -amin +25 -amin -35,find all files/directories under current directory that were accessed more than 25 but less than 35 minutes ago
gzip -d --force * /etc,force decompress all files into '/etc'
curl http://127.0.0.1:8000 -o index.html,"download content from ""http://127.0.0.1:8000"" and output to ""index.html"""
"find ./ -maxdepth 1 -name ""some-dir"" -type d -print0 | xargs -0r mv -t x/","move all directories in the current directory that match ""some-dir"" to ""x/"""
"find . -name ""S1A*1S*SAFE""",search for files in current folder using name patterns
find foo -name Headers,search directory tree `foo' for files named `headers'
find /path -name 'pattern' -exec somecommand {} \;,run somecommand with one argument for each file recursively in /path that matches 'pattern'
find . -name '1US*',find all 1us* files/directories under current directory
"qstat -xml | tr '\n' ' ' | sed 's#<job_list[^>]*>#\n#g' \   | sed 's#<[^>]*>##g' | grep "" "" | column -t","print output of ""qstat"" with full job names and format as a table"
tar -czvf my_directory.tar.gz -C my_directory .,create a compressed archive named 'my_directory.tar.gz' with files inside directory 'my_directory' without including the directory entry 'my_directory' itself
find . -type f -exec cp {} /tmp +,copy all the regular files in the current directory to the temporary diectory.
crontab yourFile.text,"delete current cron job list, and use those in yourfile.text"
find . -name '*.php' -o -name '*.inc' | xargs wc -l,counts the number of lines in *.php and *.inc files in a current folder and subfolders.
rm -f ~/.android/adbkey ~/.android/adbkey.pub,removes files ~/.android/adbkey and ~/.android/adbkey.pub without prompting.
sudo crontab -u wwwrun -e,"edit the cron job list for user 'wwwrun' using default editor specified by the editor environment variable, or /usr/bin/editor if no default editor is specified."
find . -daystart -ctime 4 -ls -type f,"display long listing of all the files that have been changed in the last 4 days, daystart is used to compare from the starting of day i.e, at 00:00"
"find /path/to/dir -type f -exec sed '/@GROUP/,/@END_GROUP/!d' {} + | grep '_START'","search regular files from the /path/to/dir directory tree for lines that contain ""_start"" and are enclosed in lines ""@group"" and ""@end_group"""
find / -empty,find all empty files
nl filename,"prefix each non-blank line in ""filename"" with a line number"
find $HOME -mtime -2 -mtime +1,find all the files in the home folder that are modified day before yesterday
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs>    -0 rm",find '*prefs copy' files under /mnt/zip and delete them ensuring white space safety
find /home/baumerf/public_html/ -mmin -60 -not -name \*.log,find all files/directories under /home/baumerf/public_html/ that were modified less than 60 minutes ago excluding *.log files/directories
"find / -mindepth 3  -name ""*log""",list files/directories at least three levels down the directory tree
history | sed 's/^[ ]*[0-9]\+[ ]*//',print the output of history without line numbers
"read -p ""Are you sure? "" -n 1 -r","read a single character from standard input with prompt ""are you sure? """
find . -size 10M,find all files/directories under current directory that are 10mb in size
"find . -type d -exec rename 's/^thumbs$/thumb/' {} "";""","rename all ""thumbs"" directories to ""thumb"" in the current directory tree"
find /home -user tecmint,find all files that belongs to user tecmint under /home directory
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -printf ""%T+\t%p\n"" | sort | awk '{print $2}'",list all files in entire file system that are newer than the file $newerthan and older than the file $olderthan and sort them according to file modification time
"proc_load_average=`w | head -1 | cut -d"" "" -f13 | cut -d"","" -f1-2 | tr ',' '.'`",stores system load average number in the 'proc_load_average' variable.
"alias git-root='if [ ""`git rev-parse --show-cdup`"" != """" ]; then cd `git rev-parse --show-cdup`; fi'","set alias ""git-root"" for command ""if [ ""`git rev-parse --show-cdup`"" != """" ]; then cd `git rev-parse --show-cdup`; fi"""
find /usr -type c -name backup -print,search  character special files called ' backup '  from  /usr directory downwards and print them .
find -type f -name '*.txt' -print0 | xargs --null perl -pi -e 's/Windows/Linux/',replace the text 'windows' with 'linux' in all text files in the current directory and below
find . -exec grep chrome {} +,"search the files from the current directory tree for ""chrome"""
"find . -name ""filename including space"" -print0 | xargs -0 rm -rdf",search for all the files in the current folder which have spaces and force delete them
"find . -name ""*.java"" -print0 | xargs -0 wc",count the lines of java code for all the java files in the current directory
"find sourceDir -mindepth 1 -type d  -exec mv -t destDir ""{}""  \+",move all directories from the `sourcedir' directory tree to the `destdir' directory
"who | awk '{print ""The user "" $1 "" is on "" $2}'","print all logins formatted as ""the user user is on tty"" where user is the user name and tty is the login terminal"
find . -name aaa.txt,find files with name `aaa.txt' under the current directory
tr -d ' ',remove all spaces from standard input
find /original -name '*.processme' -exec echo ln -s '{}' . \;,"create symbolic links in current directory to all files located in directory ""/original"" and have filename extension "".processname"""
find . -type f \! -name '*.xml' -print0 | xargs -0 rename 's/$/.xml/',"recursively search for all files not ending in "".xml"" under the current directory, append "".xml"" to the end of each file name"
export PS1='\[\e]0;`hostname`\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$ ',"set the prompt to ""title: (hostname)"""
find . -name 'my*' -type f,search the current directory for regular files whose names start with my
"CDATE=$(date ""+%Y-%m-%d %H:%M:%S"")","save the current time formatted according to the format string ""%y-%m-%d %h:%m:%s"" to the variable 'cdate'"
find ~/code -name '.*' -prune -o -type f -a -perm /u+x -printf ':%h\n' |sort |uniq |tr -d '\n' > ~/.codepath,find the sorted and unique parent directory paths appended with : of all the files that are executable by owner under ~/code directory without descending into hidden directories and redirect the output to the file ~/.codepath
find . -maxdepth 1 -type d | sed '/^\.$/d',find all directories in maximum 1 level down the current directory and remove the . entry from the output
chown -R root:root /var/log/jenkins,"recursively change the user and group of all files in ""/var/log/jenkins"" to ""root"""
split -n 1000 /usr/bin/firefox,"split ""/usr/bin/firefox"" into 1000 files of about equal size"
find ./ -newer start.txt -and ! -newer end.txt,find files newer than start.txt but not newer than end.txt
find . -name modules \! -exec sh -c 'find -name modules' \;,find all files/directories named modules under current directory and list them twice
"find . -type f -name ""IMAG1806.jpg"" -exec rm -f {} \;",delete all regular files named 'imag1806.jpg' under current directory tree
"find . -iname ""needle""","find files named ""needle"" ignoring the case"
"find . -type f \( -iname ""*.txt"" ! -iname "".*"" \)",search the current directory tree for txt files skipping hidden ones
find . -iname .svn -exec rm -rf {} \;,"delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename "".svn"""
find /tmp/ -type f -mtime +1 -delete,delete all the regular files in the temp folder which have not been modified in the last 24 hours
"mkdir /tmp/A /tmp/B /tmp/C ""/tmp/ dir with spaces""","make directories ""/tmp/a"", ""/tmp/b"", ""/tmp/c"", and ""/tmp/ dir with spaces"""
"find . -type f -name ""*.css""",find all regular *.css files
find var/log/ -iname anaconda.*,search for files/directories with the case insensitive pattern anaconda.* in var/log directory
"find /Applications -type d -name ""*.app""",search the /applications directory tree for *.app directories
find / -mmin -1,find files that were modified in less than 1 minute ago
yes y | rm -ir dir1 dir2 dir3,"answer ""y"" to any prompts in the interactive recursive removal of ""dir1"", ""dir2"", and ""dir3"""
find -type f,find all files under current directory
kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}'),find and kill a process by name
find . -print | wc -l,display the count of all the files in the current folder
cat myfile.txt | wc -l,"count the number of lines in ""myfile.txt"""
wc -l $f | tr -s ' ' | cut -d ' ' -f 1,"print only the number of lines in file ""$f"""
find . -maxdepth 2 -name 'onlyme*',find all files/directories that start with 'onlyme' in their names under maximum 2 levels down the current directory
"CURRENT_PID_FROM_LOCKFILE=`cat $LOCKFILE | cut -f 1 -d "" ""`",save first one of space separated parts of each line in $lockfile file to the 'current_pid_from_lockfile' variable
column -t -s $'\t' list-of-entries.txt,"format tab delimited file ""list-of-entries.txt"" as a table"
env -u FOO somecommand,run 'somecommand' in an environment without the foo variable.
uname -n,display hostname.
find -name *.xml,find all *.xml files under current directory
find -ls,list all files/directories under current directory
ls -lR / | tee output.file,"prints long recursive listing of all content of a root folder, saving output to 'output.file'."
"read -p ""command : "" input_cmd","read a line of standard input into variable ""input_cmd"" with prompt ""command : """
find . -name '*.axvw' -exec grep -n 'some string' {} +,search for 'some string' in all *.axvw files under current directory and show the matched lines with line numbers
screen -R -O -t mysession -S mysession -f,reconnect to a named screen session
find ./* -mtime +5,find all files in the current directory recursively that were last modified more than 5 days ago
"find -print0 | while IFS= read -rd $'\0' f ; do echo ""[$f]"" ; done",print all file/directory paths under current directory
find -name \*.jsp | sed 's/^/http:\/\/127.0.0.1/server/g' | xargs -n 1 wget,"find all your jsp's, map them to your localhost webserver, and invoke a wget (fetch) on them"
find . -type l | xargs ls -ld,find symlinks in the current directory tree
"awk -f script.awk file{,} | column -t","execute ""script.awk"" on ""file"" and format the output as a table"
rev $filename | sort | uniq -f=N | rev,"sort file pointed by variable $filename, removing duplicate entries but ignoring the last n characters of each line."
yes | cp -rf /zzz/zzz/* /xxx/xxx,"copy and always overwrite all files in ""/zzz/zzz"" to ""/xxx/xxx"""
find . -type f -readable,display all normal/regular files in current folder which have readable permission
df -Ph $PWD | tail -1 | awk '{ print $3}',print amount of space available on the file system containg path to the current working directory human-readable.
find . -name .svn -exec rm -rf '{}' \;,delete all .svn files/directories under current directory
"find . -name ""*fink*"" -print",find all *fink* files/directories under current directory
find / -mmin -10,find all files on the system that have been modified in the last 10 minutes
chmod a+x myscript.sh,"allow all users to execute ""myscript.sh"""
"echo ""$PWD"" | sed 's!.*/!!'",print the current directory name without full path
find /tmp -type f -mtime +30 -exec rm -f {} \;,remove all files that's older than 30 days in '/tmp'
sudo yum update openssl,updates openssl package.
find . -mindepth 2 -type f,display all the regular/normal files in the current directory which are atleast 2 levels deep
"find ~/ -type f -name ""postgis-2.0.0""",find all regular files named postgis-2.0.0 under your home directory
find . -size -1M -exec rm {} \;,remove files that are less than 1mb in size under current directory
"find . -type f -name '*.*' -print0 | while IFS= read -r -d '' file; do     printf '%s\n' ""$file"" done",loop over the results of a find command
find /nfs/office -name .user.log -print,"search for the file "".user.log"" in a folder"
cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l,count lines that are neither blanks nor comments in a file 'foo.pl'
history | vim -,"view history using ""vim"""
"find A \! -path ""A/a/*""",find all files/directories under 'a' directory tree excluding the paths containing the directory 'a'
"find /file/path ! -newermt ""Jul 01""",find all files/directories that are not newer than jul 01 by modification time
find / -type d -print,display all directories in the entire file system
read -rp $'Are you sure (Y/n) : ' -ei $'Y' key,"read a single character from standard input into variable ""key"" without backslash escapes and using an interactive shell with the prompt $'are you sure (y/n) : ' and default value $'y'"
cd /lib/modules/$(uname -r)/,"change directory to ""/lib/modules/"" of the current kernel release"
shopt -s extglob; cd bar2; ln -s ../bar1/foo!(*.cc) .,"enable extglob expansion and create symbolic links in ""bar2"" directory to all files located in ""bar1"" directory that are not directory and do not have"".cc"" filename extension"
find . -type d -name tmp -prune -o -print | cpio -dump /backup,find al the tmp directories in the current directory and create a dump of it
find . -name \*.html -exec grep -H string-to-find {} \;,search for 'string-to-find' in all html files under current directory tree and show the matched lines with their filenames
find . -iname foo -type f,"search for all files named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory."
ip=$(hostname -I),"save ip addresses of the host name in variable ""ip"""
find . -maxdepth 1 -type f -printf '%TY-%Tm\n' | sort | uniq -c,count files in the current path by modification month
"find $HOME \! -iname ""*.c"" print","display all file in the home folder except "".c"" files"
"find -iname ""Dateiname""","find the file ""dateiname"" in the current folder ( case insensitive search)"
find ~/Journalism  -name '*.txt' -print0 | xargs -0 wc -w | awk '$1 < 2000 {v += $1; c++} END {print v/c}',compute the mean average of the word count of *.txt files smaller than 2000 words in the home directory
rename _dbg.txt .txt **/*dbg*,"remove ""_dbg"" from all file or directory names under the current directory"
rsync -av . server2::sharename/B,"archive directory ""."" to ""server2::sharename/b"""
"ssh host ""test -e /path/to/file""","check if ""/path/to/file"" exists on remote host ""host"""
tar -cvzf filename.tar.gz folder,"create a compressed archive ""filename.tar.gz"" with verbose output"
find -newermt yesterday -ls,list all files in the current directory tree that were last modified yesterday or later
find dir1 -mindepth N -type f,find all the regular files under directory 'dir1' that are at least n levels deep
"find  / -type d -name ""project.images""",find a directory named 'project.images' in the entire filesystem
find . -depth -name '*.zip' -exec /usr/bin/unzip -n {} \; -exec rm {} \;,find all .zip files in the current directory tree and unzip them deleting the archives on success
"find / -name ""*.old"" -exec /bin/rm {} \",search the entire file hierarchy for files ending in '.old' and delete them.
rsync -rtvpl /source/backup /destination,"copy recursively ""/source/backup"" to ""/destination"" preserving symbolic links, modification times, and permissions"
seq -w 30,print numbers from 1 to 30 with a leading 0
find `ls -d /[ubso]*` -name sar,find files/directories named 'sar' under directory trees whose path starts with '/u' or '/b' or '/s' or '/o'
chmod -R 755 /directory,"recursively set all permissions under ""/directory"" to 755"
IFS= read -r line,set ifs variable to empty before reading a line of standard input without backslash escape characters
find /tmp -type f -empty -print | xargs rm -f,remove all empty files in /tmp/ and below
"find ./default/files -type f -exec chmod ug=rw,o= '{}' \;","set permissions to ug=rw,o= for files inside the ./default/files tree"
echo Hello world | od -t x1 -t c,"print the hexadecimal bytes and printable characters of ""hello world"""
"xargs rm -f <<< $(find . -name "".txt"")",search for all text files in current folder and delete them
sudo find /var/www -type f -print0 | xargs -0 chmod 644,find all files under /var/www directory and set their permission to 644
find . -name not\* | xargs -d '\n' rm,"remove all files in and below the current directory whose names begin with ""not"""
find . -name '*.foo' -exec cat {} \;,find all *.foo files under current directory and print their contents
diff dir1.txt dir2.txt,display differences between files dir1.txt and dir2.txt.
echo <(yes),"print pathname of a file that is connected to the standard output of the command ""yes"""
find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \+,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
tmux send-keys -t cf 'cd ~/server' C-m,executes command 'cd ~/server' in an opened tmux session 'cf'.
seq 0 20 | xargs -n1 tssh MYBOXES,"execute command ""tssh myboxes n"" where n ranges from 0 to 20"
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') **...**,write a random list of numbers to /tmp/lst and stdout.
"find . -name ""*.ksh"" -prune","display all the files in the current folder that end with "".ksh"""
gunzip -c blah.gz | some_command,"use the uncompressed contents of ""blah.gz"" as input to ""some_command"""
"chown -v root ""$file""","verbosely change ownership of ""$file"" to ""root"""
comm -12 ignore.txt input.txt,"print common lines in sorted files ""ignore.txt"" and ""input.txt"""
"wc -l file.txt | cut -f1 -d"" """,print the number of lines in file.txt.
"split -l ${2:-10000} -d -a 6 ""$1"" ""${tdir}/x""","split ""$1"" into files of at most ""$2"" or default 10000 using a numeric suffix of length 6 and suffix ""${tdir}/x"""
find . -name tests -prune -o -type f -name '*.php' | xargs wc -l,counts lines in each of *.php files in a current folder and subfolders ignoring 'tests' folder and prints total count as well.
find /usr -name doc -type d,find directories named `doc' in /usr and below
find $HOME -size -500b,display all the files in the home folder which are smaller than 500 bytes
"find ""$1"" -type f -print0 | parallel -0 -X md5 > checksums.md5","find all files under $1, calculate their md5sum and redirect the result to checksums.md5"
"cat ""$(which f)""","print the file content of command ""f"""
comm <(sort f1.txt) <(sort f2.txt),"compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones"
find / -name 'Metallica*' -exec ls -l {} \;,"display a long listing of all the files that begin with the name ""metallica"" in the entire file system"
mv * /tmp/blah/,"move all files and directories in the current directory to ""/tmp/blah/"""
find / -newer ttt -user wnj -print,find all files/directories that are owned by user 'wnj' and are newer than 'ttt' by modification time in the entire filesystem
find / -size +100M -exec /bin/rm {} \;,search the entire file hierarchy for files larger than 100 megabytes and delete them.
sudo chown -R xxx /Users/xxx/Library/Developer/Xcode/Templates,"recursively change the ownership of all files in ""/users/xxx/library/developer/xcode/templates"" to ""xxx"""
find / -type f -name lilo.conf 2>/dev/null -exec cat {} \; >lilo.txt,"display the content of all the instances of the file ""lilo.conf"" in the file system and discard any errors in encountered during the search and display) and save the output to the file ""lilo.txt"""
"echo ""$1""| read -a to_sort","set the value of ""to_sort"" to ""$1"" in a subshell which no longer exists after the pipeline completes"
find /tmp -size 0 -atime +10 -exec ls -l {} \; > /tmp/checkold.txt,display a long listing of all the temp files whose size is 0 bytes and which have not been accessed in the last 10 days
ssh -t genja.org 'ssh raptor.lan hostname\; uptime',"execute ""ssh raptor.lan hostname\; uptime"" on server ""genja.org"""
env `cat xxxx` otherscript.sh,run 'otherscript.sh' script with all environment variables specified in the file 'xxxx'
sudo chmod u+s `which Xvfb`,"allow anyone to run command ""xvfb"" as the owner of ""xvfb"""
"KEY+=`date -r ""$arg"" +\ %s`",append the last modification time of file $arg as the seconds since epoch with a preceding space to the variable 'key'
find /home/hobbes/ /home/calvin/ -name “*.txt”,search for text files in the folders /home/hobbes/ /home/calvin/
"eval ""`find -type f -name ""*.htm"" |awk -F/ '{print ""cp "" $0 "" "" $2 ""-"" $3 ""-"" $4 ""-"" substr($5,5) "";"" }'`""",find all *.htm files under current directory and change their names by appending 3 levels of parent directory names at the beginning and modifying the actual name to dd-nnn format
cat B C D | sort | comm -2 -3 A -,"extract any line in sorted file ""a"" that does not appear in ""b"", ""c"", or ""d"""
find /usr/share/man/ -regex .*grep*,serach for all the files containing grep in man pages
find /mnt/raid -type d,print the list of directories that are present in the /mnt/raid directory tree
find /usr/share/doc -name README\*,find all files/directories under '/usr/share/doc' directory tree whose name start with 'readme'
ls -lrt | tail -n1,show a long listing of the latest file or directory under current directory
"find -regex ""^.*~$\|^.*#$""","find files in the current directory tree whose names match regular expression ""^.*~$\|^.*#$"""
find . -iname '.note' | sort,"search the current directory tree for files whose name is "".note"", case insensitive"
find /etc   ! -name /etc,print the list of files and directories of the /etc directory
find -type f -mtime 61 -exec ls -ltr {} \;,list all regular files modified more than 61 days
"find . -name ""*.xml"" -exec grep ""ERROR"" /dev/null '{}' \+","search for the string ""error"" in all xml files in the current working directory tree"
find . -type d -perm 755 -exec chmod 700 {} \;,find all directories with 755 permission and change the permission to 700
find ./ -name '*.JPG' -type f | wc -l,"find all the "".jpg"" files in current folder and display their count"
shopt -p | grep checkjobs,finds shell options like 'checkjobs' with their state.
find . -user daniel -type f -name *.jpg ! -name autumn*,"find .jpg files owned by user daniel in the current directory and its sub-directories but ignore any file beginning with ""autumn""."
find . -size +1024 -print,display all the files in the current folder which have are bigger than 1kb
"ln -f '/home/user/Musik/mix-2012-13/aesthesys~ I Am Free, That Is Why I'""'""'m Lost..mp3' '/home/user/Musik/youtube converted/aesthesys~ I Am Free, That Is Why I'""'""'m Lost..mp3'","force create a hard link named '/home/user/musik/youtube converted/aesthesys~ i am free, that is why i'""'""'m lost..mp3' with target '/home/user/musik/mix-2012-13/aesthesys~ i am free, that is why i'""'""'m lost..mp3'"
"find /var/www/vhosts/*/httpdocs/ -type f -iwholename ""*/wp-includes/version.php"" -exec grep -H ""\$wp_version ="" {} \;",identify cms version/releases accross all your wordpress websites
find . -name \*.php -type f -print0 | xargs -0 -grep -Hn '$test' | wc -l,search for a word in all the php files in the current folder and display the count of all matching lines.
ls |& tee files.txt,"prints long recursive listing of all content of a current folder, saving output to 'output.file'."
find . -name \*.c -exec grep wait_event_interruptible {} +,"find all *.c files under and below the current directory that contain ""wait_event_interruptible"""
find . -type f -print0 | parallel -0 -X md5sum,"find all files under current directory, calculate their md5sum"
ps -fp <pid>,get the command line args passed to a running process
rsync -rvz --progress --remove-sent-files ./dir user@host:/path,"recursively move ""./dir"" to ""user@host:/path"" compressing data and displaying progress during transmission"
man bash | less -p BASH_SOURCE,"view the bash manpage, starting with the view positioned at the first occurrence of the expression ""bash_source""."
cat /boot/config-`uname -r` | grep IP_MROUTE,"display all lines containing ""ip_mroute"" in the current kernel's compile-time config file."
"find /etc -execdir echo ""{}"" ';'",descend into every directory under /etc and print the file/directory names with relative paths
"find . -type f -name ""*.tex""",find all *.tex regular files under current directory
kill `ps ax | grep 'python csp_build.py' | awk '{print $1}'`,"send sigterm signal to any process which 'ps' lists as ""python csp_build.py"""
find / – perm -0002,search the entire file system for any file that is writable by other.
find . | grep -i demo | grep -i sitesearch,"search for all files with either ""sitesearch"" or ""demo"" in their path names"
w -h  | cut -d' ' -f1 | sort | uniq,prints sorted list of logged in users.
find . -type l -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \;,find all the links that have been modified on a specific day and copy them to another directory
"sudo ln -s -f ""/usr/local/bin/findpdftext"" ""/usr/local/bin/fpdf""","force create a symbolc link named ""/usr/local/bin/fpdf"" to ""/usr/local/bin/findpdftext"""
find . -name '*my key phrase*',find all files/directories with 'my key phrase' in their names under current directory
find . ! -user root,display all the users in the current folder which do not belong to the user root
find /home -size +10M -size -50M,find all the files in the folder /home which are bigger than 10mb and smaller than 50 mb
find ~/backups/mydatabasename/* -mtime +30 -exec rm {} \;,remove all files in the ~/backups/mydatabasename directory recursively that were last modified more than 30 days ago
fg `jobs | tr '[]' ' \n' | zenity  --list --column '' --column ''`,selects a job from zenity dialog list and gets it back to the foreground.
df -h .,report file system containing path to the current working directory disk usage human-readable.
find . -type f | grep -o -E '\.[^\.]+$' | sort -u,list the unique file extensions of all files under the current directory
tac your.log | grep stuff,grep from bottom of file
sudo env,check the environment variables generated by switching to the root account.
rsync -avz -e ssh --progress user@source-server:/somedirA/ somedirB/,"synchronize via ssh ""user@source-server:/somedira/"" to ""somedirb/"" with compressed data during transmission and display progress"
"find ""$SOURCE"" -type f -iname '*.jpg' -exec /path/to/filecopy.sh {} +","execute script /path/to/filecopy.sh passing all jpg files found under the ""$source"" directory and below as arguments"
"find /home -name ""*.txt""",display all the text files in the home folder
readlink -f $(which java),print absolute path of java executable
"head -1 table | tr -s ' ' '\n' | nl -nln |  grep ""Target"" | cut -f1","retrieve column number from column name ""target"" in file ""table"""
"cd ""$(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d ""="" | tr ""\"""" ""\n"" | tr -d ""\n"")""",change directory to the download directory specified in the current user's user-dirs.dirs file
grep ! error_log | find /home/foo/public_html/ -mmin -60,find all files/directories under /home/foo/public_html/ that were modified less than 60 minutes ago
find -ipath 'projects/insanewebproject',find files/directories under current directory that matches 'projects/insanewebproject' in their paths
find / -name '*.txt' -exec du -hc {} \;,find all *.txt files under / and print their sizes and paths
jobs -p | xargs kill,kill all background jobs
alias restart_rails='kill -9 `cat tmp/pids/server.pid`; rails server -d',"set alias ""restart_rails"" for command 'kill -9 `cat tmp/pids/server.pid`; rails server -d'"
mkdir 3/foo 3/bar 3/baz,"make directories ""3/foo"", ""3/bar"", and ""3/baz"""
ping -c 1 -t 1 192.168.1.1,"send a single ping request with a ttl of 1 to ""192.168.1.1"""
"find . -type f -name ""*.js.compiled""","find all files ending with ""js.compiled"" in current folder"
find /usr -name lib64 -type d|paste -s -d:,"find all directories with the name ""lib64"" in the usr folder and replace space with ':'"
find . -type f -print | xargs agrep -2 -il '^Subject:.*unique subject',list the files from the current directory tree that contain lines approximately matching regular expression '^subject:.*unique subject'
ifconfig | grep 'inet' | grep -v '127.0.0.1' | awk '{print $2}' | sed 's/addr://',gets ip addresses of all active network interfaces on host.
find /myfiles -atime +30 -exec rm {} ;,remove all files in the /myfiles directory tree that were accessed at least 30 days ago
seq 10 | xargs -P4 -I'{}' echo '{}',print numbers from 1 to 10 using up to 4 processes
"find $d -type d -exec chmod ug=rwx,o= '{}' \;",find all directories under $d directory and set read-write-execute permission for owner and group and no permission for other for those directories
find /path ! -perm /g+w,find files/directories that does not have write permssion for group
ssh user@server,"ssh into host ""server"" as user ""user"""
finger -l | awk '/^Login/',print login name and full name of all users currently logged in
find . type -f -ctime +2,search the current directory recursively for regular files last changed more than 2 days ago
"find . -name ""*.png"" -print0 | sed 'p;s/\.png/\.jpg/' | xargs -0 -n2 mv",rename all the png files to jpg files in the current fodler
which file | xargs file,"display file type information for all instances of ""file"" in the current path."
"TODAY=$(date  -d ""$(date +%F)"" +%s)",represent the current time as seconds since epoch and save it to variable 'today'
shopt -s cdable_vars,enables shell option 'cdable_vars'.
find -regex '.*\.\(c\|cpp\)',"find all c, cpp files in current folder"
find -L research -maxdepth 2 -type d ! -group ian,search the `research' directory and one level below for directories that are not owned by group `ian'
find ./ -type l -exec file {} \; |grep broken,find all broken symlinks under current directory
find / -dev -size +3000 -exec ls -l {} ;,display long listing of all the files in the root folder which are bigger than 3kb
wc -l file,counts lines of 'file' file.
kill -HUP $( cat /var/run/nginx.pid ),"send sighup (hangup) signal to nginx master process, causing it to re-read its configuration and restart child processes if necessary."
find file1 -prune -newer file2,"print the name of ""file1"" if this file is newer than ""file2"""
"echo -e {{a..n},ñ,{o..z}}""\n"" | nl",generate the spanish alphabet and number each character
ls !(*foo),"lists all files and folders with its content in a current folder, excluding names ending with 'foo'."
"find . -name ""*.pdf"" -exec rm {} \;",recursively finds all '*.pdf' files in a current folder and removes them.
find . -name .svn -delete,delete all .svn files/directories under current directory
find . -type f -exec dos2unix {} \;,convert all dos files under and below the current directory to the unix format
cd /nfs/office/ &&  find . -name 'file.txt' | sed -r 's|(\./([^/]*/)?).*|\1|',"search for the text file ""file.txt"" and display its parent directory"
find . -user xuser1 -exec chown -R user2 {} \;,find files and directories owned by xuser1 and change their ownership to user2
find -d MyApp.app -name Headers -type d -print0 | xargs -0 rm -rf,search directory tree `myapp.app' for directories whose name is 'headers' and delete them in an optimized way
find . -maxdepth 2 -type d | sed 'p;s/thumbs/thumb/' | xargs -n2 mv,"rename all ""thumbs"" directories to ""thumb"" in the current directory and 1 level below"
"find . -name ""*.$1"" -delete;",delete all files/directories under current directory tree with '.$1' extension where $1 expands as the first positional parameter
"df ""$path"" | tail -1 | awk '{ print $6 }'",print mount point of the file system containing $path.
"find . -name ""*.gz"" | xargs gunzip","unzip every "".gz"" file in the current directory tree"
find root -type -f -cmin +30 -delete,delete all files under root whose status were changed more than 30 minutes ago
"rsync --list-only --include ""*2012*.xml"" -exclude ""*.xml"" serveripaddress::pt/dir/files/ --port=111 > output.txt","list all file details with filenames matching ""*2012*.xml"" from ""serveripaddress::pt/dir/files/"" listening on port 111 and write to ""output.txt"""
"find ./ -name ""*.sqlite"" -printf '%Tc %p\n'",display all sqlite files in the current directory along with their timestamp
find -type f -ctime +14,search the current directory tree for regular files last changed more than 14 days ago
"find $HOME -not -iname ""*.c"" -print","display all file in the home folder except "".c"" files"
find / -user www -print,find all the files in the file system that belong to the user www
find . -type f \( -exec sh -c 'echo first; false' \; -false -o -exec echo second \; \),find all files in current directory and execute multiple commands for each file
"find ~/dir_data -type f  -exec chmod a-x,u+w {} \;",search the dir_data directory and all of its sub-directories for regular files and remove the execute permission for all while adding the write permission for the user.
find . -depth=1 -exec mv {} /tmp/blah/ \;,"move all files and directories in the current directory to ""/tmp/blah/"""
RM=`which rm`,"save full path of command ""rm"" to variable ""rm"""
$ find . \( -name D -prune \) -o -name hi.dat,search in the current directory and all sub-directories except ./d and any further sub-directories also named d for the file named hi.dat
"inode=`ls -i ./script.sh | cut -d"" "" -f1`",saves index number of file 'script.sh' in the 'inode' variable.
mount | grep $(blkid -U '09b8f1ab-8d4b-4c5f-b395-40be09c090b0') | grep '/media/WD_Disk_1 ',"check if a drive with uuid ""09b8f1ab-8d4b-4c5f-b395-40be09c090b0"" is mounted on ""/media/wd_disk_1"""
find -E . -iregex '.*/(EA|FS)_.*',find all files/directories under current directory that match the case insensitive extended regex .*/(ea|fs)_.*
mount | grep -q ~/mnt/sdc1,"check if ""~/mnt/sdc1"" is mounted"
mkdir -p `dirname /full/path/to/file.txt`,"create intermediate directories ""full"", ""path"" as required and directory ""to"""
mkdir temp,"make directory ""temp"""
pstree -a pid,prints running process that has id 'pid' with command line arguments.
find . -exec command {} +,run `command' passing the files from the current directory tree as arguments
find . -type d -exec basename {} \; | wc –l,count the number of files in the current directory and below
find [whatever] -print0 | xargs -0 cat,print content of all files found regarding seach options '[whatever]'
"find .cache/bower/ -name ""message.txt"" | xargs cat","search for ""message.txt"" in the folder .cache/bower and display its contents"
find . -type f -exec sed '1s/^\xEF\xBB\xBF//' -i.bak {} \; -exec rm {}.bak \;,find and clear utf-8 files with bom
ls -m,"lists all files in a current folder, separating names with comma."
"echo -n ""yourstring"" |md5sum","calculate the md5 sum of ""yourstring"""
find . -type f -not -name '*ignore1' -o -not -name '*ignore2' | xargs rm,"remove all regular files from the current directory tree whose names do not end with ""ignore1"" or ""ignore2"""
export JAVA_HOME=$(readlink -ze /usr/bin/javac | xargs -0 dirname -z | xargs -0 dirname),"export variable ""java_home"" as symlink resolved absolute path of two parent directories above ""/usr/bin/javac"""
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip {} \; -exec echo {} \;","compress and display the original filename of every file on the system that is greater than 100000 bytes and ends in "".log"""
find ~/ -name '*.txt',find all *.txt files/directories under your home directory
du -hs /path/to/directory,find apparent size of a target directory
"echo -en ""${line:0:11}"" ""\t"" $(md5sum ""${line:12}"") ""\0""","print first 11 characters from $line, print a tab, print the md5 sum of the file specified by the 13th and onward characters from $line and print a null character at end without a trailing new line"
who | awk '{print $1}' | sort | uniq -c | sort -n,count the number of times each person is logged in on the system
tree --du -h -L 2,print the file size and directory size in human readable format of the current directory tree 2 levels deep
find /etc/ -user root -mtime 1,show all files in /etc that are owned by root have been modified within the last minute
tar -C my_dir -zcvf my_dir.tar.gz .[^.]* ..?* *,create a compressed archive in my_dir directory matching '.[^.]* ..?*' glob pattern
"mytemp=""$(mktemp -t ""${PROG}"")""","creates temporary file with name formatted like expression in variable ${prog}, and saves path to it in 'mytemp' variable."
sudo rm -rf bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node,"remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node' with superuser privilege"
"find /usr/local -name ""*.html"" -type f","search through the /usr/local directory for files that end with the extension .html, and print the file locations."
find whatever -print0 | xargs -0 command,run command with all the file/directory path under whatever directory as arguments
find /tmp/1 -iname '*.txt' -not -iname '[0-9A-Za-z]*.txt',display all text files in the folder /tmp/1 excluding those which do not have spaces in their names
watch -n 0.5 ls -l,"execute ""ls -l"" every 0.5 seconds"
{ time sleep 1 ; } 2> time.txt,reports time consumed by command 'sleep 1' to the file time.txt together with command error output.
"echo ""command"" | ssh user@host","run ""command"" on server ""host"" as user ""user"""
"yum -y groupinstall ""Development Tools""","installs package group ""development tools"" answering 'yes' on all questions."
find . -name '*.foo' -exec grep bar {} \;,find all *.foo files under current directory and search for 'bar' in those files
find / -name grub.conf 2>/dev/null,find grub.conf files in entire file system discarding errors
"echo `date +""%a %x %X""` `hostname`","print the date formatted with ""%a %x %x"" followed by the host name"
find . -type f -exec md5 {} \;,create a list of all files in all subdirectories
find ~ -mtime 1 -daystart,find all files in home folder which have been modified exactly 1 day before
ifconfig eth0 | grep 'inet addr:' | awk '{print $2}' | awk -F ':' '{print $2}',finds ip address of 'eth0' network interface.
"find . -name ""*.txt"" -print0 | xargs -0 -n 1 process_one",find all *.txt files/directories under current directory and execute process_one for each of them
"find ./ -type f -regex "".*\.[JPGjpg]$"" | wc -l",find all the files in current folder which end with a speicifc regular expression and display their count
find -name .git -prune -o -exec git log --pretty=tformat:'' --numstat --follow --find-copies-harder --reverse {} ';' | cut -f3- | grep '.* => .*',list files that have been renamed in git repository.
"sed -i ':a;N;$!ba;s/\n/,/g' test.txt","replace all newlines except the last with a comma in ""test.txt"""
find . | cpio -pdumv /path/to/destination/dirrectory,"the cpio command is a copy command designed to copy files into and out of a cpio or tar archive, automatically preserving permissions, times, and ownership of files and subdirectories."
ls -1 | (for ((x=0;x<N;x++)) ; do read ; done ; head -n1),prints the nth line of output from 'ls -1'
"find ""$STORAGEFOLDER"" -name .todo -printf '%h\n' | uniq | xargs ls -l","display a long list of all the directories which have files ending with "".todo"""
"pwd | grep -o ""\w*-*$""",prints current directory name
find . -name '* *',find all files and directories in the current directory recursively that contain spaces in their names
"find . -iname ""*.mov"" -printf ""%p %f\n"" | xargs -r -n2 ffmpeg -f flv -i",find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the path and the name for each file
"find . -name ""*.gz"" -exec zcat ""{}"" + |grep ""test""","unzip all files that match ""*.gz"" in the current directory and subdirectories to stdout and search for ""test"""
ps -ef | grep $0 | grep $(whoami),print information of the process running the current script as the current user
find . -name '*.txt' | cpio -pdm /path/to/destdir,find all text files in the current directory and compress them to a cpio file
find -maxdepth 1 -type f -perm /222,find regular files in the current directory that are writable by at least somebody
find . -type f -print | xargs -n 1,list all regular files under current directory (not white space sage)
cat <(grep -vxF -f set1 set2) <(grep -vxF -f set2 set1),print lines that only unique ones in 'set1' and 'set2' files
my_tmp_dir=$(mktemp -d --tmpdir=/tmp),creates temporary directory in '/tmp/' folder and saves path to it in 'my_tmp_dir' variable.
"find . -name ""*.sh"" | xargs grep ""ksh""","search the .sh files in the current directory tree for string ""ksh"""
"dig +short ""$domain""","get domain ""$domain"" ip address"
(cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort > b),find all files/directories 1 level down the ~/bin/filesdvorak/ directory and redirect the sorted output to file b
"find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$F[1]; print ""$sum\n""' | tail -n 1",get the total sizes of all files under current directory
ls `pwd`/*,list all files and folders in the current working directory
find . -mindepth 1 -maxdepth 1 -type d,find all directories in 1 level down the current directory
sudo find . -type d -exec chmod 755 {} +,change the permissions of al the directories in the current folder
chown user:group file ...,"change the owner to ""user"" and group to ""group"" of files ""file ..."""
find -type f -name *ummy,display all regular/normal files in the current folder ending with the word ummy
"join -t, test.1 test.2 | join -t, - test.3 | join -t, - test.4",join comma-separated information in 4 files - files must be sorted.
"find . -type f -name '.*' -print0 | while IFS= read -r -d '' f; do basename ""$f""; done",get a list of all hidden files from the current directory tree
pushd $(dirname $0),"pushes to the dirs stack directory path of the current script, or current directory path if executed from bash shell."
"find images -name ""articles.jpg""",find all files/directories named 'articles.jpg' under 'images' directory tree
"find ""$root"" -name "".[a-z]*"" -prune -o -type d -printf '%p:'","print a colon-separated list of all directories from the $root directory tree, except those matching pattern "".[a-z]*"""
sed s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html | tee index.html,"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in ""index.html"" and write the output to standard output and ""index.html"""
"find /var/www/ -type f -iname ""*.php"" -print",find all php files in the folder  /var/www/
"ps -e -orss=,args= | sort -nr | head",prints long listing of top ten most memory using processes in a system.
"find . -type d -name files -exec chmod ug=rwx,o= '{}' \;",find all directories named 'files' under current directory and set read-write-execute permission for owner and group and no permission for other for those directories
"find $directory -type l -printf ""%p$IFS""","list symbolic links under the directory ""$directory"" using contents of the $ifs variable between output of each one"
find / -type f -perm 0777,find all regular files starting from / that have permissions 777
find * -maxdepth 0,select everything selected by * without descending into any directories
unset GNUPLOT_DRIVER_DIR,unsets gnuplot_driver_dir variable.
"echo -e ""Testing\r_Tested"" | awk -v RS=""_"" '{ print $0; }' | od -a","replace ""_"" with newlines in ""testing\r_tested"" and display the named characters"
find . -name '*.def' | sed 's/\(.*\)/\1.out/' | xargs touch,"for each .def file under the current directory, create an empty .def.out file with current timestamp."
cd `find a |sed '$!d'`,change the directory to the last found folder in the directory 'a'
"find . -name ""*.php"" -exec chmod 755 {} \;",change permissions for all php files under the current directory tree to 755
"cd `find . -name ""config""`","search for the directory ""config"" in the current folder and change directory to it"
find -type l -xtype l,find all broken symlinks under current directory
find $SOURCE -type f -mtime +$KEEP | sed ‘s#.*/##',find all regular files under $source directory tree that were modified more than $keep days ago and show only the names without the paths
find /tmp/foo -exec /tmp/echoargs {} \;,execute script /tmp/echoargs on all files from the /tmp/foo directory tree
"find ./ -type f -print0 | xargs -0 -n1 md5sum | sort -k 1,32 | uniq -w 32 -d --all-repeated=separate | sed -e 's/^[0-9a-f]*\ *//;'","run checksums recursively from the current directory, and give back the filenames of all identical checksum results"
find -print0 | sort -z | cpio -pdv0 ../new,"copy all files and directories under the current directory into ""../new"" preserving relative paths"
chmod g+w .[^.]* ..?*,"add group write permission to all files and directories in the current directory including hidden files and excluding "".."""
"find /res/values-en-rUS /res/xml -iname '*.xml' | while read file; do grep -i ""hovering_msg"" ""$file""; done","search the xml files from directories /res/values-en-rus and /res/xml for string ""hovering_msg"""
"diff ""${@:3}"" <(sort ""$1"") <(sort ""$2"")","print differences between the sorted content of file $1 and file $2, executing 'diff' with options from ""${@:3}"" array slice"
"cal | awk 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}' FIELDWIDTHS=""3 3 3 3 3 3 3 3"" date=31",prints week day of a 31 day in a current month.
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | wc -l,check if current shell is running within a 'screen' process.
find . -atime +30 -exec ls \;,find all the files in the current directory which have been modified in the last 30 days and display the contents.
"find /path -type f -not -name ""*.*"" -print0 | xargs -0 rename 's/(.)$/$1.jpg/'","find all files under ""/path"" that do not contain a ""."" and append "".jpg"" to their file name"
alias no=ls -f,"set alias ""no"" for command ""ls -f"""
"find . -type f -name ""*.txt"" | xargs    -I {} ksh -c ""echo deleting {}; rm {}""",remove all files with a txt extension under current directory
"inarray=$(echo ${haystack[@]} | grep -o ""needle"" | wc -w)",records the number of occurences of 'needle' in the array 'haystack' into the variable 'inarray'
sort temp.txt -otemp.txt,sort the lines of the file 'temp.txt' and change it in-place
"echo ""mpc-1.0.1.tar.gz"" | sed -r 's/\.[[:alnum:]]+\.[[:alnum:]]+$//'","remove the last two alphanumeric file extensions from ""mpc-1.0.1.tar.gz"""
cat somefile | splitter 16224-16482,"print the contents of ""somefile"" as input to ""splitter 16224-16482"""
date -d tomorrow+2days-10minutes,show the date in default format for tomorrow + 2 days + 10 minutes
"ps -o uid,pid,cmd|awk '{if($1==""username"" && $3==""your_command"") print $2}'|xargs kill -15","send sigterm (signal 15) signal to all process whose username is ""username"" and whose command is ""your_command""."
find . -size -26c -size +23c -ls,display long listing of all files in the current directory whose size is 24 or 25 bytes.
host `hostname` | awk '{print $4}',print the ip addresses for the current host name
find -name 'access.log.*.gz' | sort -Vr | rename 's/(\d+)/$1+1/ge',"rename all files matching ""access.log.<number>.gz"" incrementing <number>."
"echo -e ""length(FOO_NO_EXTERNAL_SPACE)==$(echo -ne ""${FOO_NO_EXTERNAL_SPACE}"" | wc -m)""","reports count of characters in the value of ${foo_no_external_space} variable as follows:  ""length(foo_no_external_space)==<counted number of characters>"""
"find . -name ""x*"" -print0 | strace xargs -0 -I '{}' mv '{}' /tmp/other",find x* files/directories under current directory whose status was changed less than 1 day ago and move them to /tmp/other
find . -type d -delete,find all the directories in current folder and delete them
shopt -s autocd,enables shell option 'autocd'.
find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d,find all directories in /path/to/dir/ without going into sub-directories
tFile=$(mktemp --tmpdir=/dev/shm),generates temporary file in a '/dev/shm' folder and saves path to it in a 'tfile' variable.
diff -rq dir1 dir2,"print which files differ in ""dir1"" and ""dir2"" recursively"
source <(./script.sh | sed -rn '/volume/{s#/dev/([^[:space:]]+)[[:space:]]+#\1=#;p}'),"parse output from ""script.sh"" in the current directory which is expected to generate ""variable: value"" formatted data, and add the resulting variables to the current shell's environment."
find /lib/modules -name '*.o',find all files/directories with '.o' extension under '/lib/modules' directory tree
xargs -i rm '{}',take a file path from standard input and remove it.
"find … -exec sh -c 'trap ""echo \$?"" EXIT; invalid_command ""$0""' {} \;",find files in a directory and exit the command if the syntax is correct or display invalid command if the syntax is wrong.
"find ""$ORIG_DIR"" -name ""*"" -type d","display all directories in the folder ""$orig_dir"""
sudo chown root. /etc/udev/rules.d/51-android.rules,"change the ownership of ""/etc/udev/rules.d/51-android.rules"" to ""root"""
find . ! -path '*bar*' -print,return every file that does not have bar somewhere in its full pathname
find … -print0 | xargs -0 -n1 invalid_command,search for files in a directory and check the validity of a command by giving the  file as input
find / -name foo.txt,find file named foo.txt under root / directory.
"find . -name ""filename including space""",display all the files having spaces in the current folder
rsync -a --delete blanktest/ test/,"archive ""blanktest/"" to ""test/"" deleting any files in the destination not found in the source"
"env | grep "".*X.*""",list all variables (names and values) whose name or value contains x.
seq -s % 4|tr -d '[:digit:]',print a line of 3 '%' characters
find . -name '*.scm',find *.scm files recursively in the current directory
"find $DIR -name ""*.txt"" -print",search directory tree $dir for *.txt files
split --lines=1 --suffix-length=5 input.txt output.,"split ""input.txt"" into files with 1 line each and use a prefix ""output."" and a suffix length of 5"
"comm -2 file1.txt file2.txt | awk -F'\t' '{print (NF==2?""y"":"""")}'","print ""y"" for each line in ""file2.txt"" found in ""file1.txt"" and a blank newline otherwise"
echo -n $(pwd),print the current working directory without a trailing newline
"find ""$1"" -path ""*/.*"" -prune -o \( -type f -print0 \)",find all files under $1 directory excluding hidden files and append a null character at the end of each of their paths
"find . -name ""*.cpp"" -exec dirname {} \; | sort -u",search for al cpp files in current folder and display unique parent directory of these files in sorted order
"find . ! -name ""$controlchars""",find all files and directories that do not match the pattern given as the $controlchars variable
tail -n +1000001 huge-file.log,"print ""huge-file.log"" starting at line 1000001"
"find / -group users -iname ""filename""","search the specified group for the given ""filename"
unset -v penultimate,unsets shell variable 'penultimate'
tar cf - $PWD|tar tvf -,create and list contents of the archive
find * -type f  | xargs md5sum | sort | uniq -Dw32 | awk -F'[ /]' '{ print $NF }' | sort -f | uniq -Di,print out all files with their paths that have identical content and the same filename in different cases
"bind -P | grep --fixed-strings ' can be found on ' | perl -pe 's/((?<!\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1Esc,/g'",print all active readline keybindings
shopt -u nocasematch,disables shell option 'nocasematch'.
"find . -ls | awk '{printf( ""%s,%s,%s,%s,%s,%s,%s,%s %s %s,%s\n"", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 )}'","list all files/directories under current directory using comma (,) as the delimiter for different fields in the output"
cat file1 file2 | crontab,"add cron lists from ""file1"" and ""file2"" to list of cron jobs, giving errors for any lines that cannot be parsed by crontab."
yum -y install mono-devel,"install 'mono-devel' package, answering 'yes' for all questions."
gzip -k *cache.html,"compress every file in the current directory that matches ""*cache.html"" and keep the original file"
find ~/junk  -name 'cart[1-6]' -exec ls -l {} \; 2> /dev/null,"list files cart1, cart2, ..., cart6 in directory ~/junk"
ln myfile.txt my-hard-link,"create a hard link named ""my-hard-link"" to ""myfile.txt"""
"date +%Y:%m:%d -d ""yesterday""",print yesterday's date as yyy:mm:dd
cat $filename | rev | cut -c 3- | rev,remove the last 2 tab-separated fields of each line in file pointed to by filename
"find ~ ! -user $USER -exec sudo chown ${USER}:""{}"" \;",find all files in the home directory tree that are owned by another user and change their ownership to the current user
"history -s ""$line""",save $line line in history
top -b -n1 | grep processname,"display process information for all processes whose command line contains ""processname""."
"find / -perm -u+rw,g+r,o+r",find files in entire file system with at least 644 permissions
ps -u $(whoami) --no-header -o vsz | dc -f - -e '[+z1<r]srz1<rp',print entire virtual memory usage of the current user
ifconfig | grep -i hwaddr | cut -d ' ' -f9,gets mac address of eth0 network interface.
man find,show manual for the find command
curl http://example.com/,"download contents of a website ""http://example.com/"""
nohup java -jar program.jar &,"run the java archive ""program.jar"" in the background and immune to sighup (hangup signals) sent to it."
"find . -type f -print0 | xargs -0 stat -f ""%m %N"" | sort -rn | head -1 | cut -f2- -d"" """,find recursively the latest modified file in the current directory
"find temp/large/* -maxdepth 2 -iname ""*.jpg"" -print0 | xargs -0 mogrify -resize 800x800"">"" -quality 85 -compress JPEG -monitor -strip -gravity SouthEast -draw 'text 10,10 ""www.kmstools.com""'","find all *.jpg (case-insensitive) files under maximum 2 levels down the temp/large/* paths and run `mogrify -resize 428x270"">"" -quality 80 -compress jpeg -monitor -strip` with the file paths as arguments"
cat $(find . -name '*.foo'),find all *.foo files under current directory and print their contents
find . -path './src/emacs' -prune -o -print,find all files/directories under current directory tree wihout descending into './src/emacs' directory
"find . -name ""*.c"" -a  -perm -777 | xargs rm -rf",find all file in current directory with have .c extenstion & have 777 permission . delete then
find . -name \*.coffee -exec awk '/re/ {print;exit}' {} \;,search for first match of the regex 're' in all *.coffee files under current directory
ssh -v -Y phil@192.168.0.14 -p 222,"invoke a trusted x11 forwarding ssh connection with server ""192.168.0.14"" on port 222 as user ""phil"""
grep '^[[:space:]]*http://' | sort -u | nl,"search for lines that have zero or more whitespace characters before ""http://"" and number the uniquely sorted output"
find . type -f -mtime +2,search the current directory recursively for regular files last modified more than 2 days ago
"time find /usr/src -name ""*.html"" -exec grep -H ""foo"" {} ';' | wc -l","measure the execution time of the command: find /usr/src -name ""*.html"" -exec grep -h ""foo"" {} ';' | wc -l"
find . -type f -iname '*.txt' -print0 | xargs -0 rename .txt .abc,rename all *.txt regular files in the current directory tree to *.abc
ssh -i ./device_id.pem deviceuser@middle.example.org:2222,ssh login in 'middle.example.org' via port 2222 as user 'deviceuser' using a private key file './device_id.pem'
"echo ""$f"" | grep -Eo '[0-9]+[.]+[0-9]+[.]?[0-9]?' | cut -d. -f1","finds strings with dot-separated sequence of numbers, and prints part of that sequence before the first dot."
"screen -list | grep -q ""myscreen""",check if named screen session exists
chown -R andrewr:andrewr *,"recursively change the owner and group of all files in the current directory to ""andrewr"""
"read -p ""Is this a good question (y/n)? "" answer","read a line from standard input with prompt ""is this a good question (y/n)? "" and save the response to variable ""answer"""
"cat infile | paste -sd ',\n'","write every two lines in ""infile"" on a single line separated by a comma"
"find /path/to/dir -type f | perl -ne 'chomp(@files = <>); my $p = 9; foreach my $f (sort { (stat($a))[$p] <=> (stat($b))[$p] } @files) { print scalar localtime((stat($f))[$p]), ""\t"", $f, ""\n"" }' | tail",find the most recently modified files in /path/to/dir and print the modification time followed by a tab and the filename for each file
"for a in `find . -name '*.py'` ; do cp ""$a"" ""$a.cp"" ; echo ""Added line"" > ""$a"" ; cat ""$a.cp"" >> ""$a"" ; rm ""$a.cp"" ; done","add ""added line"" on top of each *.py files under current directory"
find / -fstype nfs -print,display all the files in the file system which are present in nfs system
history | tail -n 10,print the last 10 commands in history
find . -mount -type d -print0 | xargs -0 -n1 /tmp/count_em_$$ | sort -n,"find all directories under the current directory that is on the same filesystem, execute ""/tmp/count_em_$$"" with the directory as an argument, sort the result numerically from least value to greatest value"
ln -sf '/cygdrive/c/Users/Mic/Desktop/PENDING - Pics/' '/cygdrive/c/Users/Mic/mypics',forcibly create symlink named as '/cygdrive/c/users/mic/mypics' to the directory '/cygdrive/c/users/mic/desktop/pending - pics/'
"find / -perm /g=w,o=w",find files in entire file system that are writable by group or other
"find . -name ""*.css"" -exec grep -l ""#content"" {} \;",find all css files that do something with html id #content
gzip archive.tar,"compress ""archive.tar"""
"echo ""$var"" | rev | cut -d: -f1 | rev",display the last colon-separated field of variable 'var'
find data/ -name 'filepattern-*2009*' -exec tar uf 2009.tar '{}' +,archive all filepattern-*2009* files/directories under data/ into 2009.tar
"rsync -zvr --exclude=""*"" --include=""*.sh"" --include=""*/"" ""$from"" root@$host:/home/tmp/","recursively copy all files matching ""*.sh"" in ""$from"" to ""root@$host:/home/tmp/"" compressing data during transmission"
"top -b -n 1 | mail -s ""any subject"" your_email@domain.com","send e-mail to ""your_email@domain.com"" with subject ""any subject"" containing process statistics output by the gnu version of 'top'."
myVariable=$(env  | grep VARIABLE_NAME | grep -oe '[^=]*$');,"show all values (without the names) of variables whose name or value contains ""variable_name"""
find / -mtime +50 -mtime -100 | head,find all the files in entire file system  which are modified more than 50 days back and less than 100 days and show a few lines of output from the beginning
"find . -name ""*.sh"" -exec ls -ld {} \;",long list the detials of all the shell scripts in current directory
split -b 10 input.txt xxx/split-file,"split ""input.txt"" into files of at most 10 bytes each with prefix ""xxx/split-file"""
screen -dmS title executable,run a program in a named screen session
ping google.com | awk -f packet_loss.awk,"use the output of ""ping google.com"" as input to awk script ""packet_loss.awk"""
find -type f |  grep -P '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs ls -l,list in detail regular files from the current directory tree whose names match perl regular expression '\w+-\d+x\d+\.\w+$'
"files = ""`find ""'""$dirs""'"" -type f |& grep -v '^find: '`""",find all the regular files in a folder which do not start with the word find and assign the output to a variable
"join -t, -o 1.2,2.2,2.3 -a 1 -a 2 -e 'no-match' - <(sort file1.txt)","merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from both files, replace missing fields with ""no-match"", and output the second field from standard input and the second and third field from file1.txt"
"find . -type f -name ""*.mp3"" -exec cp {} /tmp/MusicFiles \;",copy *.mp3 files to /tmp/musicfiles
comm -12  <(ls one) <(ls two),"print common files of directory ""one"" and ""two"""
su - jetty sh ./runprogram.sh,"run script  ""runprogram.sh"" as user jetty"
env -i perl -V,run perl -v (displays informations about perl's setup) in an empty environment.
"find / -iname ""*.mp3"" -type f -print0 | xargs -0 -I '{}' /usr/bin/rsync -avR ""{}"" /mnt/mp3/",search for all the regular/normal mp3 files in the file system and sync them to the folder /mnt/mp3
shopt -s extglob find !(D) -name hi.dat,search in the current directory and all sub-directories except ./d for the file hi.dat using the extending file-globbing features of the shell.
find / -type l -print | perl -nle '-e || print';,find links that point to nothing
find / -name \*.dbf -print0 2>/dev/null | xargs -0 -n1 dirname | sort | uniq,find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory paths
sudo tar xvf phantomjs-1.9.0-linux-x86_64.tar.bz2,"extract ""phantomjs-1.9.0-linux-x86_64.tar.bz2"""
"find /your/project -maxdepth 1 ! -name ""CONFIGFILE"" -exec ln -s \{\} ./ \;","create symbolic links in the current directory for all files excluding ""configfile"" located in ""/your/project"""
"FILES=$(find $FILES_PATH -type f -name ""*"")",find all regular files under $files_path directory tree and save the output to 'files' variable
find . -nouser,find all files in the current directory tree which do not belong to any user
"history | awk '{print $2}' | awk 'BEGIN {FS=""|""}{print $1}' | sort | uniq -c | sort -nr | head",print the top 10 commands with their use count
rsync -av /home/user1/ wobgalaxy02:/home/user1/,"synchronize ""/home/user1/"" to ""wobgalaxy02:/home/user1/"" including hidden files"
"ifconfig | grep -A2 ""venet0:0\|eth0"" | grep 'inet addr:' | sed -r 's/.*inet addr:([^ ]+).*/\1/' | head -1","gets ip address of first network interface which name matches pattern ""venet0:0\|eth0""."
cat /dev/input/mice | od -t x1 -w3,"read the raw input of ""/dev/input/mice"" as hexadecimal bytes with 3 bytes per line"
find /etc/. ! -name /etc/.,print the list of files and directories of the /etc directory
find /tmp -type f -perm -002 | sed '1s/^/Found world write permissions:\n/',find files with 002 permission under /tmp and print them with the string 'found world write permissions:' printed as the first line of output
"VAR=`dig axfr @dc1.localdomain.com localdomain.com | grep -i Lawler | awk '{ getline ; $1=substr($1,1,length($1)-1); print $1 ; exit }'`","greps dns zone transfer info on domain localdomain.com from ns @dc1.localdomain.com, finds strings with any-cased word 'lawler' and strips last letter from each string."
find . -type f -exec grep string {} \;,"search all regular files in the current directory tree for ""string"""
find /home/ -type f -newer /tmp/after -not -newer /tmp/before,search files in the folder /home which have been modified after /tmp/after and before /tmp/before
ls -1 | xargs readlink -f,list absolute path of files in the current directory
df -i,report file systems inode usage.
find /mnt/hda1/zdjecia/test1/ -type f -iname ‘*.jpg’ -printf ‘%’h’\'”0″ | xargs -0 -I ‘{}’ mkdir -p /mnt/hda1/test/{} \;,"search for all the jpg files in the folder ""/mnt/hda1/zdjecia/test1/"" and create a directory in /mnt/hda1/test with the same name as the mp3 file"
"cd $( ~/marker.sh go ""$@"" )","change directory to the output of command '~/marker.sh go ""$@""'"
find . -mtime +10 | xargs rm,remove all files last modified more than 10 days ago from the current directory tree
export MYPROGRAMNAME_KERNEL_VERSION=$(uname -r),"set variable myprogramname_kernel_version to current kernel release name, making this variable visible by subprocesses of current shell."
find -user eric -print,find all files/directories that are owned by user 'eric' under current directory tree
"find /home/luser -type f -name '*.mpg' | tr ""\n"" ""\000"" | xargs -0 rm -f",remove all .mpg files in the /home/luser directory tree
cd `dirname $TARGET_FILE`,change to location of '$target_file' file.
find A -type d -name 'D',"find all directories named ""d"" in the ""a"" directory tree"
"head -$N file | tail -1 | tr ',' '\n'","print the $n'th line from file by replacing commas (',') with newlines"
zcat $(cat list.txt) | ./a.out,"uncompress all files listed in ""list.txt"" and send to ""./a.out"""
"comm -12 <(echo $a|awk -F""\0"" '{for (i=1; i<=NF; i++) print $i}') <(echo $b|awk -F""\0"" '{for (i=1; i<=NF; i++) print $i}')|tr -d '\n'","print common characters in variable ""$a"" and ""$b"""
wc -l *.c,prints lines count in each *.c file of a current folder and total count.
cat $FILES | md5sum,"calculate the md5 sum of the contents of ""$files"""
mkdir -p `dirname /path/to/copy/file/to/is/very/deep/there` \,takes folder path from string '/path/to/copy/file/to/is/very/deep/there' and created it with all parents.
find . -name PERSONAL -prune -o -print,"display all the files in the current folder except those whose name is ""personal"""
find /path-to-directory -mtime +60 -exec rm -f {} \;,delete all files that were modified more than 60 days ago under '/path-to-directory' tree
zcat input.gz | grep -o 'userAgent=[^=]*' | sed 's/ [^ ]*$//',"unzip and extract ""useragent=[^=]*'"" from ""input.gz"""
find /home -perm /u=r,display all the files in the home folder which have read permission to the user
"paste <(paste -d"" "" f1 f2) f3","print each line in ""f1"" and ""f2"" separated by a space and ""f3"" separated by a tab"
"find /usr/share/data -regextype posix-extended -regex "".*/20140624.*"" -fprint /home/user/txt-files/data-as-of-20140624.txt","find all files/directories under '/usr/share/data' directory tree that match the posix extended regex "".*/20140624.*"" in their paths and save the list to '/home/user/txt-files/data-as-of-20140624.txt'"
find / -type f -size 0 -exec ls -l {} \;,display a long listing of all the empty files in the entire file system which are empty
"ifconfig eth0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'",gets mac address of 'eth0' network interface.
cd  /path/to/pdf,"change directory to ""/path/to/pdf"""
"find / -iname ""*.what_to_find"" -type f -exec mv {} /new_directory \;",find all regular files with '.what_to_find' extension in the entire filesystem and move them to directory '/new_directory'
"find . -type f -regex "".*\.\(py\|py\.server\)""",recursively look for files ending in either .py or .py.server
"find . -type f -print | xargs grep ""example""",search for 'example' in all regular files under current directory tree
"find /some/parrent/dir -type d | while read d ; do ls ""$d""/* &>/dev/null || rm -r ""$d""; done",delete all empty directories in the /some/parrent/dir directory tree
history | tail,print the last 10 commands in history
"find . -iregex "".*packet.*""","search the current directory tree for files whose names match regular expression '.*packet.*', ignoring the case"
ifconfig eth0 | grep inet | cut -d: -f2 | cut -d' ' -f1,gets ip address of 'eth0' network interface.
"date ""+%Y-%m-%d""","show current date in ""%y-%m-%d"" format"
echo `pwd`/`dirname $0`,"print the path composed of the current working directory and the directory containing ""$0"""
sed -f commandfile file,"filter the contents of 'file' through sed commands written in 'commandfile', displaying the result."
"yum -y groupinstall ""MYSQL Database Client""","installs package group ""mysql database client"", answering 'yes' on all questions."
find . -mtime -1 ! -name '.DS_Store' -type f -printf '%f\n',"search the current directory tree for regular files modified within the past 24 hours whose names do not end with "".ds_store"""
yes | tr \\n x | head -c $((1024*1024*1024)) | pv -L $((1024*1024)) | grep n,use up to a gigabyte of ram at a rate of 1mb per second showing the current and total rate
"find /home/spenx/src -name ""a1a2*txt"" | xargs -n 1 dirname | xargs -I list mv list /home/spenx/dst/",find all files/directories that start with 'a1a2' and end with 'txt' in their names and move their parent directories to '/home/spenx/dst/' directory
tail -n +1 file1.txt file2.txt file3.txt,"print ""file1.txt"" ""file2.txt"" and ""file3.txt"" with filename headers"
"find . -type f -printf ""%s\t%p\n"" | sort -n | tail -1",find largest file in linux with find command
find /var -size +10000k -print0 | xargs -0 ls -lSh,display a long listing of all the files in the /var folder which are bigger than 10mb. print0 is used to handle the files which have new lines in their names
"find ""$dir"" -not \( -path ""$dir/prune_me"" -prune \) -exec bash -c 'echo ""$0""' {} \;",list all files under $dir directory except path $dir/prune_me directory
"find /home/you -iname ""*.txt"" -mtime -60 | wc -l",display the count of total number of text files in the folder /home/you which have been modified in the last 60*24 hours
getent `uname -n`,query nss entries for current hostname.
"join -1 2 -2 1 -a1 <(cat -n file1.txt | sort -k2,2) <(sort file2.txt) | sort -k2 | cut --complement -d"" "" -f2","join data in file1 containing one number per line with data in file2 containing a number and other information per line, keeping the same order as it is found in file1."
find . -type f -print0 | xargs -0L1 wc -l,prints line count of each file within current directory.
"find . -type f -name ""*.html"" > html_files.txt",save the list of *.html files in the current directory tree to html_files.txt
"cat ""$file"" | sed -e 's/,,/, ,/g' | column -s, -t | less -#5 -N -S","replace "",,"" with "", ,"" in ""$file"" and display the "","" delimited result as a table in ""less"" with a shift value of 5 and line numbers"
rm -f A*.pdf,removes all files like 'a*.pdf' from current folder without prompting.
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 file -In | grep -v binary | cut -d "":"" -f1 | xargs -0 sed -i '' -E ""s/[[:space:]]*$//""","remove trailing white spaces from all files under current directory ignoring .git, .svn directories and binary files"
"find /tmp /var/tmp -iname ""testfile.txt""","search directory trees /tmp and /var/tmp for ""testfile.txt"""
find . -type f -iname '*.CR2' -print0 | xargs -0 -n 1 -P 8 -I {},find all raw images in the current folder and pass them one at a time to the xargs command and enable parallel processing of the files
find /u/netinst -print | xargs chgrp staff,change the group of all the files in the folder /u/netinst/ to staff
tac a.txt > b.txt,reverses order of lines in a.txt and saves them to b.txt
"find . \( -name ""*.py"" -o -name ""*.py.server"" \)",recursively look for files ending in either .py or .py.server
find . -maxdepth 1 -type f -print0,print a list of all regular files residing in the current directory
find .vim/ -maxdepth 1 -type d,display all directories in vim folder do not search in sub directories
printf 'foobar\n\377' | tr -d '\0-\176' | od -t c,"delete everything except the control characters in ""foobar\n\337"" and dump the remaining characters"
find /home/username/tmp -type d -exec chmod 770 {} +,find all directories under /home/username/tmp and set their permission to 770
"find . -name ""*.java"" -exec sed -i '' s/foo/bar/g \;",find *.java files in the current directory and replace foo with bar in those files
find /path/to/search -type l -exec test ! -e {} \; -print,find all broken symlinks including cyclic links under /path/to/search directory
"find ./work/ -type f -name ""*.pdf"" -mtime +5 -size +2M  | xargs -r cp -t ./backup/",copy all .pdf files in the ./work/ directory tree with size bigger then 2 mb and modified more than 5 days ago to the ./backup/ directory
find ${WP_ROOT}/wp-content -exec chgrp ${WS_GROUP} {} \;,recursively changes group ownership on every file in the ${wp_root}/wp-content directory to ${ws_group} group.
find . -size +10k -exec ls -lS {} \+ | head -1,search for all the file sin the current folder which are bigger than 10kb and display them smallest file
"NAME=`basename ""$FILE""`","take the last slash-separated section of variable ""file"" and copy it to variable ""name""."
"find . -name * | xargs grep -iH ""string""",search for 'string' case insensitively in all files under current directory tree and show the matched lines with their filenames
find -daystart -mtime +7,find all the files that are not modified in the last 7 days
"sed ""s/,/\t/g"" filename.csv | less",replace all commas with tab characters in 'filename.csv' and page interactively through the result.
find -maxdepth 2 -type d -ls >dirlist,"save the list of all subdirectories of the current directory up to depth level 2 as ""dirlist"""
"find . -type f -name ""*.sh"" -exec grep -l landoflinux {} \;",search for a word in all the shell scripts in the current folder and display the matched files.
"find . -name ""*.sh"" -exec rm -rf '{}' \",find all .sh files in the current directory tree and remove them
"find /home/mine -iname ""*.png"" -execdir cp {} /home/mine/pngcoppies/copy{} \;",copy all files with '.png' (case insensitive) extension under '/home/mine' directory tree to '/home/mine/pngcoppies/copy.' directory
find / -group managers -print,search the system for files and directories owned by group `managers'
find ~ -name 'Foto*',"print the list of files in the home directory tree whose names begin with ""foto"""
history | head -n 120 | tail -n 5,view lines 116 through 120 of history
split -n 10000 /usr/bin/cat,"split ""/usr/bin/cat"" into 10000 files of about equal size"
rsync -av --progress --exclude=*.VOB --exclude=*.avi --exclude=*.mkv --exclude=*.ts --exclude=*.mpg --exclude=*.iso --exclude=*ar --exclude=*.vob --exclude=*.BUP --exclude=*.cdi --exclude=*.ISO --exclude=*.shn --exclude=*.MPG --exclude=*.AVI --exclude=*.DAT --exclude=*.img --exclude=*.nrg --exclude=*.cdr --exclude=*.bin --exclude=*.MOV --exclude=*.goutputs* --exclude=*.flv --exclude=*.mov --exclude=*.m2ts --exclude=*.cdg --exclude=*.IFO --exclude=*.asf --exclude=*.ite /media/2TB\ Data/data/music/* /media/wd/network_sync/music/,"archive showing progress all files in ""/media/2tb\ data/data/music/"" to ""/media/wd/network_sync/music/"" excluding files matching ""*.vob"", ""*.avi"", ""*.mkv"", ""*.ts"", ""*.mpg"", ""*.iso"", ""*ar"", ""*.vob"", ""*.bup"", ""*.cdi"", ""*.iso"", ""*.shn"", ""*.mpg"", ""*.avi"", ""*.dat"", ""*.img"", ""*.nrg"", ""*.cdr"", ""*.bin"", ""*.mov"", ""*.goutputs*"", ""*.flv"", ""*.mov"", ""*.m2ts"", ""*.cdg"", ""*.ifo"", ""*.asf"", and ""*.ite"""
"find /home/wsuNID/ -name ""*.txt""",find all *.txt files that reside under and below /home/wsunid/
find folder_name -type f -exec grep your_text  {} \;,"search the regular files from directory tree 'folder_name' for ""your_text"""
find . -mmin 60 -print0 | xargs -0r ls -l,list all files in the current directory tree that were modified 60 minutes ago
"find /directory/containing/files -type f -name ""*.txt"" -exec grep -H 'pattern_to_search' {} +","search *.txt files under and below /directory/containing/files for ""pattern_to_search"""
find /stuff/* -type d -maxdepth 1 -print0 | xargs -0 script.py,search for all the directories in a folder and limit the search to current folder and give them as input to the python script
find . -size +10M,find all files/directories under current directory that are greater than 10mb in size
shopt dotglob,shows status of a shell option 'dotglob'.
chmod --reference version2/somefile version1/somefile,"copy permissions from ""version2/somefile"" to ""version1/somefile"""
"echo ""The quick brown fox jumps over the lazy dog"" | grep -o . | sort | uniq -c | sort -nr","list the number of occurrences of each unique character in ""the quick brown fox jumps over the lazy dog"" sorted from most frequent to least frequent"
read -p $'Enter your age:\n',"read a line from standard input with prompt ""enter your age:\n"""
"find /dir/to/search/ -type d -iname "".*"" -ls","display list of all the hidden directories in the directory ""/dir/to/search/"""
cat ips | xargs -i% ping -c 2 %,"ping all hosts in file ""ips"" twice"
find /home/www/ -type f|xargs perl -pi -e 's/subdomainA\.example\.com/subdomainB.example.com/g',"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under /home/www and below"
read -rep $'Please Enter a Message:\n' message,"read a line from an interactive shell's standard input into variable ""message"" without backslash escapes and prompt $'please enter a message:\n'"
head -n1 $bigfile,prints first line of $bigfile
"find . -iname ""*.mov"" -exec ffmpeg -i ""%p"" -f flv ""%f"" \;",find all *.mov (case insensitive) files under current directory and run an ffmpeg command with the literal '%p' and '%f' as the path and name respectively for each file
set -o pipefail,set the 'pipefail' shell variable causing bash to return true only if all commands in a pipeline return true.
join file1 file2 | column -t,"join columns in ""file1"" and ""file2"" if their first field matches and format the output as a table"
find . -type f -exec grep some_string {} \;,search for a word in all the fies in the current folder
find . -name '*.php' -type f | xargs cat | wc -l,"count the number of lines in all "".php"" files in the current directory tree"
"cp -f ""$project_dir""/iTunesArtwork Payload/iTunesArtwork","copies """"$project_dir""/itunesartwork"", to the 'payload/itunesartwork', rewriting files if necessary."
find . -path ./proc -prune -or -path ./sys -prune -or -path ./run -prune  -or -iname '*start*' -print,"search for the files which contain the word start in their name excluding search in ./proc, ./sys, ./run folders"
find .  -path '*/*config',"find files ending in ""config"""
find . -type f -daystart -mtime $date_dif -exec copy_it.sh $verbose -s {} -t $to_dir \;,find all the files that have been modified on a specific day and copy them to another directory
"awk '{if (NR!=1) {print}}' $in_file | split -d -a 5 -l 100000 - $in_file""_""","split ""$in_file"" excluding the first line into files of at most 100000 lines each with numeric suffixes of length 5 and the prefix $in_file""_"""
paste -sd+ infile | bc,"mathematically sum each line in ""infile"""
"mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}","create intermediate directories as required and directory project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a}"
"find /home/pat -iname ""*.conf"" | less",show all of the .conf files in pat's user folder and subdirectories using the less pager
"find . -regex ""xxx-xxx_[a-zA-Z]+_[0-9]+_[0-9]+\.jpg$"" -exec ./rename.sh ""{}"" "";""","apply script rename.sh to all files from the current directory tree whose names match regular expression ""xxx-xxx_[a-za-z]+_[0-9]+_[0-9]+\.jpg$"""
ls -d */ | xargs -iA cp file.txt A,copies file 'file.txt' to each top-level directory in the current directory.
find . -type f -a -name '*.*',find all *.* files under current directory
find . -name __temp__* -exec rm -rf '{}' \;,delete all __temp__* files/directories under current directory tree
find /u/netinst -print | xargs chmod 500,update the permission of all the files in the folder /u/netinst to 500
"ABSOLUTE_PATH=""$(cd ""$(dirname ""${BASH_SOURCE[0]}"")"" && pwd)/$(basename ""${BASH_SOURCE[0]}"")""",store absolute path of executing script
ssh user@host -X,open a ssh connection to user@host with x11 forwarding to run gui programs
"find . -name ""*.rb""",find all *.rb files/directories under current directory
find -user takuya -name '*.php' -daystart -mtime -1,find all php files that belong to user 'takuya' and have been modified in the last 1 day
find ~/lpi103-2/ -depth -print0 | cpio --null -o > ../lpicpio.2,find all files in a  directory with default depth size and compress them to lpicpio.2 file
"find -name ""*.txt"" 2>>/dev/null",display all the text files in the current folder and discard all the errors.
find -mmin +15 -mmin -25,find all the files in the current folder which have been modified in the 10 minutes ago
cat set1 set2 | sort -u,print only unique lines in files 'set1' and 'set2'
"find ""$DIR"" -type f -mtime +15 -exec rm {} \;",find all the regular files in $dir directory tree which have not been modified in the last 15 days and delete them
"alias -g vv=""$(date)""","set alias ""vv"" for command ""$(date)"""
find / -mtime -1 -print,find all the files in the root folder which have been modified in the last 24 hours and print them
"find /home -type f -exec du -s {} \; | sort -r -k1,1n | head",find the ten biggest files
tar -xOf TarFile FileB.gz | zless,views text content of compressed fileb file in tarfile archive.
"find . -type f \( -name ""*.class"" -o -name ""*.sh"" \)",find all class files or sh script files  in the current folder
"find ./work -print | xargs grep ""profit""","find all files in the `work' directory tree, pass them to grep and search for ""profit"""
"find MyApp.app -name Headers -type d -exec rm -rf ""{}"" \; || true",search directory tree `myapp.app' for directories whose name is 'headers' and delete them
"find . -name ""*.c""","display all the ""c"" files in the current folder"
"find . -type d | sed -e 's/\.\///g' -e 's/\./avoid/g' | grep -v avoid | awk '{print $1""\t""$1}' | xargs chgrp",change the group of all directories (except those with a '.') under current directory tree to a group with the same name as the directory name
ssh -XY -t user@remote_IP 'ssh -XY -t user@remoteToRemote_IP',"ssh with trusted x11 forwarding into ""user@remotetoremote_ip"" from ssh connection ""user@remote_ip"""
"bash -c ""test -h /proc/4129/ns/pid && test '$(readlink /proc/4129/ns/pid)' != '$(readlink /proc/1/ns/pid)'""",set status code to a non-zero value if process with pid 4129 is running in a different namespace than init
who -la,print information about all users who are logged in
find --help,print a summary of the command-line usage of find
source $(ruby genrc.rb),"execute the ruby script ""genrc.rb"" which will output a filename, and interpret this file in the current shell."
alias mkcd='_(){ mkdir -pv $1; cd $1; }; _',"set alias ""mkcd"" for command ""_(){ mkdir -pv $1; cd $1; }; _"""
find -name teste.tex,search the current directory tree for file `teste.tex'
mount -t cpuset none /cpuset/,"mount ""cpuset"" filesystem on ""/cpuset/"""
"find  / -name ""[a-j]*"" -print",look for files whose names begin with letters a-j
find backup/ -type d -print0 | xargs -0 tar cf directory-structure.tar --no-recursion,archive the directory structure under backup directory into directory-structure.tar
yum search zsh,searches available packages by word 'zsh'.
read -u 4 line,read line from file descriptor 4 and store received input in 'line' variable
"yes | head -n 100 | awk '{printf( ""%03d "", NR )}'   ##for 001...100","print a single line of numbers from ""001"" to ""100"""
ln -sf $keyname     id_rsa,"force create a symbolic link named ""id_rsa"" to ""$keyname"""
find /usr/local/doc -name '*.texi',find all *.texi files in /usr/local/doc
zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz',"unzip ""doc.gz"" and gzip every 1000 lines"
find . -name *.xml -exec diff {} /destination/dir/2/{} \;,"compare each .xml file under the current directory with a file of the same name in ""/destination/dir/2"""
"screen -X title ""new title""",set a screen session title when invoked
mv blah1 blah1-new,"rename ""blah1"" to ""blah1-new"""
"find ../../$name-module -name 'Name*' -type f -exec bash -c 'mv ""$1"" ""${1/Name/$Name}""' -- {} \;",find all name* files under ../../$name-module and rename them by replacing 'name' with $name (will be expanded in the sub-shell) in their names
locate labra | xargs -I{} scp '{}' masi@11.11.11.11:~/Desktop/,"find all files on local host whose name contains ""labra"" and copy them to remote  host 11.11.11.11 connecting as ssh user ""masi"" and copying the files to the desktop directory this user's home directory - this will not work with file/path names containing spaces."
find ~ -group vboxusers -exec chown kent:kent {} \;,"change all files in ""~"" which are owned by the group ""vboxusers"" to be owned by the user group ""kent"""
rm -d symlink,removes empty folder 'symlink'.
someCommand 2>&1 | tee someFile,"write the standard output and error of ""somecommand"" to the console and ""somefile"""
find dirname  -print0 | xargs -0 grep foo,"search the files from directory tree ""dirname"" for string ""foo"""
find /var/tmp/stuff -mtime +90 -exec /bin/rm {} \;,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
tempfile=$(mktemp $(pwd)/templateXXXXXX),"creates temporary file in a current folder with name formatted like 'templatexxxxxx', and saves path to it in 'tempfile' variable."
find $HOME -iname '*.ogg' -size +100M,find all *.ogg (case insensitive) files/directories under your home directory that are greater than 100mb in size
find /tmp  | head,find all the files under /tmp directory and show a few lines of output from the beginning
chown root:root script.sh,"change owner and group of ""script.sh"" to ""root"""
find . -group staff -perm -2000 -print,find all files that are set group id to staff
find . -iname *.page -exec ~/t.sh {} \; | sort,"find all *.page (case insensitive) files/directories under current directory and run ~/t.sh for each of them with the file path as argument, then sort the output"
clear,clears the terminal screen.
find ./bin -name “cp”,"search the ./bin directory recursively for files called ""cp"""
"find -printf ""%y %i %prn""","print every file's type, name, and inode"
seq -f 'some line %g' 500 | nl | sort -R | cut -f2- | head -3,"print three lines of ""some line "" followed by a random number"
history | less,"view history using ""less"""
source ~/.profile,reread user's .profile configuration file.
ldd $(which YOURAPPNAME),"print shared object dependencies of command ""yourappname"""
find /path/to/dir -type f -exec chmod 644 {} +,find all files under /path/to/dir and change their permission to 644
"find /directory/containing/files -type f -print0 | xargs -0 grep ""test to search""",search for a word in all files in a directory
find backup/ -type d | xargs tar cf directory-structure.tar --no-recursion,archive the directory structure under backup directory into directory-structure.tar
"find . -name ""*failed.ipynb"" | cpio -pd ./fails","copy all files matching ""*failed.ipynb"" in the current directory tree to ""./fails"" preserving the directory hierarchy"
"top -p ""$(pgrep -d ',' java)""",monitor all processes whose command includes 'java'.
sudo env |grep USER,list all environment variables containing 'user' in their name or value that would result in running a command with 'sudo env'.
"host $(uname -n) | grep ""address"" | grep -v ""IPv6"" | head -n 1 | awk '{print $4}'",get current hosts's ipv4 address.
find . -type f -exec chown username {} \;,change the ownership of all regular/normal files in the current directory
find /path/to/dir -newermt yyyy-mm-dd ! -newermt yyyy-mm-dd -ls,find all files in the folder /path/to/dir which have been modified between two dates
"ssh -M -f -N -o ControlPath=""$SSHSOCKET"" ""$USER_AT_HOST""","connect to host ""$user_at_host"" in master mode in the background without executing any commands and set the controlpath to ""$sshsocket"""
"find . -name ""*.js""",display all the java script files in the current folder
find . -group root -print | xargs chgrp temp,change the group to `temp' for all files in the current directory tree that belong to group `root'
find . -type f -name tecmint.php,find all php files whose name is tecmint.php in a current working directory
find . -print -exec touch {} \;,update timestamps of all files (not directories) under current directory. also works on older unix systems with obsolete 'find' command.
find . -group X_GNAME -exec chgrp Y_GNAME {} +,recursively changes group ownership of everything within a current folder and having group 'x_gname' to 'y_gname'.
myprogram|more,"run ""myprogram"", pausing for user input at each page."
find .  -size 10 print,search  in current directory downwards all files whose size is 10 blocks .
"find . -name "".git"" -type d | sed 's/\/.git//' |  xargs -P10 -I{} git -C {} pull",run 'git pull' in every git repository in the current directory
"zcat -r /some/dir/here | grep ""blah""","recursively unzip files to stdout in ""/some/dir/here"" and search for ""blah"""
find /etc -atime -1,search the /etc directory tree for files accessed within the last 24 hours
"cd ""/cygdrive/c/Program Files (x86)""",go to directory /cygdrive/c/program files (x86) using quotes to escape special characters
find / -size 0 -print,display all the empty files in the entire file system
alias go='GOPATH=$(infer-gopath.sh) go',"set alias ""go"" for command 'gopath=$(infer-gopath.sh) go'"
find . -inum 211028 -exec mv {} newname.dir \;,find all files which have 211028 inode number in current directory then locating and renaming unprintable directories
brew unlink bash-completion,removes symlinks for formula bash-completion from the homebrew prefix.
"mv server.log logs/$(date -d ""today"" +""%Y%m%d%H%M"").log","move server.log to 'logs' directory with new name as the current date formatted as ""%y%m%d%h%m"" and with '.log' extension"
"find  / -name ""apt"" -ls",getting a detailed list of files/dirs
find root -mindepth 2 -type d -empty,find all empty directories in minimum 2 levels down the root directory
"ifconfig `ip route | grep default | head -1 | sed 's/\(.*dev \)\([a-z0-9]*\)\(.*\)/\2/g'` | grep -oE ""\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"" | head -1",gets ip address of only primary network interface.
grep --help |grep recursive,finds recursion-related options of a 'grep' utility.
ln -s git-stuff/home/.[!.]* .,"create a symbolic link in the current directory for each hidden file or directory in ""git-stuff/home/"" excluding ""."" and "".."""
find test1 -type f -print,"search the ""test1"" directory recursively for regular files"
mv svnlog.py svnlog,"rename ""svnlog.py"" to ""svnlog"""
"find /volume1/photo/ipcam -maxdepth 1 -type d -name ""????-??-??"" -mtime +0 -exec sh -c 'echo /home/pi/Dropbox-Uploader/dropbox_uploader.sh move /ipcam/$(basename {}) /ipcam/archive' \;","find all directories with the name like ""????-??-??"" and which have not been modified in the last 24 hours in the folder /volume1/photo/ipcam and send them as input to the script in the exec section"
find . -name '*.php' -type f -exec cat -- {} + | wc -l,prints total count of lines of all *.php files in a current folder and subfolders.
"find -type d -print0 | sed -e ""y/\d0/:/;s/:$//;""",find all directories under current directory and replace all null delimiters with : in the output then remove the last :
find . -type f -newermt ‘Apr 18 23:59:59 EDT 2013’ ! -newermt ‘Apr 20 00:00:00 EDT 2013’ -exec ls -l ‘{}’ \;,display a long listing of all the regular files under current directory tree that are newer than ‘apr 18 23:59:59 edt 2013’ and older than ‘apr 20 00:00:00 edt 2013’ by modification time
find / -nouser -exec rm {} +,remove files from the file system that are owned by nobody
"for f in *; do [[ -f ""$f"" ]] && mv ""$f"" ""unix_$f""; done","prefix all files in the current directory with ""unix_"""
df --total -BT | tail -n 1 | sed -E 's/total *([^ ]*).*/\1/',report only total size of file systems in 1t blocks.
find  /path/to/directory/* -maxdepth 0 -type d -exec basename {} \;,print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*
chown -R nobody upload_directory,"recursively change the owner of all files in ""upload_directory"" to ""nobody"""
find . | grep -E -v '\.png$|\.class$' | vim -,"make a list of all files in the current directory tree, except *.png and *.class, and view it in the vim editor"
"find . -type f -name ""*.$extension""",search the current directory recursively for regular files with the extension given as variable $extension
find . -empty -maxdepth 1 -exec rm {} \;,find all empty files in the current directory and delete them
mount /path/to/device /path/to/mount/location -o loop,"mount ""/path/to/device"" on ""/path/to/mount/location"" as a loop back device"
find demo -depth -name .git -prune -o -print0 | cpio -0pdv --quiet demo_bkp,"recursively copy all files and directories in ""demo"" excluding "".git"" to ""demo_bkp"""
find PATH_TO_FOLDER -maxdepth 1 -type f -exec bzip2 -zk {} \;,compresses all files in the directory 'path_to_folder' without recursion and keeps uncompressed files from deletion.
"find ""$somedir"" -maxdepth 0 -empty -exec echo {} is empty. \;",check if the $somedir directory is empty
find . -name '*.ISOLATE.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./ISOLATE,find the files in the current directory that match pattern '*.isolate.*.txt' and move them to folder ./isolate
"find /home/archive -type f -name ""*.csv""  -mtime -2 -exec gzip -9f {} \;",find all  *.csv files which  modify within last 2 days in /home directory then zip ( archive )-
find / -name 'top*',find all the files in the entire file system that start with top
"find . -type f \( -name ""*cache"" -o -name ""*xml"" -o -name ""*html"" \)",find all regular files under current directory tree whose names end with 'cache' or 'xml' or 'html'
find . -type f -exec chmod 0644 {} \;,change the permission to 0644 for all files under current directory
"find ~/$folder -name ""*@*"" -type f","find all regular files whose names contain ""@"" in directory tree ~/$folder"
find -maxdepth 1 -type f -printf '%f\000',"find regular files in the current directory, without descending into sub-directories and display as a null separated list."
find ./ -name '*.log' -print0 | xargs -0 rm,remove all *.log files from the current directory tree
find index.html | xargs -rt sed -i 's/<script>if(window.*<\/script>//g',delete the text matched by the regex '<script>if(window.*<\/script>' in all index.html files under current directory
find . -nogroup,display all the files in the current folder which do not belong to any group
find /path -perm -go+w,find all files under /path and below writable by `group' and `other'
find / -name 'top?????*',find all the files in the entire file system starting with the word top
"ln -s  ""${TARGET}${file}""  ""${DESTINATION}${file}""","create a symbolic link named ""${destination}${file}"" to ""${target}${file}"""
find `pwd` -maxdepth 1,prints absolute file paths for files in current directory
find . -atime -15,display all the files in current folder which have been accessed in the last 15 days
find /home -mtime -7,find all files in the /home/ directory tree that were last modified less than 7 days ago
find / -type d -perm 777 -print -exec chmod 755 {} \;,find all 777 permission directories and use chmod command to set permissions to 755
"totalLineCnt=$(cat ""$file"" | grep ""$filter"" | grep -v ""$nfilter"" | wc -l | grep -o '^[0-9]\+');",save count of lines from file $file matching with pattern $filter and not matching with pattern $nfilter in variable 'totallinecnt'
find . 2>/dev/null > files_and_folders,display all files in current directory discard any errors and save the output to a file
"find -not -name ""*testfileasdf*""","locate all files in the current directory and below that do not have ""testfileasdf"" in their names"
"find . -type f -ctime -$2 -name ""mylog*.log"" | xargs bzip2","finds all files like ""mylog*.log"" newer than $2 and archives them with bzip2."
"find . -type f ! -name ""*1"" ! -name ""*2"" -print","search the current directory tree for files whose names do not end in ""1"" and ""2"""
find . -mtime 0,find files modified within the past 24 hours
"ls | sed '$!s/$/,/' | tr -d '\n'","lists all files in a current folder, separating names with comma."
cd /var/cron/tabs && grep -vH ^# *,"filters out strings beginning with '#' from all files in current folder, and prints file name before each line."
du -sh *,display summary of each specified file in human readable form
"find . -name ""*.java"" -print0 | xargs -0 -J % cp % destinationFolder",copy all java files from current folder to another folder
printf ... | fold -w 80,"format the output of ""printf ..."" to fit in 80 characters per line"
bg %  so it wont die when you logoff,places current job to background.
"find  . -type f -name ""*.txt"" -exec mv {} `basename {} .html` .html \;",find all .txt files in current  directory and rename with  .html .
tree .,recursively print all files and directories in the current directory tree
"find /tmp -name ""*.tmp"" -print0 | xargs -0 rm",remove all *.tmp files from the /tmp directory tree
history -w,update the history file in the current session
sort ips.txt | uniq -c | sort -bgr,"print a count of all unique entries in ""ips.txt"" with the most frequent results at the top"
find . -maxdepth 0 -print,display all the files in the current directory and do not search in the sub directories
ls | xargs -n 1 cp -i file.dat,copies file 'file.dat' to each top-level directory in the current directory.
tail -n +2 foo.txt,"print the contents of ""foo.txt"" starting with line 2"
split -l 20 $FILENAME xyz,"split ""$filename"" into files with at most 20 lines each with a prefix ""xyz"""
find . -type f -printf '%k %p\n' |sort -n |tail -n 20,print the largest 20 files under current directory
cp /dev/null emptyfile.c,"create an empty file called ""emptyfile.c"""
find -version,show version information of the find utility
"find / -type f -printf ""\n%AD %AT %p"" | head -n 11 | sort -k1.8n -k1.1nr -k1",sort and display top 11 files along with the last access date for all the files in the file system ( sort based on the timestamp )
"find / -type f -name ""*.conf""",search for all *.conf files in entire file system
kill -0 1,check if process id 1 exists (init or systemd) and current user has permission to send it signals.
"read -e -p ""Enter the path to the file: "" -i ""/usr/local/etc/"" FILEPATH","read a line of standard input with prompt ""enter the path to the file: "" and suggestion ""/usr/local/etc/"" and save the response to variable ""filepath"""
find | sort,find all files/directories under current directory and sort them
"yes ""$OPTARG"" | head -$opt","print variable ""$optarg"" ""$opt"" times"
find . -cmin -60,find files in the current directory tree whose status was changed within the last 60 minutes
find -mindepth 0 -maxdepth 0,print the current directory
rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1,"remove the files or directories 'bin/node', 'bin/node-waf', 'include/node', 'lib/node', 'lib/pkgconfig/nodejs.pc' and 'share/man/man1/node.1'"
find . type -f -ctime 2,search the current directory recursively for regular files last changed 2 days ago
mv -nv caniwrite /usr/local/bin,"move ""caniwrite"" without clobbering into ""/usr/local/bin"""
find /etc/apache-perl -newer /etc/apache-perl/httpd.conf,find files under /etc/apache-perl that are modified more recently than /etc/apache-perl/httpd.conf
tar -czf backup.tar.gz --exclude=PATTERN1 --exclude=PATTERN2 ... /path/to/backup,create a compressed archive excluding files matching a pattern
"watch ""tail file | grep pattern""","execute ""tail file | grep pattern"" every 2 seconds"
file $(which foo),"print file type of the executable file of command ""foo"""
find . \( -size 100 -o -size -100 \)  -name '*.html' -exec  ls -l {} \;  2> /dev/null,list html files starting from the home directory that are 50k at the most
find -maxdepth 3,find all files/directories under current directory in maximum 3 levels deep
"find . -type f -name ""*.txt"" -exec sh -c 'for i;do sed 's/[[:space:]]*$//' ""$i"">/tmp/.$$ && mv /tmp/.$$ ""$i"";done' arg0 {} +",remove trailing whitespaces in .txt files from the current directory tree
"find . -type f -exec stat -c ""%s %N"" {} \;","find all files and directories under the current directory and display the blocksize and the quoted filename, using the stat command"
ln -sF /usr/share/my-editor/my-editor-executable   /usr/bin/my-editor,"create a symbolic link named ""/usr/bin/my-editor"" to ""/usr/share/my-editor/my-editor-executable"" and attemp to hard link directories"
mkdir ~/public_html,"make directory ""~/public_html"""
find /usr/ports/ -name Makefile\* -exec grep `printf '\15'` -l '{}' '+' | wc -l,find all files whose names begin with 'makefile' in the /usr/ports directory tree and count the number of lines in them containing ^m
"git ls-files | grep -vE ""(png|jpg|ico)"" | xargs wc -l",counts the number of lines in each file but png|jpg|ico files in a git repository.
find . \( -name bbb -o -name yyy \) -prune -o -type f -print,"display all the regular/normal files in the current folder excluding the files ""bbb"" and ""yyy"""
find . -name *.py -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }',count the toal number of lines in all .py files in current directory tree
nohup php -f 'yourscript'.php,"run the php script 'yourscript.php', making it immune to sighup signals."
find . \( -name 'secret' -a -prune \) -o -print,"display all the files in the current folder excluding those that are present in the folder ""secret"""
"find . \( \( -name .svn -o -name pdv \) -type d -prune \) -o \( -name '*.[pwi]' -type f -exec grep -i -l ""search for me"" {} + \)","search for the case insensitive pattern 'search for me' in all files with '.p', '.w' and '.i' extension under current directory tree without descending into '.svn' and 'pdv' directories"
find -name '*.jpg,find all .jpg files in the current directory and below
"find ~/container -mindepth 3 -type f -execdir mv ""{}"" ./.. \;",find all regular files starting from level 3 of directory tree ~/container and move them one level up
"date --date=""222 days ago"" +""%d""",prints what day it was 222 days ago
"find . -name ""*.py"" -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }'",prints total count of lines of all *.py files in a current folder and subfolders.
pstree -apl,prints process tree with command line arguments and process id numbers.
"find ../../$name-module -print0 -name 'Name*' -type f | xargs -0 rename ""s/Name/$Name/""",find all name* files under ../../$name-module and rename them by replacing 'name' with $name (will be expanded in the current shell) in their names
find . -name test -exec rm {} \;,"remove all files and directories called ""test"" from the current directory tree"
find ./ | wc -l,find all files and directories and count them
od -An -N2 -i /dev/random,"print a 2 byte decimal integer from ""/dev/random"""
find . -name \*.plist,find all *.plist files/directories under current directory
find . -name photo\?.jpg,find all files/directories named 'photo?.jpg' under current directory tree
du -a $directory | awk '{print $2}' | grep '\.in$',find all files/directories with '.in' extension in the directory $directory and its subdirectories
find -iname 'somename',"search the current directory tree for files named ""somename"", case insensitive"
"find . -type f -ls 2>/dev/null | sort -M -k8,10 | head -n5",recursively finds last 5 modified files in a directory
"git ls-files | grep -P "".*(hpp|cpp)"" | xargs wc -l",counts the number of lines in each *.hpp or *.cpp file in a git repository.
"find / -user edwarda -exec chown earnestc ""{}"" \;",change the ownership of all the files in the file system from edwarda to earnestc
find . -name core -ctime +4 -exec /bin/rm -f {} \;,"remove all ""core"" files that were last changed more than 4 days ago from the current directory tree"
find ~ -size +10M,find files/directories greater than 10mb in your home directory
ssh -i id_rsa host,"login to ""host"" using identity file ""id_rsa"""
"find /tmp -regex "".*file[0-9]+$""","search the /tmp/ directory recursively for files matching regular expression "".*file[0-9]+$"""
find . -perm +600 -print,find all files that are readable or writable by their owner
find . -type f -name “FILE-TO-FIND” -delete;,find all the backup files in the current folder and delete them
"find . \( -name ""*.txt"" -o -name ""*.pdf"" \)",display all the text files and pdf files in the current folder
sudo mount device_name mount_point,"mount ""device_name"" on ""mount_point"""
find /prog -type f -size +1000 -print -name core -exec rm {} \;,"list and remove all regular files named ""core"" that are larger than 500kb"
sudo chmod 777 .git/hooks/prepare-commit-msg,"change permissions of "".git/hooks/prepare-commit-msg"" to 777"
"find $PWD | sed 's/^/""/g' | sed 's/$/""/g' | tr '\n' '",find all the files in the current folder and display adding quotations to each file and replace spaces with new line
set | grep ^IFS=,finds string beginning with 'ifs' in a 'set' output.
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip -v {} \; 2>&1 | awk '{print $6}'","compress and display the gzipped filenames of every file on the system that is greater than 100000 bytes and ends in "".log"""
"echo ""$data"" | cut -f2 -d$'\n'",get second line from text contained in variable $data.
tmpfile=$(mktemp),creates temporary file and saves path to it in a 'tmpfile' variable.
find . -type f -exec grep -iH '/bin/ksh' {} \;,find files under current directory that contains the string '/bin/ksh'
find /home/dm/Video -mtime -7,find all files residing in /home/dm/video or below that were changed less than 7 days ago
"su --login postgres --command ""createdb $DBNAME""","run command ""createdb $dbname"" as user postgres"
chgrp --recursive website public_html,recursively changes group ownership on everything in the 'public_html' folder to 'website' group.
exec > >(tee -a $HOME/logfile) 2>&1,"redirect the current process's standard error to standard out and write to console and append to ""$home/logfile"""
"ssh -o StrictHostKeyChecking=no -l username hostname ""pwd; ls""","connect to host ""hostname"" as user ""username"", automatically add the host key to the list of known hosts, and execute ""pwd; ls"" non-interactively"
date -ud@0,show the epoch in default date/time format
pstree | grep php,finds all php processes running in system.
"cat /etc/passwd | sed 's/^\([^:]*\):.*$/crontab -u \1 -l 2>\&1/' | grep -v ""no crontab for"" | sh",list all crons in the environment
find . -type d -empty,find all empty directories under current directory
yes | execute_command,"pass ""y"" to all the prompts for the command ""execute_command"""
split --help,"print the help message of command ""split"""
find /var/www -name *.gif -ctime +90 -ctime -180,find .gif files in /var/www and below that were last changed between 90 and 180 days ago
find $1 -name '* *',find all files/directories with space in their names under $1 directory
find . -type f | xargs | wc -c,count the number of characters in the list of regular files from the current directory tree
seq -s' ' $start $end,"print space separated list of numbers from ""$start"" to ""$end"""
find . -name new -print -exec cat {} \;,find all files named 'new' under current directory tree and display their contents
"find . -name ""filename including space"" -print0 | xargs -0 -I '{}' sh -c 'ls -aldF {} >> log.txt; rm -rdf {}'",find all the files in current folder which have spaces and save the long listing of these files to log file before deleting them
find / /usr -xdev -name document -print,find files/directories named 'document' in the entire filesystem and in the directory tree '/usr' even if it's in a different partition without traversing to other devices/partitions
alias ff=find . -name $1,"set alias ""ff"" for command ""find . -name $1"""
alias prettyjson='python -m json.tool',"set alias ""prettyjson"" for command 'python -m json.tool'"
chgrp -R my_group files,recursively changes group ownership of everything in 'files' to 'my_group'.
"sudo ln -s -f ""/usr/local/bin/findpdftext"" ""/usr/local/bin/fpt""","force create a symbolc link named ""/usr/local/bin/fpt"" to ""/usr/local/bin/findpdftext"""
"echo -ne ""Welcome $(whoami)!\n""",print a welcome message with the current user's user name
find . -exec grep -l foo {} +,"search the files from the current directory tree for ""foo"""
"find -name ""* *"" -type d | rename 's/ /_/g'",find all directories with space in their names under current directory and rename them by replacing all spaces with _
"find . -print0 | xargs -0 -l -i echo ""{}"";",list all files in the current directory tree including those that may contain spaces in their names
ps aux | less -S,"interactively page through a list of all processes running on the system - the arrow keys pan around, and the q key quits."
"find ""$DIR_TO_CLEAN"" -type f -mtime +$DAYS_TO_SAVE -print0 | awk -v RS='\0' -v ORS='\0' '{ print } END { print NR }' | xargs -0 rm",delete and count files in $dir_to_clean that are older than $days_to_save days
pwd | cut -f 1- -d\/ --output-delimiter=$'\n',list each subdirectory name composing the current working directory
tree -fi |grep -v \>,print a list of each file with the full path prefix in the current directory tree excluding symbolic links
"find . -name ""*.class"" -print0 | xargs -0 -n1 dirname | sort --unique","recursively prints all folders in a current folder that contain files like ""*.class""."
find -name *.bmp -type f -exec convert '{}' '{}'.jpg \;,find all *.bmp files in the current directory tree and convert them to the jpeg format
"find . -name ""*.pyc"" | xargs -I {} rm -v ""{}""","recursively removes all files like '*.pyc' in a current folder, printing info message about each action."
find . -type d -exec chmod 700 {} \;,find all directories under current directory and change their permission to 700
set -o allexport; source conf-file; set +o allexport,"interpret conf-file in the current shell, making all environment variables in this file available to future sub-processes."
find . -size 0k,search for empty files
"find . -type l -printf ""%Y %p\n"" | grep -w '^N'",list all broken symlinks excluding cyclic links under current directory
"find . -type f -name ""*.txt"" -print|xargs rm",remove all files with a txt extension under current directory
find /usr /home -name findme.txt -type f -print,find regular files named 'findme.txt' under '/usr' and '/home' directory tree
find . -mtime 0 -type f -ls,list all regular files in the current directory tree modified within the last 24 hours
find . -iname '*demo*' | grep -i sitesearch,"search for files with ""demo"" in their names and ""sitesearch"" in their path names"
ln -s target,"create a symbolc link in the current directory to ""target"""
find / -name core -group mycomp -print -exec rm -f {} \; >> mycompcore,"save the list of all the core files in the entire file system which belong to the group mycomp to the file ""mycompcore"" and delete them"
"read -p ""$*""","read a line from standard input into variable ""reply"" with prompt ""$*"""
"echo ""<line>"" | cut -d "";"" -f 2",print second field from semicolon-seprated line <line>.
"find . -name '*.jpg' -exec bash -c 'd=""${1%/*}""; mv ""$1"" ""$d/$d-${1##*/}""' - '{}' \;",rename all *.jpg files under current directory by appending parent directory name at the beginning of their names
find -print0 | xargs --null,list all files/directories under current directory ensuring white space safety
find . -print | grep '\.java',find all .java files  under current directory
find . -type f | xargs file,find all files under current directory and show their file information
"find . -name .git -prune -o -print | xargs grep ""string-to-search""","search all files in the current directory tree, except git files, for ""string-to-search"""
cd $(dirname $(dirname $(which perl)))/lib,"change directory to the ""lib"" directory located two parent directories above the path to command ""perl"""
"read -p ""> $line (Press Enter to continue)""","read a line from standard input into variable ""reply"" with prompt ""> $line (press enter to continue)"""
"find Folder1 -type f -regextype posix-extended \( ! -regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' \) -print0 |  xargs -0 cp -p --target-directory=Folder2","find files not matching the posix extended regex '.+\-[0-9]{2,4}x[0-9]{2,4}\.jpg' in their paths under folder1 and copy them to folder2"
number=$(echo $filename | tr -cd '[[:digit:]]'),"save only the digits in ""$filename"" to variable ""number"""
find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g',find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files
"md5=$(echo ""$line""|md5sum)",calculate md5 checksum of $line and save to variable 'md5'
date +%Y-%m-%d:%H:%M:%S,get year-month-day hour:minute:second from date
find /home/ -mtime -1 \! -type d,display all the files in the home folder excluding directories which have been modified in the last 24 hours
find . -user daniel,find all files owned by the user daniel in the current directory and below.
find . -name headdump* >delete.txt,"find all file names in the current directory tree that begin with ""headdump"" and write them to file `delete.txt'"
read sh_lock_lastPID < $sh_lock_file,"read the first line of ""$sh_lock_file"" into variable ""sh_lock_lastpid"""
"tar --help | grep ""lbzip2\|plzip\|pigz""","get info about ""lbzip2\|plzip\|pigz"" from tar command"
find /home/peter -name *~ -print0 |xargs -0 rm,"remove all files whose names end with ""~"" in the /home/peter directory tree"
yum check-update | awk 'p; /Updated packages/ {p=1}',lists available updates for installed packages.
df -h |  awk '{print $1}',print list of file systems currently mounted.
mkdir -p directory{1..3}/subdirectory{1..3}/subsubdirectory{1..2},create intermediate directories as required directory{1..3} and subdirectory{1..3} and directories subsubdirectory1 and subsubdirectory2
find / -name arrow.jpg,find the file arrow.jpg in the entire file system
"find / -name ""process.txt""","search for the file ""process.txt"" in the entire file system"
who | grep $USER,"determine if user ""$user"" is logged in"
find -name \*.xml -print0 | xargs -0 -n 1 -P 3 bzip2,compresses all '*.xml' files under current directory with 'bzip2' utility.
ls -1 | grep -v ^$EXCLUDE | xargs -I{} mv {} $TARGET,"move all files and directories in the current directory to ""$target"" excluding files matching ""$exclude"""
paste -d ' ' file <(rev file),pair side-by-side content of the 'file' and its side-mirrored content
"find . -name ""*.java"" | wc -l",count the number of .java files in all folders rooted in the current folder
"find . -name ""*.txt"" -print0 | xargs -0 python hello.py",find all *.txt files/directories under current directory and execute the python script hello.py with all their paths as arguments
sudo chown -R `whoami` /usr/local,"recursively change ownership of ""/usr/local"" to the current user"
find /home/web-server/ -type f -name httpd.log,"find the file ""httpd.log"" in the folder /home/web-server/"
"echo ""$queue"" | xargs -I'{}' find {} -mindepth 1 -maxdepth 1 $*",find all files/directories in level 1 down the $queue directory with all positional parameters appended with the find command
ssh -i ./device_id.pem -p 2222 deviceuser@middle.example.org,"log in using key file ""./device_id.pem"" as user ""deviceuser"" on host ""middle.example.org"" and port 2222"
top -b -n1 -c  | grep -A 2 '^$',find the process currently taking the most cpu time.
find . -type f -exec scp {} hostname:/tmp/{} \;,"recursively copy all regular files below current directory to directory /tmp on hostname, connecting as ssh user matching current username on local host."
find /home -name Trash -exec ls -al {} \;,"list all files and directories in the /home directory tree whose names are ""trash"""
uname -r | sed 's/\([0-9]\+\.[0-9]\+\)\..*/\1/',"display only first and second dot-separated numbers of kernel version, ie. 4.4"
find . -name \*.php -type f -exec grep -Hn '$test' {} \+,search for files only that end with .php and look for the string $test inside those files
find $(mount -t smbfs | awk '{print $3}') -mount -type f -ls -execdir file {} \;,find all files on smbfs mounts and print its information and file type
find /usr/share/doc /usr/doc /usr/locale/doc -name instr.txt,"search directory trees /usr/share/doc, /usr/doc, and /usr/locale/doc for files named 'instr.txt'"
"find ""$source_dir"" -type f|egrep ""$input_file_type""",find all files under $source_dir that match the regex expanded by $input_file_type in their paths
find /etc -name hosts,find file `hosts'
find . -perm g=r -type f -exec ls -l {} \;,find and print detailed information about all regular files in your home directory and below that have only the group permission set
"md5=""$(md5sum ""${my_iso_file}"")""",calculate md5 sum of file ${my_iso_file} and save it to variable 'md5'
su - USER_FOOBAR -c /PATH/TO/MY_APP &,run script /path/to/my_app as user user_foobar in background
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -print0 | xargs -0 sed -i '' -E ""s/[[:space:]]*$//""",remove trailing white spaces from all files under current directory ignoring .git and .svn directories
"find -maxdepth 1 -name '*.sql' -print0 \; | xargs -0 sed -e 's/ , );/1,1);/g'  | mysql -D ootp","find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command"
find . -atime +6 -exec ll | more,find al the files which have been accesed in the last 6 days and display their details
"find . -type f -name ""postgis-2.0.0""",find all regular files named postgis-2.0.0 under current directory
find -print0,find all files/directories under current directory and append a null character at the end of each path
find . -name '*foo*' -exec ls -lah {} \;,list all files matching regular expression '*foo*' in a human-readable form
find /myfiles -atime +30 -exec rm {} \;,remove all files under /myfiles that were accessed more than 30 days ago
find . -samefile /path/to/file,find all hard links to file /path/to/file that exist under the current directory tree
find /home/peter -name no-such-thing* |xargs rm,"remove all files whose names begin with ""no-such-thing"" in the /home/peter directory tree"
"local pingResults=$(LANG=C ping -q -c10 ""$gateway"")","save the 10 ping results to ""$gateway"" in variable ""pingresults"""
true | sleep 10,executes 'sleep 10' in a subshell created by a pipeline of built-in function 'true'.
"tdir=""$(pwd)/$(mktemp -d)""","creates temporary folder, and saves current folder path   joined with created temporary folder path in 'tdir' variable."
find . -type f -exec grep -l 'string' {} \;,"search the current directory recursively for files containing ""string"""
ssh -fNR 1234:localhost:22 root@123.123.123.123,listen on port 1234 on root@123.123.123.123 and forward it to port 22 on localhost
sudo yum --disablerepo epel update openssl,updates 'openssl' packages without using of 'epel' repository.
chown amzadm.root  /usr/bin/aws,"change user to ""amzadm"" and group to ""root"" of ""/usr/bin/aws"""
comm -12 file1 file2,"print common lines in ""file1"" and ""file2"""
find . -name 'abc*' | sed 's/$/\tok/' | column -t,"find all files matching ""abc*"" in the current directory and append ""\tok"""
"find . -depth -name '* *' | while IFS= read -r f ; do mv -i ""$f"" ""$(dirname ""$f"")/$(basename ""$f""|tr ' ' _)"" ; done",find all files/directories with space in their names under current directory and rename them by replacing all spaces with _
find /data/bin/test -type d -mtime +10 -name '[0-9]*' -print | xargs rm -rf ;,"recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number"
getent group | cut -d: -f1 | sort,print sorted list of all group names known to the system.
chown user destination_dir,"change the owner of ""destination_dir"" to ""user"""
"df --output=target ""$path"" | tail -1",print mount point of the file system containing $path.
find /tmp -type f,search the /tmp/ directory recursively for regular files
"finger | awk -F""\t"" -v 'OFS=\t' '{ $4=""""; print $0}' | sed 's/\t\{2,\}/\t/'","delete the 4th tab separated column from the output of ""finger"""
find $@ -not -name ss,"search the directories given as arguments to the bash script for files whose name is not ""ss"""
find $DBA/$ORACLE_SID/bdump/*.trc -mtime -1 -print >> /tmp/trace_list.lst,save the list of all the trace files from the folder $dba/$oracle_sid/bdump/ which have been modified in the last 24 hours
chgrp -R git .git,recursively changes group ownership of everything within '.git' to 'git'.
find . -type f \( -iname “*.c” \) |grep -i “keyword”,"find all c source code files from the current directory tree that contain ""keyword"" in their pathnames, ignoring the case"
df . | awk '$3 ~ /[0-9]+/ { print $4 }',print amount of space available on the file system containg path to the current working directory.
ssh -i /path/to/ssh/secret/key $1 $2,"ssh into host ""$1"" using key file ""/path/to/ssh/secret/key"" and execute command ""$2"""
cat `/gnuwin32/bin/find.exe . -name *.php` | wc -l,"count the number of lines in all "".php"" files in the current directory tree using bash for windows"
find . -name testfile.txt,find all files/directories named 'testfile.txt' under current directory tree
"find . -type f -iname ""*.txt"" -print | xargs grep ""needle""","check all .txt files whether they contain ""needle"""
shopt -u -o history,unsets 'history' shell option.
find /usr/bin -type f -size -50c,find all regular files undee '/usr/bin' directoryt tree that are less than 50 bytes in size
cat log | tr -s [:blank:] |cut -d' ' -f 3-,replace all sequence of 'blank' characters in file 'log' with a single occurence of such symbol and print space-separated fields of each string but first two fields
"find . -name ""file*""","find files starting with the word ""file"" in the current directory tree"
"find /somepath -type f -iregex "".*\.(pdf\|tif\|tiff\|png\|jpg\|jpeg\|bmp\|pcx\|dcx)"" ! -name ""*_ocr.pdf"" -print0","find all regular files under and below /somepath that have extensions pdf, tif, tiff, png, jpg, jpeg, bmp, pcx, or dcx, ignoring the case and excluding ""*_ocr.pdf"" files"
"find . -iname ""Articles.jpg""",find and image in current folder (case insensitive search)
find /data/SpoolIn -name job.history -exec grep -l FAIL {} \+ | wc -l,count the number of files named 'job.history' under '/data/spoolin' directory tree that match 'fail' in their contents
find /mount/point -maxdepth 1 -type d | wc -l,count the number of all directories under directory '/mount/point' non-recursively
find / -size 20,display all the files in the file system which are smaller than 20 bytes
csvtopretty filename.csv | less -S,let the user page through 'filename.csv' with long lines chopped so they fit within the width of the screen/window.
od | cut -b 8- | xargs -n 1 | sort | uniq | wc -l,convert standard input into a dump of octal bytes without the first 8 bytes of address and count the unique results
find / -type f -name *.jpg  -exec cp {} . \;,find all *.jpg files and copy them to /
find $HOME -name '*.c' -print | xargs grep -l sprintf,find all '*.c' files under $home directory which context contains sprintf
readlink -f  /path/here/..,"print canonical filename of ""/path/here/.."""
find -name file1 | wc -l,count the number of files named `file1'
find . -name '*.clj' -exec grep -r resources {} \;,"find all the files ending with ""clj"" in the current folder and search for a pattern"
"su -c ""dbca -silent -createDatabase -templateName General_Purpose.dbc -gdbName qualidade -sysPassword password -systemPassword password -scriptDest /u01/app/oracle/oradata/qualidade -characterSet WE8ISO8859P1"" -s /bin/sh oracle","run a command ""dbca -silent -createdatabase -templatename general_purpose.dbc -gdbname qualidade -syspassword password -systempassword password -scriptdest /u01/app/oracle/oradata/qualidade -characterset we8iso8859p1"" with bash shell as user oracle"
find / -size +100M,search for files that are at least 100mb
find / -name “*.mp3” -atime +01 -type f,display all mp3 files in the file system which have not been accessed in the last 24 hours
"find . -name ""*.php"" -exec chmod 755 {} +",change the permission of all php files in current folder. plus symbol at the end is used to give multiple files as input to the chmod command
find /var/log/ -mtime +60 -type f -exec ls -l {} \;,display the long listing of all files in /var/log which were modified 60 days or more ago.
find / -name 'top???',find all the files in the entire file system that start with the word top and have 3 letters next to it.
"mount -o ro,loop,offset=$OFFSET -t auto $IMAGE /media/$DEST","mount a partition in ""$image"" with offset ""$offset"" to ""media/$dest"" as read only using a loop device"
find * -maxdepth 0 -name 'b' -prune -o -exec rm -rf {} \;,delete all files/directories taken by the glob pattern * except the ones with the name 'b'
"LGT_TEMP_FILE=""$(mktemp --suffix .cmd)""",creates temporary file with appended suffix '.cmd' and saves path to it in 'lgt_temp_file' variable.
IP=$(dig +short myip.opendns.com @resolver1.opendns.com),look up for 'myip.opendns.com' in server 'resolver1.opendns.com' and save the terse output in 'ip' variable
find /etc -type d -print,display all directories in a folder
"find . -type f -exec grep ""/usr/bin/perl"" {} \; -ls",search for '/usr/bin/perl' in all regular files under current dirctory tree and also show a long listing of them
"find /home -type f -name ""*.ext"" -exec sed -i -e ""s/\x0D$//g"" {} \;","remove the ""^m"" characters from all *.ext files under /home directory"
history | cut -d' ' -f4- | sed 's/^ \(.*$\)/\1/g',print the output of history without line numbers
"find ""$DIR_TO_CLEAN"" -mtime +$DAYS_TO_SAVE -exec rm {} \;",delete files in $dir_to_clean older than $days_to_save days
find /home -type f -size +10485760c -print,looks for all files larger than 10 megabytes (10485760 bytes) within /home
"cat files | sort -t- -k2,2 -n","numberically sort content of file 'files', using for sorting part of second one of dash separated fields beginning from second letter."
read line,"read a single line from standard input and save to variable ""line"""
screen -S 'name' 'application',assign a name when starting a screen session
find . -name '*.txt' -exec grep 'sometext' '{}' \; -print,search for 'sometext' in all the files with '.txt' extension under current directory tree and also print the filenames
"find ""/tmp/1"" -iname ""*.txt""",display all text files in the folder /tmp/1
zcat input.gz | ./myscript.pl,"send uncompressed contents of ""input.gz"" to ""./myscript.pl"""
"file=`basename ""$1""`","set variable 'file' to the base name of first argument to script or function, that is the part following the last slash."
find . -name '*.foo' -exec cat {} +,find all *.foo files under current directory and print their contents
md5sum * | sed -e 's/\([^ ]*\) \(.*\(\..*\)\)$/mv -v \2 \1\3/e',rename all files in the current directory to the md5 sum followed by the extension and print the conversions
find /mnt/raid/upload -mtime +5 -print,search the /mnt/raid/upload directory tree for files that have not been modified within the last 5 days
find / -size +100M -exec rm -rf {} \;,find all 100mb files in file system and delete them using rm command
bash | tee /var/log/bash.out.log,"copy the standard output of a ""bash"" session to ""/var/log/bash.out.log"""
find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} ;,"update the archived copy of the home directory, ""alldata.tar"""
find /tmp -maxdepth 2 -mindepth 1 -type d,find all directories in maximum 2 levels down the /tmp directory
"find / -regex "".*\.\(xls\|csv\)""",display a long listing of all the xls or csv files in the entire file system
nslookup `hostname`,dns lookup of the current host
"awk 'NR==16224, NR==16482-1; NR==16482 {print; exit}' file","output lines 16224 to 16482 of 'file', and stop reading 'file' after line 16482."
"find var/log/ -iname ""anaconda.*"" -exec tar -rvf file.tar {} \;",search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of all the files found
find . -type f -print0 | xargs -0 -e grep -nH -e MySearchStr,"search the word ""mysearchstr"" in all the regular/normal files in the current folder and display the line number and the file name"
DIR='find $HOME -type d -name $1 | head 1',search for a directory in a folder taking name as argument and assign the first instance of it to a variable
"find `pwd` -name ""*rc.conf""  -execdir /bin/chmod o+r {} \;","search the current directory for *rc.conf files and grant ""other"" users read permission"
find /home -xdev -inum 2655341,search for all files in the /home directory tree that have the same inode number
find /mount/point -type d | wc -l,display the count of all the directories present in a folder
find . -type f -mtime -7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`,find files that were modified less than 7 days ago and archive them
find -name '*FooBar*' -print0 | xargs -0 cp -t ~/foo/bar,copies all files under current directory like '*foobar*' to the '~/foo/bar' directory.
head -1 <(sort set),"print the first line of output after alphabetically sorting the file ""set"""
rsync_src=`mktemp -d -p $mnt_dir`,creates temporary folder within a $mnt_dir folder and saves path to it in a 'rsync_src' variable.
"find . -name ""*.ext""","find files recursively with extension ""ext"""
find . -name 'CVS' -type d -exec rm -rf {} \;,remove all cvs directories from the current directory tree
alias :='xargs -I{}',"set alias "":"" for command 'xargs -i{}'"
set | grep -oP '^\w*(?==)' | grep X,"list environment variables whose name contains ""x"""
find / -nouser,find files owned by no user
"cd ""`pwd -P`""","resolve any symlinks in working directory, and go to resulting pathname."
diff -qr dir_one dir_two | sort,"print summary of new/missing files, and which files differ between dir_one and dir_two, sorted alphabetically."
is_nullglob=$( shopt -s | egrep -i '*nullglob' ),"check if 'nullglob' shell option is enabled, and if so, saves its status in 'is_nullglob' variable."
"while true ; do nc -l -p 1500 -c 'echo -e ""HTTP/1.1 200 OK\n\n $(date)""'; done",serves minimal http response with netcat
grep -n 'something' HUGEFILE | head -n 1,searches for 'something' in a large file and prints the matching line
find -P . -lname '*/test*',search the current directory tree for symbolic links to files matching pattern '*/test*'
find . -type f -mtime -2 -exec echo {} +,print the list of regular files from the current directory tree that were modified less than 2 days ago
find . -name '*.zip' | xargs -n1 unzip,unzip all *.zip files under current directory
find / -name foo.bar -print 2>/dev/null,"find a file ""foo.bar"" without showing ""permission denied"" messages"
"date -d @$(git log -n1 --format=""%at"") +%Y%m%d%H%M",prints git log message with a custom time format string
find /var/www/*.php -type f -exec rm {} \;,remove all .php files in the /var/www/ directory
find . -name \*.xml -print0 | cpio -pamvd0 /new/parent/dir,"copy all "".xml"" files in the current directory tree to ""/new/parent/dir"" preserving the directory hierarchy"
sudo  find /var/www/html/ -type f -exec chmod 664 {} \;,"change every file under ""/var/www/html/"" to have permissions 664"
find . -perm 777  -mtime 0 -print,display all the files in the current folder which have the permissions 777 and which have been modified in the last 24 hours.
find /students -type l -print 2> /dev/null |wc -l,count the number of symbolic links starting from /students
"find . -type f \( -name ""*.conf"" -or -name ""*.txt"" \) -print",search the current directory tree for *.conf and *.txt files
"var=`hg st -R ""$path"" | sed -e 's/  *$//'`","remove trailing spaces from the output of 'hg st -r ""$path""' and save the result in variable ""var"""
"perl -e '@T=localtime(time-86400);printf(""%02d/%02d/%04d"",$T[3],$T[4]+1,$T[5]+1900)' | read dt","save yesterday's date into variable ""dt"" using perl"
find . -perm 0644 | head,find all 0644 permission files/directories under current directory tree and show only the first 10 of them
"x=$(grep ""$(dirname ""$path"")"" file)","finds all strings with parent folder of path '$path' in 'file', and saves result in 'x' variable."
uname_m=`uname -m`,"set variable ""uname_m"" to machine architecture, ie. x86_64"
find . -name \*.php -type f -print0 | xargs -0 -n1 php -l,perform syntax check on all php files in the current directory tree
find . -iname '.note' | sort -r,"list all file paths under the current directory with case insensitive name "".note"" in reverse alphabetic order"
find . -name 'file_name.extension' -print | cpio -pavd /path/to/receiving/folder,"copy all files matching ""file_name.extension"" to ""/path/to/receiving/folder"" preserving directory hierarchy"
find aaa/ -maxdepth 1 -type f,"find all regular files in the ""aaa"" directory"
find . -name nameoffile -print | cpio -iv > /dev/fd0,find all instances of a file in the current folder and create a backup of it in the floppy
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do cat $path | tr -d '\r' > $path""_new""; done","remove the ""^m"" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names"
ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}',finds ip address of 'en0' network interface.
find / -wholename  '/proc' -prune  -o  -type f -perm -0002 -exec ls -l {} \;,find all files on the system that are world writable
find . -newer disk.log -print,find all the files in the current folder which have been modified after the file disk.log
find /mydir -type f -exec sed -i 's/<string1>/<string2>/g' {} +,find all files in  /mydir  and replace every occurrences of <string1> with <string2> in those files invoking sed as few times as possible
"find . -name ""*.xml"" -exec sh -c 'echo ""cp $0 someWhereElse/$0""' {} \;",search for all xml files in current folder and display the copy command to copy them to another folder
ssh -S my-ctrl-socket -O exit jm@sampledomain.com,"close the master ssh control socket ""my-ctrl-socket"" to ""jm@sampledomain.com"""
find . -mmin -60 -ls,list all files from the current directory tree that were modified less than 60 minutes ago
find . -name 'spam-*' | xargs rm,forcefully delete all files in the current directory that begin with spam-
"find . -type f -print -exec sh -c ""readelf -s {} | grep mysymbol"" \;",print the path to all *.so files under current directory and search for mysymbol in their symbol tables
rsync -u src dest,"copy ""src"" to ""dest"" if ""src"" is newer than ""dest"""
find $HOME  -mtime 0,search for files in your home directory which have been modified in the last twenty-four hours
sudo su,get the root access
"find . -type f -name ""*.txt"" ! -name README.txt -print",find all .txt files except readme.txt
popd,pops the top directory of dirs stack and changes to it.
find / -name foo.txt -type f -print,find regular file named foo.txt under root / directory.
find /home/nobody/public_html -type d -exec chmod 755 {} \;,"change the permissions of all the directories to 755 in the folder ""/home/nobody/public_html"""
bzip2 -dc archive.tbz | tar xvf - filename,extracts single file 'filename' from bzip2-compressed tarball archive.tbz.
"watch -tdn0.5 ps -mo pid,tid,%cpu,psr -p \`pgrep BINARY-NAME\`","execute ""ps -mo pid,tid,%cpu,psr -p \`pgrep binary-name\`"" every half second displayed with no title and highlighting the differences"
find 'my key phrase',find all files/directories under 'my key phrase' directory
x=$(ifconfig eth0) && x=${x#*HWaddr } && echo ${x%% *},gets mac address of 'eth0' network interface.
find . -ctime 0 -type f,find all the files that have been changed today
"dir=""`echo $dir | sed s,//,/,g`""","collapse double slashes in variable ""dir"" into a single one."
"find / -name  ""*.txt"" -mount 2> /dev/null",find all *.txt files except for those on other file systems
find . -group 10 -perm -2000 -print,find all files that are set group id to 10
ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)',"print the percentage of packets lost of the 5 packets sent to ""$host"""
du | awk '{print $2}',print paths to all subdirectories inside of a directory
"find . -type f -regex "".*src/main.*\.scala$""","display all scala files in the directory ""src/main"""
watch ls,"execute ""ls"" every 2 seconds"
"find ! -path ""dir1"" -iname ""*.mp3""",exclude directory from find . command
"find /media/shared \( -iname ""*.mp3"" -o -iname ""*.ogg"" \)",search the /media/shared directory recursively for mp3 and ogg files
yes | head -3,"print 3 newline separated ""y""s"
find . -name '*.java' | xargs vim,open all .java files in the current directory tree in the vim editor
ln -s $file `basename $file`,"create a symbolic link named the basename of ""$file"" to ""$file"""
crontab -l | sed '/# *\([^ ][^ ]*  *\)\{5\}[^ ]*test\.sh/s/^# *//' | crontab -,"uncomment every entry in current user's cron job list which contains ""test.sh"""
yes $1 | head -$number,"print argument ""$1"" ""$number"" times"
cat xx.sh,"print the contents of ""xx.sh"""
uname -r | cut -d. -f1-2,"display only first and second dot-separated numbers of kernel version, ie. 4.4"
find $dir -mtime -3,find all files/directories under $dir directory tree which have been modified in the last 3 days
"find . -name ""*1"" -exec grep ""1"" {} \;","search all files in the current directory tree whose names end in ""1"" for string ""1"""
"mkdir $(printf ""$HOME/Labs/lab4a/folder%03g "" {0..3})","make 3 directories named ""~/labs/lab4a/folder"" followed by a 3 width zero padded number from 0 to 3"
"read -r -d $'\0' content <<< ""${some_variable}""","read the contents of ""${some_variable}"" until a null character is found and save the result in variable ""content"""
find . -type d –iname stat*,find all directories that start with stat
find $INPUT_LOCATION -name '*.pdf.marker' | xargs -i bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION,move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}
rsync -avh /home/abc/* /mnt/windowsabc,"archive ""/home/abc/*"" to ""/mnt/windowsabc"" with human readable output"
find . -name \*.sql,search the current directory and directories below for .sql files
"find . -name \*.xml | while read i; do grep '<?xml' ""$i"" >/dev/null; [ $? == 0 ] && echo $i; done","find all *.xml files under current directory, search for '<?xml' in those files and print the paths of the matched files."
find $LOGDIR -type d -mtime +5 -exec rm -rf {} \;,delete all directories found in $logdir that are more than a work-week old
find /dump -type f -name '*.xml' | parallel -j8 java -jar ProcessFile.jar {},find all the xml files in a directory and pass it as an argument to a jar (parallel is used to achieve parallel processing)
"find . -mmin -720 -mmin +60 -type f -name ""t*"" -exec ls -l '{}' \;",find all the files in the current directory which start with t and have been modified between one hour (60 minutes) and 12 hours (720 minutes) ago.
"find . -type f -name ""*.java"" | xargs tar cvf myfile.tar",create a tar archive with all *.java files under the current directory
find |wc -l,find all files/directories under current directory and count the number of lines for the output
"date --date=""222 days ago"" +""%Y""",prints what year it was 222 days ago
find . -name abc -or -type d,"search for the file ""abc"" in the current folder or display all the directories"
"mkdir -p folder$( seq -s ""/folder"" 999 )1000","create 998 directories one inside another with sequential names folder1, folder2, ... folder998 and create an additional folder named 'folder9991000' inside the last 'folder998' directory"
find /myfiles -size 5,find all files/directories under /myfiles that are 2560 bytes in size
{ time find / &>/dev/null; } 2>&1 | grep real,redirects output of 'time' built-in function and prints only real-time statistic.
echo '1/2 [3] (27/03/2012 19:32:54) word word word word 4/5' | sed -e 's/(.*)//' -e 's/[^0-9]/ /g' | column -t,"remove everything within parentheses and substitute all non digit characters with a space from ""1/2 [3] (27/03/2012 19:32:54) word word word word 4/5"" and format the output as a table"
tmux show-options -g,show global windows options.
ls -1 | tail -n +N | head -n1,prints the nth line of output from 'ls -1'
find . -perm 644 -type f -exec ls -l {} \;,find regular files which have 644 permission
"join -t, -a1 -a2 <(sort file1) <(sort file2)","join comma-separated data in file1 and file2, including extra non-matching information in both files."
watch bash -c your_script,"execute ""bash -c your_script"" every 2 seconds"
"find ""$(pwd -P)"" -mtime 0 -not \( -name '*.swp' -o -regex './es.*' -o -regex './en.*' \)",search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*
"find -name ""*.c""",find all filenames ending with .c in the current directory tree
perl -p -i -e 's/oldstring/newstring/g' `find ./ -name *.html`,find all the html files in current folder and replace old string with new string
"getent group <groupname> | cut -d: -f4 |  tr ',' '\n'",list the users having <groupname> as their secondary group.
find . -mtime -1 | xargs ls -ld,display a long listing of all the files in the current folder which have been modified in the last 24 hours
"find . -type f -name ""*.java"" | xargs tar rvf myfile.tar",append *.java files from the current directory tree to tar archive `myfile.tar'
find debian/fglrx/ -name 'fglrx-libGL*',find all fglrx-libgl* files under and below debian/fglrx/
find $HOME -name \*txt -o -name \*html -print0,"find in $home files ending in ""txt"" and do nothing with them, or files ending in ""html"" and list them null separated."
find $HOME -type d -name $1 -exec echo {} ';'  -exec rm -rf {} ';',find all directories named $1 under $home directory tree and remove them
mv $file $(echo $file | rev | cut -f2- -d- | rev).pkg,"rename $file file, preserving only part of name before '-' symbol, and appending '.pkg' suffix to the end"
"find . -type d -iname '*foo*' -depth -exec bash -c '     echo mv ""$1"" ""${1//[Ff][Oo][Oo]/BAr}"" ' -- {} \;",move all *foo* (case insensitive) directories under current directory to new paths obtained by replacing all occurrences of 'foo' (case insensitive) with 'bar' in their paths
find sort_test/ -type f | env -i LC_COLLATE=en_US.utf8 sort,print a list of regular files from directory tree sort_test/ sorted with lc_collate=en_us.utf8
find ~/ -mtime -2 -o -newer filename,search the current user's home directory and its sub-directories for any file that was modified less than 2 days ago or was modified after filename was last modified.
"echo -e ""$correctFilePathAndName"" | xargs touch","create empty files (or update timestamps if they exist) with names matching each word in variable ""correctfilepathandname"""
find /TBD/* -mtime +1 | xargs rm -rf,delete all files in the tbd directory that were modified more than 1 day ago
xxd -p file | tr -d '\n',"print contents of ""file"" as space separated hexadecimal bytes on a single line"
"cd ""$(ls -rd [0-9]*/ | tail --lines 1)""","go to last directory with name starting with a number, useful for timestamped directory names."
"find . -type f \! -iregex '.\|./.git' -exec perl -i'' -pe ""s/$lower1/$lower2/g"" {} +",find all files under current directory that match the case insensitive regex .\|./.git and replace (all occurrences) the text matching the regex expanded by $lower1 with $lower2 in these files
find . -type f -exec wc -l {} \; | awk '{ SUM += $0} END { print SUM }',count total number of lines in all files below current directory.
"find /home/jassi/ -name ""aliencoders.[0-9]+"" |& xargs ls -lrt | awk '{print $9}'",list all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
cat $1.tmp | sort -u,print all unique strings in $1.tmp file.
"find ./ -name ""blabla"" -exec wc -l {} ;","find files named ""blabla"" in the current directory tree and print the number of lines in each of them"
cp /file/that/exists /location/for/new/file,"copy file ""exist"" from directory ""/file/that"" to a new file named ""file"" in ""/location/for/new"""
find . -atime +7 -o -size +`expr 10 \* 1024 \* 2` -print,"find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 10 * 1024 * 2 blocks in size, that is larger than 20480 blocks."
rename 's/^/new./' original.filename,"add ""new."" to the beginning of the name of ""original.filename"", renaming it to ""new.original.filename""."
find . -name a\*.html,find all html files starting with letter 'a' in the current directory and below
awk 'FNR==NR { for(i=2;i<=NF;i++) a[$1][i]=$i; next } { for(j=2;j<=NF;j++) $j-=a[$1][j] }1' File2 File1 | rev | column -t | rev,"subtract all columns in ""file2"" from ""file1"" except the first"
yes $'one\ntwo' | head -10 | nl | sort -R | cut -f2- | head -3,"print either ""one"" or ""two"" randomly three times"
"find . -type f -print0 | tr '\0' ','",print all files in the current directory tree as a comma separated list
kill %1,send sigterm signal to first process sent to background by the current shell.
hostname -a -l mydomain.com | sed -n '/;; ANSWER/{n;N;p;q}',"print sub domains of ""mydomain.com"""
mount,list all mounted filesystems
dpkg -S `which command`,"display which package the command ""command"" belongs to in dpkg"
rsync -rvv --recursive /path/to/data/myappdata user@host:/remote/path/to/data/newdirname,"recursively copy directory ""/path/to/data/myappdata"" to ""user@host:/remote/path/to/data/newdirname"""
chmod 755 /folder -R,"recursively set all permissions under ""/folder"" to 755"
"find ~/$folder -name ""*@*"" -type f -print0","find all regular files whose names contain ""@"" in directory tree ~/$folder"
find . -type f -exec md5sum \{\} \;,calculate and show md5 sums for every files under current directory tree
"find ./ -type f -exec grep -l ""Text To Find"" {} \;",search for 'text to find' in all regular files under current directory tree and show the matched files
true | echo `tty | sed 's:/dev/::'`,runs 'tty' command in a subshell that is opened by built-in function 'true'.
"find . -type f -name '*.m4a' -exec bash -c 'avconv -i ""$0"" ""${0/%m4a/mp3}""' '{}' \;",convert all m4a sound files in a directory and its subdirectories to mp3 files
"find / -mount -name ""*.txt""",find all the text files in the file system and search only in the disk partition of the root.
comm <(sort -n f1.txt) <(sort -n f2.txt),"compare sorted files 'f1.txt' and 'f2.txt' and print in three columns strings unique for first file, second file, and common ones"
find  /storage/sdcard0/tencent/MicroMsg/ -type f  -iname '*.jpg' -print0,search the /storage/sdcard0/tencent/micromsg/ directory tree for jpg files
find /tmp/* -atime +10 -exec rm -f {} \;,force delete all files in the temp folder which have not been accesses in the last 240 hours
"find . -name ""*.andnav"" | rename -vn ""s/\.andnav$/.tile/""",do a dry run of renaming file extension '.andnav' to '.tile' for all files/directories under current directory tree
find . -inum 782263 -exec rm -i {} \;,delete files with inode number 782263 under current directory
find . -regex filename-regex.\*\.html -exec grep -H string-to-find {} \;,search for 'string-to-find' in all files under current directory tree matching the regex 'filename-regex.\*\.html' in their paths and show the matched lines along with the filenames
find /home -user <usernmae> -print,find all the files in the home folder that belong to a specific user
find usr/include -name '*.h' -mtime -399 | wc,"find all the header files in /usr/include which have been modified in the last 399 days and display the number of lines, number of files, number of characters of all these files"
"find /var/log -group adm -name ""*.log""",find all files/directories with '.log' extension that belong to the group 'adm' under '/var/log' directory tree
find /path/to/srcdir -type f -print0 | xargs -0 -i% mv % dest/,"recursively move all files in ""/path/to/srcdir"" to ""dest/"""
tail great-big-file.log,"print the last 10 lines of ""great-big-file.log"""
"join -j2  <(seq 0 255) <(seq 0 255) | xargs -n256 printf ""%02x/%02x\n"" | xargs mkdir -p","create 256 directories named from '00' to 'ff', each containing 256 subdirectories named '00' to 'ff'."
find /etc -type l -print,search the /etc directory tree for symbolic links
"ifconfig eth0 | awk '/inet addr/{sub(""addr:"",""""); print $2}'",gets ip address of 'eth0' network interface.
df -Ph,report file systems disk usage human-readable using posix output format.
find / -name '*python*',search for files having python in filename
find /Users/david/Desktop/ -type f,search directory /users/david/desktop/ recursively for regular files
find . -user tommye,find all files starting from the current directory which are owned by the user tommye
"find ${x} -type d -exec chmod ug=rwx,o= '{}' \;",find all directories under $x directory and set read-write-execute permission for owner and group and no permission for other for those directories
chgrp -R project_dev /home/user1/project/dev,recursively changes group ownership of everything in a '/home/user1/project/dev' folder to 'project_dev'.
"find dir -not \( -path ""dir1"" -o -path ""dir2"" -prune \) -type f",list all regular files which path is not dir1 or dir2
find . -type f -name '*.php' -exec grep -Hcm2 $ {} + | sed -n '/:1$/{s///;p}',find all php files under current directory that contain only one line
"yes -- ""-tcp"" | head -n 2","output two lines of ""-tcp"""
who -su | sort | uniq | column,print unique list of who is logged in and the time of login formatted in columns
brew install git bash-completion,installs git and bash-completion packages.
find test -type d -regex '.*/course[0-9]\.[0-9]\.[0-9]\.[0-9]$',find all directories under 'test' directory tree whose paths match the regex '.*/course[0-9]\.[0-9]\.[0-9]\.[0-9]$'
ssh -fL 127.0.0.1:someport:host.in.the.remote.net:22 proxy.host,"allow ssh from 127.0.0.1 on port ""someport"" through ""proxy.host"" to ""host.in.the.remote.net"" on port 22"
"find . -name ""*.bak"" -delete",delete all the backup files in current directory
cp `which python2.7` myenv/bin/python,"copy the executable ""python2.7"" in $path to ""myenv/bin/python"""
find . -mtime +180 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}END{print total/1024}',search for all the files which have not been modified in the last 6 months (180 days) in current folder and display the total disk usage of them
find . -name *.mp3,find all *.mp3 files under current directory
tr -s ' ' | cut -d ' ' -f 2,print second section of data coming from stdin where sections are separated by one or more whitespace.
cal -h | cut -c 4-17 | tail -n +3,print all business days in the current month without column titles
find . -type d ! -perm -111,find all directories in the current directory tree that do not have `execute' permissions for anyone
"wget --post-data=""PiIP=$(hostname -I)"" http://dweet.io/dweet/for/cycy42","make a post request to ""http://dweet.io/dweet/for/cycy42"" with data ""piip"" set to the ip address of the system"
"find . -type d -execdir sh -c 'test -z ""$(find ""{}"" -mindepth 1 -type d)"" && echo $PWD/{}' \;",list all leaf directories (directories which don't contain any sub-directory) under current directory
find -empty -type -f,find files that are empty
find /some/path -name '*.coffee' -print0 | xargs -0 perl /path/to/your/program,find all *.coffee files under /some/path and run 'perl /path/to/your/program' with all of the file paths as its arguments
f=$(cat numbers.txt),"save the contents of ""numbers.txt"" to variable ""f"""
cat 'filename' | grep '[^ ]' | wc -l,counts lines in file 'filename' ignoring empty lines and lines with spaces only.
od -t c file,"dump ""file"" as ascii characters"
read -rsp $'Press any key or wait 5 seconds to continue...\n' -n 1 -t 5,"silently read a single character from standard input into variable ""reply"" without backslash escapes, with a timeout of 5 seconds, and using the prompt $'press any key or wait 5 seconds to continue...\n'"
true | false | true,"saves exit statuses of piped commands in a system variable pipestatus='([0]=""0"" [1]=""1"" [2]=""0"")'"
find /mnt/naspath -mtime 0 -print0 | du --files0-from=- -hc | tail -n1 >> /tmp/size.log,"find all files/directories under mnt/naspath that were modified in last 24 hours, calculate the total size and redirect the result to /tmp/size.log file"
find . -type f -mtime 0,find all regular files that reside in the current directory tree and were last modified 1 day ago
su -c 'bash --rcfile myfile',run bash shell as user root
find . -maxdepth 1 -mindepth 1 \( -name '*.py' -not -name 'test_*' -not -name 'setup.py' \),"find all .py files in the current directory except ""setup.py"" and those beginning with ""test_"""
find / -atime +2,find all files in the file system which have not been accessed in the last 2 days
find . -name '*FooBar*' -exec cp -t ~/foobar -- {} +,"copies all files like ""*foobar*"" under the current directory to the '~/foobar' directory."
"find . -type d -name ""temp*"" | xargs -n1 cp xyz.c","copy a file xyz.c to all the directories below the current one whose names begin with ""temp"""
cat -n infile,print 'infile' content with line numbers
find /usr/local/fonts -user warwick,find all fonts (in '/usr/local/fonts') that belong to the user 'warwick'
find . ! -readable -prune,find all files in the current directory do not display the files which are not readable
"perl -ple '' `find . -name ""file*""`",print the contents of all file* files under current directory
find . -perm /111 -type f | sed 's#^./##' | sort | diff -u .gitignore -,"list executable files in the current directory, sort the list and then display the differences between the list and file .gitignore."
find / -type f -exec grep -i 'the brown dog' {} +;,search for a word in all the regular/normal files in the entire filesystem. ( + is used to give more than one file as input to the grep command.
set -- $(cal 2 1900),"saves printed calendar of february,1900 in positional variables."
"find . -iname '*.jar' -printf ""unzip -c %p | grep -q '<stringWithOrWithoutSpacesToFind>' && echo %p\n"" | sh",unzip and search for a word in all the jar files in the current folder and display the matched file name
reverse=$(dig -x $ip +short),get domain name of $ip and save it to the variable 'reverse'
find /home -group test,display all files in the folder home which are owned by the group test.
find $DESTINATION -mtime +7 -exec rm {} \;,delete all files under $destination directory tree that were modified more than 7 days ago
find . -exec program {} +,take all the files in the current folder and pass them as argument to a program
"find . -name ""*.php"" -exec chmod 755 {} + -printf '.' | wc -c",change permissions for all php files under the current directory tree to 755 and print the number of files changed
find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' \;,copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure
find . -type f -exec sed -i 's/searc/replace/g' {} \;,"change string ""searc"" to ""replace"" in all files in directory hierarchy"
find ./ -type f -print0 | xargs -t -0 chmod -v 644,change permissions to 644 for all files showing the respective chmod command
"find /path/to/dir -name ""*.gz"" -type f",find all .gz archives in the /path/to/dir directory tree
dig -x 127.0.0.1,print reverse lookup for adress 127.0.0.1
find data/ -name filepattern-*2009* -print0 | xargs -0 tar uf 2009.tar,archive all filepattern-*2009* files/directories under data/ into 2009.tar
"mount -o remount,ro -t yaffs2 /dev/block/mtdblock3 /system","remount ""/dev/block/mtdblock3"" on ""/system"" with read only permission"
"who | cut -d "" "" -f1,2",print all user names and terminals of users who are logged in
"ssh -t remotehost ""sudo <cmd>""","force pseudo-terminal allocation to run ""sudo <cmd>"" on ""remotehost"""
"ls -1 | tr '\n' ',' | sed 's/,$/\n/'","lists all files in a current folder, separating names with comma."
find -mindepth 1 -maxdepth 1 -type d | cut -c 3- | sort -k1n | tail -n 1 | xargs -r echo rm -r,print and recursively remove the alphabetically last directory in the current directory
find -type f -name '*.ext' | grep -vFf list.txt,"display files ending with "".ext"" in current folder excluding those that are present in the list list.txt"
find $HOME -iname '*.ogg' -size +20M,find all *.ogg (case insensitive) files/directories under your home directory that are greater than 20mb in size
shopt compat31,shows status of a shell option 'compat31'.
"yes | awk 'FNR<4 {print >>""file""; close(""file"")}  1' | more","pipe output of ""yes"" to ""more"" and append the first 3 lines to ""file"""
NP=`cat /proc/cpuinfo | grep processor | wc -l`,save number of processors in system to 'np' variable
df -BG,report file systems disk usage in 1gb blocks.
find . -name '*.cgi' -print0 | xargs -0 chmod 755,find all *.cgi files/directories under current directory and change their permission to 755
readlink -f `ls --dereference /proc/$pid/exe`,"find absolute path of command with pid ""$pid"""
echo 'ee' | tee /dev/tty | foo,"write ""ee"" to standard output and as input to command ""foo"""
find -name '*.class' -printf '%h\n' | sort -u,list all unique parent directories of .class files found under the current directory
"find . -type f -name "".*""",find all hidden files in the current directory
apropos -r '^std' | vi -,gets all man entries beginning with std and sends them to vi.
set | cut -d= -f1 | grep X,"list environment variables whose name contains ""x"""
"df -Ph | perl -ne 'chomp; printf ""\n%-40s %8s %8s %8s %8s %-20s"", split / +/, $_, 6 ; '",report file systems disk space usage pretty formatted.
"cat file1 |xargs -I {} dirname ""{}""| sort -u | xargs -I{} mkdir -p ""{}""","make directories for each unique file path in ""file1"""
"find . -name ""*"" -maxdepth 1 -exec mv -t /home/foo2/bulk2 {} +",move all files in the current folder another folder and do not move the files in the sub folder
"find . -type l -exec sh -c 'echo $(readlink -f ""{}"") ""<-- {}""' \; | grep -v ""^$(readlink -f ${PWD})""",find all symbolic links in the current working directory that link to files outside the current working directory
find /home/david -name 'index*',"display all the file in the folder /home/david/ which start with the word ""index"""
"find $DIR -type f -name '*.html' -exec sed -i 's/.*<script type=""text\/javascript"" charset=""utf-8"" src=""file.js""><\/script>.*/<script type=""text\/javascript"" charset=""utf-8"" src=""file2.js""><\/script>/g' {} \;","replace all the mathes to regex '<script type=""text\/javascript"" charset=""utf-8"" src=""file.js""><\/script>.*' with '<script type=""text\/javascript"" charset=""utf-8"" src=""file2.js""><\/script>' in all html files under $dir directory tree modifying the files in-place"
find /home/user/ -cmin 10 -print,find all files in /home/user/ that were created or changed 10 minutes ago
seq 10 | parallel -j4  echo '{}',print numbers from 1 to 10 using up to 4 processes
"find ""$somedir"" -type d -empty -exec cp /my/configfile {} \;",copy /my/configfile to all empty directories of the $somedir directory tree
echo $PATH | awk -F: -f rem_dup.awk | paste -sd:,"print ""$path"" variable as input to awk script ""rem_dup.awk"" and concatenate the result with "":"""
find .  \( -user aa1 - group grp \) -print,search in current directory downwards all files whose owner is aa1 and grop is grp .
alias unsetvar='source /your/path/to/the/script/unsetvar',"set alias ""unsetvar"" for command 'source /your/path/to/the/script/unsetvar'"
lspci -v -v | less,page through extended information about all pci devices on system.
set `od -j $o -N 8 -t u1 $rpm`,"extract 8 bytes as an unsigned integer that is ""$o"" offset into ""$rpm"""
find $(pwd) -name \*.txt -print,recursively prints .txt files in current directory
"awk '{printf ""%s|"", $0} END {printf ""\n""}' inputfile",display inputfile all on one line (replace newlines by spaces)
echo $(basename /foo/bar/stuff),"grab the output of ""basename"" (in this case ""stuff"") and echo it to stdout, which basename would do by default anyway."
find /data/SpoolIn -name job.history,"search for the file job.hostory in the folder ""/data/spoolln"""
find / -name game,find all files that names are game
unset array[$RANDOM%4],unsets random one from first four array members.
find . -path ./dir1\*  -prune -o -print,"list the current directory recursively ignoring the ""dir1"" subdirectory"
"find /path/to/drive -type f -exec file -b '{}' \; -printf '%s\n' | awk -F , 'NR%2 {i=$1} NR%2==0 {a[i]+=$1} END {for (i in a) printf(""%12u %s\n"",a[i],i)}' | sort -nr",create a report of the contents of a usb drive mounted at find /path/to/drive
find . -type d -ctime $FTIME,find all directories whose status were changed $ftime days ago
"mount -v | grep "" on / """,print information of the root mount point
df -kt<type>,report file systems disk usage for file systems of type <type>.
find /mp3collection -name '*.mp3' -size -5000k,search for mp3 files in the folder /mp3collection which are smaller than 5mb
"dig @""127.0.0.1""  _etcd-client._tcp. SRV",print local srv record of domain '_etcd-client._tcp.'
find /tmp/test/* -mtime +1,find all the files that have not been modified in the last 24 hours
find /  -links 2 -print,search  in root ( / ) directory downwards all files which  have exactly 2 links.
alias | grep xlogs,"list all aliases that name contents the string ""xlogs"""
find /home -name filename.txt,"search for the file, filename.txt in the folder /home"
find lpi104-6 research/lpi104-6 -type l,locate symlinks in directory trees lpi104-6 and research/lpi104-6
env -i ./makeall.sh,run .makeall.sh in an empty environment.
find . -type d -empty -delete,delete empty directories
cd -P xyz,"change to directory 'xyz' and resolve any symlinks in the resulting path, making the physical path the current one."
"find . -type f -and -iname ""*.deb"" | xargs -n 1 dpkg -I",find deb packages in the current directory recursively and list them with `dpkg'
"find . -iname "".*"" \! -iname 'list_files'",find all .* files excluding list_files (case insensitive) under current directory
"readlink -f ""$path""","print the absolute path of ""$path"""
kill -HUP $(lsof -t -c sshd),"send sighup signal to all ssh server processes, causing them to re-read the ssh server configuration."
"find . -name ""*.c"" | xargs -n3 echo",list all the .c files under the current directory and below in a 3 column format
set +a,do not mark variables and function which are modified or created for export to the environment of subsequent commands
mount --rbind /sys /var/snmp3/sys,"recursively bind ""/sys"" to ""/var/snmp3/sys"""
"find . -type f|grep -i ""\.jpg$"" |sort",find all the jpg files in current folder and sort them
find / -fstype ext3 -name zsh -ls 2> /dev/null,"find all files whose names do not begin with ""zsh"" on ext3 file systems"
find . -type d -depth,display all the files in the current folder and traverse from the sub directories
cat /var/run/dmesg.boot | grep Features,find strings with 'features' in /var/run/dmesg.boot' file
"find /usr/ports/ -name Makefile\* -mindepth 3 -maxdepth 3 -exec egrep ""NOPORTDOCS|NOPORTEXAMPLES"" '{}' '+' | wc -l",find all files whose names begin with 'makefile' at the /usr/ports directory tree's level 3 and count the number of lines with noportdocs or noportexamples in them.
find -type f -name .git -prune -o -print,"find all files in the current directory tree, except git files"
shopt -s extglob progcomp,enables shell options 'extglob' and 'progcomp'
bg %,sends current job to the background.
find $1/.hg -type d -exec chmod g+s {} \;,find all directories under $1/.hg and set their sgid bit
"find -name ""<filetype>"" -atime -5",find files/directories named<filetype> under current directory which were accessed less than 5 days ago
"find . -iname ""*.mov"" -printf ""%p %f\n"" | while read -a HR ; do echo ffmpeg -i ${HR[0]} -f flv ${HR[1]} ;done",find all *.mov (case insensitive) files under current directory and run an echo command with the path and the name for each file
find / -iname 'process.txt' -print,"search for the file ""process.txt"" in the entire file system (case insensitive search)"
find ~/src -newer main.css,find files newer than main.css in ~/src
find sess_* -mtime +2 -exec rm {} \;,remove sess_* files that were modified more than 2 days ago
find /target/dir -type l ! -exec test -e {} \; -exec rm {} \;,search for all the symbolic links in a folder and delete them
"find ../../$name-module -name 'Name*' -type f -exec bash -c ""mv \""\$1\"" \""\${1/Name/$Name}\"""" -- {} \;",find all name* files under ../../$name-module and rename them by replacing 'name' with $name (will be expanded in the current shell) in their names
find /path/to/dir -type f -exec bzip2 {} \;,recursively finds and compresses all files in the directory '/path/to/dir'
"find . -name ""$1"" -type f -exec grep -i ""$2"" '{}' \;",search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory
find . -name '*tests*' -print -exec false \;,returns unsuccessful exit code on each found file like '*tests*' within current directory.
find ~ -type f -mtime +1825 |xargs -r ls -l,list all regular files in and below the home directory that were modified more than 5 years ago
seq 10 | xargs echo -n,print a space separated list of numbers from 1 to 10 with no trailing new line
"actual_path=$(readlink -f ""${BASH_SOURCE[0]}"")","save the absolute path of the current script to variable ""self"""
find . -print|grep sql|xargs grep -i dba_2pc_pending,"find for the word ""dba_2pc_pending"" in all the files of current fodler having the word ""sql"" in their name"
find / -perm +g=s,find sgid files
ls /usr/bin | more,"list the commands in /usr/bin, pausing for user input after each page."
find /starting/directory -type f -name '*.css' | xargs -ti grep '\.ExampleClass' {},find all *.css files under /starting/directory and print filenames and the lines matching the regex '\.exampleclass' from those files
"find . | awk '{ print ""FILE:"" $0 }'",display all the files in the current folder
find -iregex '.*\.py$\|.*\.xml$' | xargs egrep -niH 'a.search.pattern'  | vi -R -,search the case insensitive regex ''a.search.pattern'' in all python files and all xml files under current directory and pipe the result in a readonly vim session
set +m,disable jobs running in their own process group in the shell
find /path -type f -exec rm '{}' \;,remove all regular files found in and below /path
ssh -O check officefirewall,"check that the master ssh connection ""officefirewall"" is running"
find /var/www,list recursively all files and directories in /var/www
v=$(whoami | tr 'a-z' 'A-Z'),"save the user name in upper case of the current user in variable ""v"""
find . -name *.php -ctime -14,search the current directory tree for php files changed less than 14 days ago
depth=$(pstree -sA $processid | head -n1 | sed -e 's#-+-.*#---foobar#' -e 's#---*#\n#g' -eq | wc -l),"calculates process depth of process with id $processid, and stores it in a 'depth' variable."
"cat $(find src/js -type f -name ""*.js"" -printf ""%d\t%p\n"" | sort -n | sed -e ""s|[0-9]*\t||"")>min.js",display the contents of  all the regular files in a folder in the sorted order of their depth
tar --strip-components 1 -xvf my_directory.tar.gz,extract an archive stripping the first component
find /private/ 2>/dev/null | grep /Flash,find flash videos stored by browsers on a mac
"TMPPS_PREFIX=$(mktemp ""${TMPDIR:-/tmp/}${tempname}.XXXXXX"")","creates temporary file in tmpdir folder or /tmp/ if tmpdir is not defined, named by template ${tempname}.xxxxxx, and saves path to new file in  a tmpps_prefix variable."
find ~/ -name 'core*' -exec rm {} \,find and delete all core files in the user's home directory and below.
"grep ""OK"" <filename> | wc -l",counts number of lines with 'ok' in file 'filename'.
"find . -iname '.#*' -print | while read -r i; do foobar ""$i""; done","find all files matching pattern '.#*' in the current directory tree and execute ""foobar"" for each of them with the file name as an argument"
cat /etc/passwd /etc/group,print content of /etc/passwd and /etc/group files
rename -f 'y/A-Z/a-z/' *,"rename all files in current directory to lowerase, overwriting any existing files."
sudo find . -print0,display all the files in the current folder in a single line separated by null command
find . -name vmware-*.log -print0 | xargs -0 rm,"remove all files with names like ""vmware-*.log"" from the current directory tree"
"find /home/musicuser/Music/ -type f  -iname ""*$1*"" -iname ""*$2*"" -exec mplayer {} \;",find all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/music/ directory and execute mplayer for each of them
find source/directory -ctime -2 | cpio -pvdm /my/dest/directory,create a backup of all the files which have been modified in the last 48 hours
find / -perm 1551,find all the sticky bit set files whose permission are 551
find . -type f -exec stat {} + > /dev/null,display file status for all regular files in the current directory tree
find . -type f | xargs grep 'string_to_find' -sl | xargs perl -pi -w -e 's/string_to_find//g;',delete 'string_to_find' from all files under current directory
find . -mtime 0 | grep -v '^\./en' | grep -v '^\./es' | grep -v .swp,search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*
find /usr/src -name CVS -prune -o -mindepth +6 -print,"find all files in the level 6 subdirecotries of /usr/src and below, ignoring cvs files"
top -c,"monitor process activity, starting with the last remembered ""c"" state reversed: typing ""c"" toggles between using process names or full command lines."
cat -n file_name | sort -uk2 | sort -nk1 | cut -f2-,print only unique lines of 'file_name' file
ssh -i ./middle_id.pem -R 22:localhost:2222 middleuser@middle.example.org,"log in as ""middleuser"" with key ""./middle_id.pem"" and forward port 22 on host ""middle.example.org"" to port 2222 on localhost"
find /nas -type d -ls,display a long listing of all directories under '/nas' directory tree
"echo ""${depsAlastmodified[$i]}"" | tr -cd '[[:digit:]]' | od -c","delete all non digits from index ""$i"" in bash array ""depsalastmodified"" and print the hex dump as characters"
bind -P,print all readline bindings
find . -name '*.java',find all .java files under and below the current directory
find . -name libEGL* | xargs rm -f,remove all libegl* files from the current directory tree
"ps aux | awk '{print $4""\t""$11}' | sort | uniq -c | awk '{print $2"" ""$1"" ""$3}' | sort -nr",print cpu usage and memory usage of all unique processes on a system
find * -maxdepth 0 -type d -print0,print the filenames taken by the glob pattern * with null character as the delimiter
finger $username | awk '/^Directory/ {print $2}',"print the home directory of ""$username"""
"files2 = ""`find ""'""$dirs""'"" -type f`""",find all the regular/normal files in a folder and assign the output to a variable
"cp -rv `ls -A | grep -vE ""dirToExclude|targetDir""` targetDir","recursively copies all files in the current directory but ones that names match pattern ""dirtoexclude|targetdir"" to the 'targetdir' directory, printing info message on each operation."
diff -q /dir1 /dir2|cut -f2 -d' ',print a list of differing files
find . -type d -exec chmod 755 {} +,change permissions of all directories from the current directory tree to 644
su - jetty ./runprogram.sh,"run script ""runprogram.sh"" as user jetty"
"bind -p | grep $'""\x61""'","check readline bindings for ""\x61"""
echo foo | tee >(sha1sum) >(md5sum),"calculate the sha1 sum and md5 sum of ""foo"""
env | sed 's/;/\\;/g',"list environment variables and their values, escaping all semicolons with a backslash."
find . -name core -ok rm {} \;,"same as above example with -exec , in this example with -ok it should ask for confirmation before executing the rm command . that is called user intractive command"
find . -size +100M -exec ls -s {} \;,display the files along with the size of all the files in the current which are bigger than 100mb
find / -type f -perm 0777 -print -exec chmod 644 {} \;,find all 777 permission files and use chmod command to set permissions to 644
find /usr/ports/ -name Makefile\* -exec grep -l QMAKESPEC '{}' '+' | wc -l,find all files whose names begin with 'makefile' in the /usr/ports directory tree and count how many of them contain 'qmakespec'
find . -name modules,find all files/directories named modules under current directory
"echo ""hey hey, we're the monkees"" | (exec 1>&3 && tee /proc/self/fd/3 | gzip --stdout > my_log.gz)","write ""hey hey, we're the monkees"" to standard output and as input to to ""gzip --stdout"" saved to ""my_log.gz"" without writing to disk"
column -x -c 30 /tmp/file,"display ""/tmp/file"" as a table of width 30 with columns filled before rows"
"find . -not \( -name .svn -prune -o -name .git -prune -o -name CVS -prune \) -type f -print0 | xargs -0 file -n | grep -v binary | cut -d "":"" -f1","find files in the current directory excluding cvs, svn, git repository files and all binary files."
split -l5000000 data.tsv '_tmp';,"split ""data.tsv"" into files of at most 5000000 lines each with prefix ""_tmp"""
tree -p -u -g -f,"display permissions, user, group, and full path for each file in the current directory tree"
"egrep -w -R ""word-1|word-2” directory-path","recursively finds strings with the whole word 'word-1' or 'word-2' in any file under 'directory-path', following symlinks, and prints found strings."
ssh -F vagrant-ssh default,"use ""vagrant-ssh"" as the config file and ssh into ""default"" host"
"find /path/to/dir/* -printf ""%T@|%p|%l"" -exec stat -Lc ""|%Y.0000000000"" {} \;",find all files/directories under /path/to/dir/* paths and print the timestamp along with their paths and stat them
find /home/www/ -type f -exec sed -i 's/subdomainA\.example.com/subdomainB.example.com/g' {} +,"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under /home/www and below"
find ~ -name readme.txt,find all readme.txt files/directories under your home directory
"ln -s ""$dir"" ""$1/link""","create a symbolic lnk named ""$1/link"" to ""$dir"""
"find ./C -name ""*.c"" | xargs -n1  cp xyz.c",copy a file xyz.c to all the .c files present in the c directory and below
"find -name ""*.flac"" -exec bash -c 'ffmpeg -i ""{}"" -y -acodec libmp3lame -ab 128k ""${0/.flac}.mp3""' {} \;","find all the "".flac"" files in the current folder and create a sub shell and convert these to mp3 with 128k bit rate"
"PROMPT_COMMAND='LAST=""`cat /tmp/x`""; exec >/dev/tty; exec > >(tee /tmp/x)'","set the bash environmental variable ""prompt_command"" to save the output of the last executed command to variable ""last"" and file '/tmp/x"""
"find . -name '*.txt' -exec echo ""{}"" \;",list all *.txt files/directories under current directory
find . -exec sh -c 'echo {} | grep -qi /path/to/something' \; -print,find files/directories under current directory that matches the regex '/path/to/something'  in their paths
find ~/ -atime +100 -exec rm -i {} ;,"remove the files from the home directory tree that were last accessed more than 100 days ago, with confirmation"
cat file | xargs -n3,"print 'file' file, splitting lines into pieces with no more that 3 words in each one."
"mv ""/tmp/`basename $1`"" ""`dirname $2`""",moves the file that named like file $1 from '/tmp' folder to the folder where $2 file is located.
"printf %100s |tr "" "" ""=""",print a line of 100 '=' characters
"find / -name ""*.txt"" -size +12000c",find .txt files on the system whose size is greater than 12000 bytes
"find . -name ""*.html"" -print | xargs -l -i wc {}",display the count of number html files in the current folder
echo Hostname=$(hostname) LastChecked=$(date),output the system host name and date to the console
chmod +x $(brew --prefix)/etc/bash_completion,adds execution permissions on a script ./etc/bash_completion within homebrew home folder path.
find -type d -empty,delete all empty directories under current directory
"find . -type f -printf ""%C@ %p\n"" | sort -r | head -n 10","find all file paths under current directory, perform a reverse sort and show first 10 file paths with their status change time"
chown root:specialusers dir1,"change the owner to ""root"" and group to ""specialusers"" of ""dir1"""
find /git/our_repos -type d -exec chmod g+s {} +,"set the setgid bit on all directories in the repository ""/git/our_repos"""
find $PWD -type f -exec ln -st $tmpdir {} +,"create a symbolic link in target directory ""$tmpdir"" for each file under the current directory"
ping -c 1 $remote_machine,"send one ping request to host whose name or ip address is specified by variable ""remote_machine""."
"find . ! -name ""*.txt""",display all files in current folder excluding text files
"find . -name ""*.trc"" -ctime +3 -exec rm {} \;","search the current directory tree for the files with extension ""trc"" and remove them if they are more than three days old"
mkdir -p /tmp/test/blah/oops/something,create intermediate directories as required and directory /tmp/test/blah/oops/something
history | tail -10,print the last 10 commands in history
"find . -type d -print0 | xargs -0 -I {} sh -c ' echo ""{}: \c"" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print'",find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file/directory paths
find . -maxdepth 1 -type f | xargs -x ls -t | awk 'NR>5' | xargs -L1 rm,"removes all files from current folder but 5 newest ones, ignoring folders in a files list."
cat -v -e filename,"print content of 'filename' file, showing all non-printing characters and displaying $ at the end of each line."
"awk -F, 'BEGIN {OFS = "",""} {gsub(""-([0-9.]+)"", ""("" substr($3, 2) "")"", $3); print}' inputfile",replace all negative numbers in the 3rd comma-separated column of inputfile by the number notated in parenthesis instead of with a minus sign.
fold -1 /home/cscape/Desktop/file  | awk -f x.awk,"send each byte in ""/home/cscape/desktop/file"" to awk script ""x.awk"""
"find /home/username/ -name ""*.err""",find all files/directories with '.err' extension under '/home/username' directory tree
screen -x screen id,reconnect to a named screen session
tac INPUTFILE | sed '/^Statistics |/q' | tac,print lines from last match of ^statistics until end of file
find . -type f -exec chmod 644 {} +,change permissions of all regular files from the current directory tree to 644
"find /etc -name ""*.conf"" -printf ""%f accessed %AF %Ar, modified %TF %Tr\n""","display all the configuration files in ""/etc"" folder along with their last access and modified timestamps"
tr -s '\t' < thefile.txt | tr '\t' ' ' > the_modified_copy.txt,"replace sequential tabs with a single space in ""thefile.txt"" and write to ""the_modified_copy.txt"""
"tac file | awk '/a/ && !seen {sub(/a/, ""c""); seen=1} 1' | tac",replaces the last occurrence of 'a' with 'c' in file
mkdir foo,"make directory ""foo"""
"find -name ""*.cpp""",find all the cpp files in current folder
"find . -type f -name ""*.scala"" -exec grep -B5 -A10 'null' {} \;",search for all scala files under the current directory that contain the string null
find lpi104-6 -inum 1988884,search directory lpi104-6 for files with inode number 1988884
cal -3,"displays calendar for a previous, current and next month."
find . -type d -name 'test' -exec rm -rf {} \;,find all 'test' directories in the current directory tree and remove them
find $HOME -type f | samefile -r,find all identical files in the home directory and subdirectories and tell if there are hard links
"find . -not -name ""*.pl""",display all the files  in the current folder excluding the perl files
"alias rm2g=""find / -type f -name *.tar -size +2G -exec rm -i {} \;""",assign the alias rm2g to a find command that removes any .tar file larger than 2 gigabytes.
sudo vim `which charm`,"open ""charm"" executable file in vim"
"echo ""$opt"" | tr -d '""'","print variable ""$opt"" with double quotes deleted"
sed -i.bak '/pattern to match/d' ./infile,"delete all lines matching ""pattern to match"" in ""./infile"" and make a backup with suffix "".bak"""
find . -lname /path/to/foo.txt,find all links pointing to /path/to/foo.txt
find /your/dir -type f -size +5M -exec du -h '{}' + | sort -hr,find all the regular files under '/your/dir' directory tree which are bigger than 5 mb and display them in decreasing order of their sizes
ln -sfn newDir currentDir,"force create a symbolic link named ""currentdir"" to ""newdir"" without dereferencing ""currentdir"""
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan""  -printf '%T@ %p\n' | sort -k 1 -n | sed 's/^[^ ]* //'",list all files in entire file system that are newer than the file $newerthan and older than the file $olderthan and sort them according to file modification time
readlink -m FILE,"resolve symbolic link of file ""file"" even if the file does not exist"
ping -W 1 -c 1 10.0.0.$i | grep 'from' &,"send one ping request to host with local address in the 10.0.0.x range, with last number specified by variable ""i"", waiting 1 second for a reply, and output only lines containing ""from"" to standard output."
rsync -r username@computer:/path/to/source /path/to/dest,"copy '/path/to/source' from remote ""username@computer"" to local ""/path/to/dest"""
find -type f -printf '%T+ %p\n' | sort | head -n 1,find the oldest normal file in the current directory
yum -y update,updates all packages in system  answering 'yes' on all questions.
mktemp -d -t,creates temporary folder in /tmp/ (by default) with 10-letter suffux.
"find /home/jassi/ -name ""aliencoders.[0-9]+"" 2>&1 | xargs ls -lrt | awk '{print $9}'",list all aliencoders.[0-9]+ files/directories under /home/jassi/ directory
"source <(wget -q -O - ""http://www.modulesgarden.com/manage/dl.php?type=d&id=676"")","fetch a script from the web and interpert (run) it in the current shell, without writing the script to disk."
"find ~/mail -type f | xargs grep ""Linux""","find all regular files in the the user's home/mail directory and search for the word ""linux""."
"sshpass -p ""YOUR_PASSWORD"" ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM","automatically log into ""some_site.com"" as user ""your_username"" using password ""your_password"""
rev file.txt | cut -d/ -f1 | rev,display the last slash-separated part of each filename path in file.txt
find -iname *.SH,"find all the "".sh"" files in the current folder ( case insensitive search)"
screen -D -m yourEvilProgram,catch output from a script printing to /dev/tty
"for file in *.html; do mv ""$file"" ""${file%.html}.txt""; done","rename all .html files to .txt (change filetype suffix) in a portable way without requiring the ""rename"" perl script."
find . -name '*.wav' -maxdepth 1,find all the wav files in the current folder and do not search in the sub directories
"find . -type f -newer ""$FILE""",display all the regular/normal files in the current folder which are modified after a file
find . -name foo -type d -prune -o -name foo,find all files/directories named 'foo' under current directory tree without descending into directories named 'foo'
find . \( -type d -regex '^.*/\.\(git\|svn\)$' -prune -false \) -o -type f -print0,find all regular files in the current directory tree ignoring git and svn directories
find . -type f -exec basename {} \; | wc -l,count the number of directories in the current directory and below
file -i filename,"display the mimetype of ""filename"""
find . -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec test -x {} \; -print,search the current directory tree for files executable by at least someone
find -name *.undo -print0 | du -hc --files0-from=-,display the sizes and filepaths of all files/directories with '.undo' extension under current directory tree
find /home -type f -print0 | xargs -0 file,find the type & description of all the regular/normal files in the home folder
find . -name '*.php' | xargs cat | awk '/[a-zA-Z0-9]/ {i++} END{print i}',counts total number of only lines with alphanumeric symbols in all *.php files in a current folder and subfolders.
"split -l 100 ""$SOURCE_FILE""","split ""$source_file"" into files of at most 100 lines each"
find DIR \( -name 2015\* -a \( -name \*album\* -o -name \*picture\* \) \) -delete,"delete files in the dir directory tree whose names begin with ""2015"" and contain ""album"" or ""picture"""
"find ""$SEARCH_PATH"" -name 'pattern' | rev | cut -d'/' -f3- | rev",get the grandparent directory of each found 'pattern' file in $search_path
find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} `;`,delete all empty directories and directories that contain only empty directories under current directory
sort $tmp | grep -v ':0'  #... handle as required,sorts content of the $tmp file and filters out all strings with ':0'.
"find . -name ""*:*""",display all the files  in the current folder which have colon in their name
find -name '*macs',"find all files whose names end with ""macs"" in and below the current directory"
"echo ""Australia/Adelaide"" | sudo tee /etc/timezone","write ""australia/adelaide"" to standard output and to ""/etc/timezone"""
find . -perm 664,find all files and directories with permissions 664
find . -name \*.jpg -exec basename {} \; | uniq -u,find all *.jpg files under current directory and print only unique names
find / -size +1.1G,search for files that are at least 1.1gb
"find . -type f -name ""*.gz"" -exec zgrep 'string' {} \;",search for a string in all gzip'd files under the current directory
"rsync -avz --progress local/path/some_file usr@server.com:""/some/path/""","archive ""/local/path/some_file"" to ""/some/path"" on host ""server.com"" authenticating as user ""usr"", compress data during transmission, show progress details."
find /home/david -mtime -2 -name '*.c',"find all the "".c"" files in the folder /home/david which have been modified in the last 48 hours"
getent passwd `whoami` | cut -d : -f 5,print the current user's real name
mount -n -o remount /,"remount ""/"" without writing in ""/etc/mtab"""
du -s * | sort -n,list each file or directory in the current directory prefixed with its filesize in bytes and sorted from smallest to largest
"find . -type f -name ""*.txt"" -exec sed -n 's/Linux/Linux-Unix/gpw output' thegeekstuff.txt",find & write changes to a file and print the changes using sed s//gpw
"bind -p|grep -i '""[pE]""'","print bindings for ""p"" and ""e"" with no case sensitivity"
ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/,"create a symolic link in ""/usr/local/bin/"" to ""/applications/sublime\ text\ 2.app/contents/sharedsupport/bin/subl"""
tac $FILE | grep -m 1 '.',prints the last non-empty line of a file
time sleep 1,reports time consumed by command 'sleep 1'.
find /directory/containing/files -type f -exec grep -H 'pattern_to_search' {} +,search for the regex 'pattern_to_search' in all files under '/directory/containing/files' and show the matched lines as well as the file names
fn=$(mktemp -u -t 'XXXXXX'),"generates name for temporary file with 6-letter suffix, and saves path to that new file in 'fn' variable."
find . -name '*.log' -mtime -2 -exec grep -Hc Exception {} \; | grep -v :0$,"find all *.log files under current directory that contain the string ""exception"""
~/bin/find /non-existent/directory -name '*.plist' -print,find all files/directories under /non-existent/directory directory with ~/bin/find
cat text.txt | tr -s ' ' | cut -d ' ' -f 4,replace any sequence of spaces in file 'text.txt' with single space and print 4th space separated field
"echo $(date) ""1"" | tee -a log.csv","write the current date and time followed by "" 1"" to the console and append to ""log.csv"""
paste -sd: INPUT.txt,"replace each new line in ""input.txt"" with "":"""
find . -type d -maxdepth 1,find all directories in current directory without going into sub-directories
"find . -name '*.zip' -exec sh -c 'unzip -d ""`dirname \""{}\""`"" ""{}""' ';'",find all *.zip files under current directory and unzip them in the same directory as the files
sudo ln -f -s $javaUsrLib/jdk1*/bin/* /usr/bin/,"force create a symbolic link in ""/usr/bin/"" for each file matching ""$javausrlib/jdk1*/bin/*"""
ls -ld /tmp /tnt | sed 's/^.*$/<-- & --->/',"prints long listing of directories '/tmp', '/tnt' themselves bordered with '<--' and '--->'."
"find \( -name 'messages.*' ! -path ""*/.svn/*"" ! -path ""*/CVS/*"" \) -exec grep -Iw uint {} +","search the current directory for files whose names start with ""messages."" ignoring svn and cvs files"
find .-type f -user root -exec chown tom {} \;,"change the owner of all the regular/normal files which belong to the root user to ""tom"" in the current folder"
find /dir/containing/unsigned -name '*.pdf' -print0,find all pdf files under /dir/containing/unsigned with null character as the delimiter
echo dir1 dir2 dir3 | xargs -n 1 cp file1,"copies file 'file1' to each of directories 'dir1', 'dir2', 'dir3'."
find . -type f -print0 | xargs -0 -n1 -P4 bzip2,recursively finds and compresses all files in a current folder with 4 parallel processes.
find -uid 1000,find all files of the user with uid=1000
find . /home/admin/public_html/ -type f -exec chmod 644 {} \;,"find all regular files under and below /home/admin/public_html/, and change their permissions to 644"
find ./ -mmin +1,find files whose content was modified at least 1 minute ago
"echo hello world | tee  >(awk '{print $2, $1}')","print the input ""hello world"" followed by a swap of the first two awk fields"
find /directory1/directory2/ -maxdepth 1 -type f | sort | tail -n 5 | xargs md5sum,md5sum the last 5 files in /directory1/directory2/
find ./ -iname blah,find files/directories named blah (case insensitive) under current directory
rev file,print content of 'file' file reverted characterwise
find /home/username/public_html/sites/all/themes -type d -exec chmod 750 {} +,find all directories under /home/username/public_html/sites/all/themes and set their permission to 750
find . -name myletter.doc -print,"search in the current folder for the file ""myletter.doc"""
find -name '*.jpg' | sort -n,print a sorted list of all .jpg files in the current directory and below
find -type f -mtime -60,list all regular files from the current directory tree that were modified less than 60 days ago
version=$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version | egrep -v '^\[|Downloading:' | tr -d ' \n' | sed -E 's/\[.*\]//g'),"save maven project version to variable ""version"""
"find . -not -path '*/\.*' -type f \( ! -iname "".*"" \)",find all regular non-hidden files in the current directory and its subdirectories
sudo su -,get the root access
wc -l $(git ls-files),counts the number of lines in each file in a git repository.
history | vim -R -,"view history using ""vim"" in read only mode"
find . -name '*.*' -exec grep 'SearchString' {} /dev/null \;,"search all files in the current directory tree whose names contain ""."" for ""searchstring"""
"removestr=$(echo ""$list"" | tr "":"" ""\n"" | grep -m 1 ""^$removepat\$"")","replace all colons (':') with newlines in $list and search for the first match to the regex ""^$removepat\$"" where $removepat is a variable and save the result to variable 'removestr'"
mv wordpress/.* .,"move all hidden files in ""wordpress"" to the current directory"
rm -rf *,remove everything in a current folder without prompting.
find -type f  |  grep -P '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs rm,remove regular files whose names match perl regular expression '\w+-\d+x\d+\.\w+$' from the current directory tree
find / -name findme.txt -type f -print,find all the findme.txt files in the file system
"find -name ""filename""","find all files named ""filename"""
find . -name \*.c -print | xargs grep wait_event_interruptible /dev/null,"find all *.c files under and below the current directory that contain ""wait_event_interruptible"""
"find ./music -name ""*.mp3"" -print0 | xargs -0 ls","find all the .mp3 files in the music folder and pass to the ls command, -print0 is required if any filenames contain whitespace"
"find dir -name ""pattern"" 2>/dev/null","find recursively all files that match ""pattern"" starting from the directory ""dir"""
"paste -d: <(grep '<th>' mycode.html | sed -e 's,</*th>,,g') <(grep '<td>' mycode.html | sed -e 's,</*td>,,g')","extract data from html table in ""mycode.html"""
find -type d exec chmod 775 {} +,find all directories under current directory and set their permission to 775
mv file0001.txt 1.txt,"rename ""file0001.txt"" to ""1.txt"""
ls | more,"list current directory, waiting for user input at each page."
find /home/user/Series/ -iname '*sample*' -exec rm {} \;,remove all files containing 'sample' (case insensitive) in their names under '/home/user/series' directory tree
"AMV=$(mount -l | grep ""\[$VLABEL\]"")","check if ""\[$vlabel\]"" is mounted and save the result in variable ""amv"""
sort -m a b c d e f g h i j | more,"merge 10 already sorted files and display the result, pausing at each page of output."
"find . -type f -name ""*.sh"" -exec grep -il landoflinux {} \;",search for a word in all the shell scripts in the current folder and display the matched files.(case insensitive search in grep commad)
"find kat -type f \( -name ""*.c"" -o -name ""*.cpp"" -o -name ""*.h"" \)","display all the c, cpp, header files in the kat folder"
find . -name \*.php -type f -print0 | xargs -0 -n1 grep -Hn '$test' | wc -l,search for a word in all the php files in the current folder and display the count of all matching lines.
"find ""$searchpath"" -name ""$filepat.[ch]"" -exec grep --color -aHn ""$greppattern"" {} \;","search for the regex $greppattern in all files with '.c' or '.h' extension under $searchpath with name pattern $filepat and show the matched line numbers, file names and matched lines"
find -L /home/peter -name *~ |xargs rm,"find all files whose names end with ""~"" in the /home/peter directory tree, following symlinks, and delete them"
find . -print0,find all files/directories under current directory with null character as the delimiter
find /usr/spool/uucp -type d -print,find directories in the folder /usr/spool/uucp
"read -p ""$1 "" yn","read a line from standard input into the variable ""yn"" using the first argument as the prompt (""$1 "")"
ssh -n $R_USER@$R_HOST 'touch /home/user/file_name.txt',"prevent ssh from reading from standard input and execute ""touch /home/user/file_name.txt"" on ""$r_host"" as ""$r_user"""
echo I am $(whoami) and the program named ls is in $(which ls).,"print ""i am user and the program named ls is in ls_path"" where ""user"" is the current user's user name and ""ls_path"" is the full path of the command ""ls"""
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs    rm,remove all *.mp3 files in tmp directory but not in it's subdirectories
find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ';',remove safely all *.bak and *.backup files that were accessed last time more than 30 days ago
"find / -type f -exec grep -l ""text-to-find-here"" {} \;","recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, ignoring binary files."
rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination,"copy ""source"" recursively to ""destination"" excluding ""path1/to/exclude"" and ""path2/to/exclude"""
"count=$(grep -c ^ < ""$FILE"")",counts lines in file $file.
env | grep '^\(GOBIN\|PATH=\)',list all environment variables (name and value) whose name either equals path or starts with gobin
cat Little_Commas.TXT,"print the contents of ""little_commas.txt"""
"tree -if | grep \\.[ch]\\b | xargs -n 1 grep -nH ""#include""","find "".c"" and "".h"" files in the current directory tree and print line numbers and lines containing ""#include"""
"find . -name ""*.txt"" | sed ""s/\.txt$//"" | xargs -i echo mv {}.txt {}.bak | sh",change the file extension from '.txt' to '.bak' for all files/directories under current directory tree
mkdir testExpress,"make directory ""testexpress"""
echo $(yes image.png | head -n10),"repeat ""image.png"" 10 times on a single line"
find . -type f -perm 755 -exec chmod 644 {} \;,change permissions to 644 of multiple regular files with permissions 755
nl -nrz -w10 -s\; input | sed -E 's/55//; s/([0-9]{2})-([0-9]{2})-([0-9]{4})/\3\2\1/',"removes 55, adds a 10-digit line number, and rearranges the date for each line in ""input"" on osx"
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs dirname",finds binaries names in a list of running processes and prints containing folder of each binary.
source <(./generate_commands),"execute ""generate_commands"" and run the resulting commands in the current shell."
"find . -name .git -prune -o type f -name ""*$lower1*"" -exec mmv ""*$lower1*"" ""#1$lower2#2"" {} +",rename all *$lower1* files under current directory without descending into .git directory by replacing the first occurrence of $lower1 with $lower2 in their paths
find ./ -type d -name 'D'|sed 's/D$//',"find all directories named ""d"" in the current directory tree and print their parents"
"find . -type f -exec stat -f ""%z %N"" {} \;","find all files and directories under the current directory and display the filesize followed by the filename, using the stat command on freebsd/osx"
v=$(whoami | awk '{print toupper($0)}'),"save the user name in all capitals of the current user to variable ""v"""
"find . -type d | sort | awk '$0 !~ last ""/"" {print last} {last=$0} END {print last}'",list all leaf directories of the current directory tree
"find /etc/ -iname ""*"" -type f -print0 | xargs -0 grep -H ""nameserver""","search for the word ""nameserver"" in all the regular/normal files in the /etc directory and display the name of the file along with the matched line"
tr '.' ' ' | sort -nu -t ' ' -k 1 -k 2 -k 3 -k 4 | tr ' ' '.',"numerically sort ipv4 addresses specified on standard input with presedence to first, second, third, then fourth octet"
find / -perm +6000 -type f -exec ls -ld {} \; > setuid.txt &,find all suid and sgid files on the system and save the list of them to `setuid.txt'
find /etc -exec grep '[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*' {} \;,find all ip addresses in /etc directory files
"awk -f script.awk file.txt{,} | column -t","execute awk script ""script.awk"" with 2 arguments both ""file.txt"" and format the output as a table"
cat foo.md | pandoc -f markdown_github | lynx -stdin,"convert the contents of ""foo.md"" to github style markdown and display with ""lynx"""
find /home/user1 -name \*.bin,search user1's home directory tree for *.bin files
find . -type f -print0 | xargs -0 ./group.sed --separate,apply script ./group.sed with option --separate to all regular files of the current directory tree
find /path -name 'pattern' -exec somecommand {} +,run somecommand with as many arguments as fit on the command line at once for files recursively in /path that match 'pattern'
"printf """" | ssh-keygen -b 1024 -f ball -t dsa",pipe an empty line to ssh-keygen.
"find . -name ""*.csv"" -print",locate all *.csv files under the current directory tree
find . -type d -maxdepth 1 -empty -delete,find all empty directories in the current one and delete them
"ssh USER@REMOTE ""cat file""|xclip -i","copy ""file"" from ""remote"" into local clipboard"
join -t: <(sort file1) <(sort file2),merge colon-separated information from file1 and file2 where first field of both files matches
sudo chown -R :laravel ./bootstrap/cache,"recursively change the group ownership to ""laravel"" in ""./bootstrap/cache"""
find -mtime -1,find all files under current directory that were modified less than 1 day ago
"who | awk '{ print $1, $2 }'",print all user names and terminals of users who are logged in
USERS=$(w | awk '/\/X/ {print $1}'),finds users with x session in system and puts the result in users variable.
find . \( -name '*jsp' -o -name '*java' \) -type f -ls,list all *jsp and *java regular files found in the current directory tree
cd B && find . >> ../tmp.txt,"change the current working directory to ""b"" and display all the files in that folder and append the output to the file ""tmp.txt"""
"find [directory] -name ""pattern_to_exclude"" -prune -o -name ""another_pattern_to_exclude"" -prune -o -name ""pattern_to_INCLUDE"" -print0 | xargs -0 -I FILENAME grep -IR ""pattern"" FILENAME","find files under [directory] that match 'pattern_to_include' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files"
find . -type f -name 'IMAGE1806.jpg' -delete,delete all regular files named 'image1806.jpg' under current directory tree
find . -name '*.mp3' -exec cp -a {} /path/to/copy/stuff/to \;,copy all the mp3 files from current folder to another folder
"find /home -name ""*.txt"" -size -100k",find all files/directories with '.txt' extension that are less than 100 kb in size under '/home' directory tree
find /folder/of/stuff -type f | sort,print a sorted list of regular files from directory tree /folder/of/stuff
"gzip ""{}""",compress a file named '{}' in the current directory
"find . ... -exec sh -c 'printf ""%s\n"" ""$1""; kill ""$PPID""' sh {} \;",find the first file/directory under current directory and quit
foo=$(cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1),"save a line of 100 random characters either ""."" or "" "" in variable ""foo"""
whoami=$(whoami),"save the user name of the current user to variable ""whoami"""
find / -fstype ext3 -name zsh -ls,search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.
df -H --total /,print file system disk space usage and grand total for the root file system with sizes in powers of 1000
find /data/images -type f -newer /tmp/start -not -newer /tmp/end,search for all the files in the folder /data/images which have been modified after /tmp/start and before /tmp/end
"find . -type d -ls | awk '{print $4 - 2, $NF}' | sort -rn | head","display the number of sub-directories for all directories under current directory tree, sort them according to the decreasing order of the number and show only the first 10 of them"
"[[ ! -z `find 'Dir/' -name 'something'` ]] && echo ""found"" || echo ""not found""",test if files named 'something' were found in dir/
crontab -l | grep 'word',"list all cron jobs which contain ""word""."
"find . -regex "".*/my.*p.$"" -a -not -regex "".*test.*""","search the current directory tree for files whose names begin with ""my"" and end with ""p"" followed by any character, ignoring path names containing ""test"""
"find `pwd` -name ""file.ext"" -exec echo $(dirname {}) \;",find all file.ext files/directories under present working directory and print . for each of them
find . -type f -name '*.txt' -exec egrep pattern {} /dev/null \;,find all *.txt files under current directory that contains the regex 'pattern' and list them with their filenames and matches
find . | grep -v '(dll|exe)$',"search the current directory tree for files and directories whose names do not end in ""exe"" and ""dll"""
find -daystart -mtime 2,find al the files that are modified exactly 2 days ago
find -maxdepth 1 -type f -daystart -mtime -1,find all files in maximum 1 level down the current directory that were modified less than 1 day ago from today
"find .  -name ""*.groovy"" -not -path ""./target/*"" -print","find the .groovy files outside the ""./target"" directory path"
tree -p,print the current directory tree with file permissions
"find \( -name ""*.htm"" -o -name ""*.html"" \) -a -ctime -30 -exec ln {} /var/www/obsolete \;",create a link to all the html or htm files in the current folder which have been changed in the last 30*24 hours
find . -name 'myletter*' -print,"search in the current folder for the files that begin with ""myletter"""
cut -d: -f1 /etc/group | sort,"extract, sort and print only group names from /etc/group."
touch -t 200510071138 old_file.dat,set timestamp of old_file.dat to specified timestamp.
do=$(cal -m $mo $yo|awk 'NR>2&&!/^  /{print$1;exit}'),saves date of the first sunday in month $mo of year $yo in the 'do' variable.
[[ $(find /path/to/file -type f -size +51200c 2>/dev/null) ]] && echo true || echo false,check if /path/to/file exists and has a size greater than 25600kb
"find . -name ""filename including space"" -print0 | tee my_teed_file | xargs -0 ls -aldF > log.txt","search for all the files in the current folder which have spaces, save the output of a file and save the long listing of these files to a log file"
"cal -h | sed ""s/\<$(date +%d)\>/""$'\033\[94m&\033\[0m/g'",highlights current day in a month calendar with color.
rav=$(echo $var | rev),set variable 'rav' to the contents of 'var' spelled backwards.
find ~ -name game,find files in home directory that names are game
"find foldername -type f -exec chmod 644 {} "";""",set permissions for files in `foldername' and its subdirectories to 644
"find . -name ""*1"" -exec grep ""1"" {} +","search all files in the current directory tree whose names end in ""1"" for string ""1"""
"echo ""$FILE"" | cut -d'.' -f2",print file extension assuming there is only one dot in the file name.
find ./ -newermt 2014-08-25 ! -newermt 2014-08-26 -print,find all the files/directories in the current directory tree which have been modified between 2014-08-25 and 2014-08-26
find FOLDER1 -type f -print0,display all the normal/regular files in the directory folder1
"find . -name ""openssl"" 2>&1 | sed '/Permission denied/d;'",find all instances of a specific file in the current directory and discard all the errors and remove all permission denied statements from search results
"ifconfig $(netstat -rn | grep -E ""^default|^0.0.0.0"" | head -1 | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | grep -Eo '([0-9]*\.){3}[0-9]*'",gets ip address of only primary network interface.
dig TXT +short o-o.myaddr.l.google.com @8.8.8.8,print short txt record of domain o-o.myaddr.l.google.com from nameserver 8.8.8.8
"find . -name ""accepted_hits.bam""","search the current directory tree for files named ""accepted_hits.bam"""
file */*.php | grep UTF,"show filename and filetype description of all php files in all directories contained in current directory whose name or filetype description includes ""utf"""
tar cvf - `find . -print` > backup.tar,create a tar ball of all the files in the current folder
find ./ -type f -name '*.html' | xargs sed -i '/^$/d,search all html files in the current folder and remove all the empty lines
ls -d !(*@(.c|.h)),lists all content in a current folder but names like *.c and *.h.
alias la='ls -a -l',"set alias ""ls"" for command 'ls -a -l'"
abspath=$(readlink -e $path),"save absolute path of ""$path"" that must exist along with all parents to variable ""abspath"""
"LBUFFER+=""$(date)""",append the current date to variable 'lbuffer'
find . \( -user aa1 -o -name myfile \) -print,search  in current directory downwards all files whose owner is aa1 or whose name is myfile .
./series.bc | tr -d '\n' | sed 's.\\..g',"remove newlines from the output of ""./series.bc"" and pipe into ""sed 's.\\..g'"""
"find . -type f -name ""*.php"" ! -perm 644",display all the php files in the current folder which do not have the permission 644
"find . -name ""file2015-0*"" | head -400 | xargs -I filename mv  filename","search for all the files in current folder which start with ""file2015-0"" and move them to frst 400 fiiles  to another folder"
"find /eserver6/share/system/config/cluster -name ""orm.properties""",find all files/directories named orm.properties under  /eserver6/share/system/config/cluster directory
join -t: selection2.txt selection1.txt,"output all lines that have a common first colon-separated field in files 'selection2.txt' and 'selection1.txt' by displaying the common (first) field of each line, followed by the extra fields in both lines."
comm -1 -3 file1 file2,print only strings from file 'file2' that not found in 'file1'
echo $(false; echo foo),terminates shell before 'echo foo' if 'set -e' was applied and shell behavior matches the posix standart.
diff <(sort $def.out) <(sort $def-new.out),"sort and compare files ""$def.out"" and ""$def-new.out"""
tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac,replaces the last occurrence of 'a' with 'c' in file
"find . -type f|grep -i ""\.jpg$"" |sort| tee file_list.txt","find all regular files with '.jpg' (case insensitive) extension, sort them by name, print the output  and also save the list to file 'file_list.txt'"
"history | sed ""s/  / $UID /""","replace ""  "" with "" $uid "" in the output of ""history"""
unset DUALCASE,unsets dualcase variable.
cal | sed -e 's/^.\{3\}//' -e 's/^\(.\{15\}\).\{3\}$/\1/',prints calendar for a current month without first day of a week.
cat /dev/urandom | LC_ALL=C tr -dc 'a-zA-Z0-9' | fold -w 24 | head -n 1,"print the first 24 alphanumeric characters from ""/dev/urandom"", determining c locale for all categories"
find . -size +10M -size -50M -print,search the current directory recursively for files whose size is between 10 and 50 mb
"grep -ar -e . --include=""*.py"" /your/dir | md5sum | cut -c-32","calculate the md5 sum of all "".py"" files in ""/your/dir"" including content and filenames"
"find / -name ""*conf"" -mtime 7","find all the files in the entire file system that have been modified exactly 7 days before which end with ""conf"""
find $DIR -type f -exec grep $SEARCH /dev/null {} \; | wc --bytes,search for $search in all regular files under $dir directory tree and display the number of bytes of the matched output
find . -type f -atime 1,find all the files in the current folder which have been accessed in the last 24 hours
tail -1 <(sort set),"print the last line of the alphabetically sorted lines in file ""set"""
chown `stat -c %U originalfile`:`stat -c %G originalfile` newfile,"copy the owner and group of ""originalfile"" to ""newfile"""
find . -name '*.png' | grep -f <(sed s?^?/[0-9]_[0-9]_[0-9]_? search.txt),"find all the png files in current folder which are present in the pattern list file ""search.txt"""
"find "".performance_test"" -not \( -path "".performance_test/prune_me"" -prune \) -exec bash -c 'echo ""$0""' {} \;",list all files under .performance_test directory except .performance_test/prune_me directory
find sourceDir -mindepth 1 -maxdepth 1 -print0 | xargs -0 mv --target-directory=destDir,move all files from the `sourcedir' directory to the `destdir' directory
"md5sum ""$ecriv""",calculate md5 sum of file $ecriv
find . -mtime +90 -type f -exec rm -f {} \;,find all the files in the current folder which have not been modified in the last 90 days and force delete them
"twofish=`echo -n $twofish | md5sum | tr -d ""  -""`",save the md5 sum of $twofish to variable 'twofish'
cat `which java` | file -,"print file type information of the ""java"" executable"
sort <(ls one) <(ls two) | uniq -d,"list files in directory ""one"" that exist in directory ""two"""
chown user_name folder,"change owner of ""folder"" to ""user_name"""
"find \! -name ""query_to_avoid""",find all files/directories not with the name 'query_to_avoid' under current directory
shopt -s cmdhist,enables shell option 'cmdhist'.
"find . -mtime -1 -type f -print0 | xargs -0 tar rvf ""$archive.tar""","append all regular files modified in the last 24 hours to the ""$archive.tar"" tar archive"
find . -path ./misc -prune -o -name '*.txt' -print,exclude directory from find . command
find . -mindepth 1 -type d -print0 | xargs -0 chmod -R 700,set permissions to 700 for every subdirectory of the current directory
find . -name \*.txt -exec process {} +,find all *.txt files/directories under current directory and execute process once with all of them as arguments
column -t -s' ' filename,"format space separated fields in ""filename"" as a table"
"find . -mindepth 2 -maxdepth 2 -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | sh","rename the *.so files at level 2 of the current directory tree prepending their names with ""lib"""
ln -f -s -T `readlink SomeLibrary | sed 's/version.old/version.new/'` SomeLibrary,"replace ""version.old"" with ""version.new"" in the symbolic link target of ""somelibrary"""
find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \; -print,"search all *.txt files under ~/documents for the word ""dogs"""
find . -name something -print | head -n 5,list first 5 files named 'something' that are found under current directory
"ssh remote_host test -f ""/path/to/file"" && echo found || echo not found","check if ""/path/to/file"" exists on ""remote_host"""
find . -atime +7 -o -size +20480 -print,find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.
mkdir -p ~/foo/bar/baz ~/foo/bar/bif ~/foo/boo/bang,"create intermediate directories ~/foo/bar/ as required and directories baz, bif, bang"
"ln -sf ""$f"" ""~/my-existing-links/$(basename $f)""","force create a symbolic link to ""$f"" in ""~/my-existing-links/"" with name the basename of ""$f"""
"userlist=$(w|awk 'BEGIN{ORS="",""}NR>2{print $1}'|sed 's/,$//' )",saves list of currently logged in users in 'userlist' variable.
"find ./n* -name ""*.tcl""",find suffix tcl files under all directories started with 'n'
find / -type f -name dummy 2>/dev/null,display all regular/normal files in the entire file system with the name dummy and discard all the errors
find / -type f | xargs grep 'text-to-find-here',recursively finds all files and prints all strings with 'text-to-find-here' from that files.
find / -group shadow,"find all files/directories in entire file system that are owned by ""shadow"" group"
shopt -s compat31,enables shell option 'compat31'.
split -l20 ADDRESSS_FILE temp_file_,"split ""addresss_file"" into files containing at most 20 lines and prefix ""temp_file_"""
cat infile | dos2unix -U | od -c,"convert the contents of ""infile"" from dos to unix style text and display the result as printable characters or backslash escapes"
ifconfig eth0 | grep -Eoi [:0-9A-F:]{2}\(\:[:0-9A-F:]{2}\){5},gets mac address of eth0 network interface.
find ./ -type l,find all symlinks under current directory
"find . -name ""*Linkin Park""","search for all files in the current directory recursively whose names end with ""linkin park"""
find ~ -type f -mtime -2,find all files you have modified in the last two days
"alias s='it=$($(history | tail -2 | head -1 | cut -d"" "" -f4-))'","set alias ""s"" for command 'it=$($(history | tail -2 | head -1 | cut -d"" "" -f4-))'"
find . -mindepth 1 -exec mv -t /tmp {} +,move all the files in the current folder  to temp folder and search atleast in one subfolder
find Symfony -name '*config*';,"find all the files starting with ""config"" in the folder symfony"
find . -maxdepth 1 -not -iwholename '*Video',"find all files under the current directory whose pathnames do not end with ""video"", ignoring the case"
"find /home/john -name ""*.sh"" -type f -print",find all teh script files in a directory
bzip2 -kv */*/*/*/*/*/*,verbosely compresses all files on sixth and seventh depth level keeping original files in place.
tail -n +347340107 filename | head -n 100,"print lines 347340107 through 347340206 in ""filename"""
comm -23 a.txt b.txt,"print unique lines in sorted file ""a.txt"" compared to sorted file ""b.txt"""
"tail -f /path/to/log | perl -pne 'print scalar(localtime()), "" "";' > /path/to/log-with-timestamps","prepend time stamps to entries in ""/path/to/log"" as they appear and write to ""/path/to/log-with-timestamps"""
join -j 2  -o 1.1 1.2 2.1 <(sort -k2 1) <(sort -k2 2),"for each line whose second field is the same in both files, output: first field of second file, second field of first file, and first field of second file."
find . -name foo.txt -print0 | xargs -0  -I{} mv {} /some/new/location/{},search for all the foo.txt files in the current folder and move them to another location
find ./ -iname '*.jpg' -type f | wc -l,find all the files ending with jpg in current folder and display their count ( case insensitive )
find -user 1000,find all files of the user with uid=1000
"sudo find / -name ""orm.properties""",find all files/directories named orm.properties in entire file system
"read REPLY\?""This is the question I want to ask?""","prompt the user with a question ""this is the question i want to ask?"" and save ""y"" or ""n"" in variable ""reply"" in zsh"
"cut -d, -f1 file | uniq | xargs -I{} grep -m 1 ""{}"" file","isolate first comma-delimited field of each line in ""file"", discard consecutive duplicates, and search ""file"" for first matching occurrence of that field."
groups user,finds out what groups a given user has.
awk -f `which script.awk` arg1,"execute awk script ""script.awk"" that exists in ""$path"" with argument ""arg1"""
find . -maxdepth 1 -type f |wc -l,display the count of regular/normal files in the current folder do not search in sub directories
ssh -o ConnectTimeout=3 user@ip,"set the setup connection timeout to 3 seconds for connecting to ""user@ip"" via ssh"
set -ex,show all lines as they are executed and stop at the first command returning nonzero
"find . -name ""*.fq.gz""  -exec gunzip -c  '{}' ';' | fastqc  /dev/stdin",run `fastqc' on all the fastqc files in the current directory tree
find ~ -atime 100,find all the files within your home folder accessed more than 100 days ago
exec 2 | tee ${LOG_FILE},"execute ""2"" and write output to standard output and file ""${log_file}"""
find . -name *.o -perm 664 -print,find *.o files with permissions 664 in the current directory tree
su -,simulate a full login
"find euler/ -iname ""*.c*"" -exec echo {} \; -or -iname ""*.py"" -exec echo {} \;","display all the c files or python files in the folder ""euler"""
ls | sort -f | uniq -i -d,print a list of case insensitive duplicate filenames in the current directory
"name=""$(date +'%d%m%Y-%H-%M')_$(whoami)""","append the current date in '%d%m%y-%h-%m' format, '_' and the current username, then save it in 'name' variable"
"find -depth -type d | while read dir;  do [[ ! $prev =~ $dir ]] && echo ""${dir}"" ; prev=""$dir""; done",list all leaf directories (directories which don't contain any sub-directory) under current directory
find plsql -type f  -perm -ug=rw -exec ls -l {} \; 2>/dev/null,find files that are writable by both the “other” and the group
"screen -d -m sh -c ""while :; do ./myCommand; done;""",spawn a background screen session running mycommand
cd `find . -maxdepth 1 -type d | grep 1670`,go into the first directory whose name contains 1670
which -a rename | xargs readlink -f | xargs file,"search path for utilities called ""rename"", display the type of file (script, executable, ...) for each match found."
grep -f file2 file1 | sort | uniq,"search ""file1"" for lines matching regex patterns listed in ""file2"" and list the unique results (sorted alphabetically)"
yum install packagename,installs  'packagename' package.
rmdir nonsense_dir,deletes empty folder 'nonsense_dir'.
"source ""$( dirname ""${BASH_SOURCE[0]}"" )/incl.sh""",sources script incl.sh in the folder where current running script is located
"find . -type f \( -iname ""*.txt"" ! -perm -o=w \)",search for text files in the current folder which do not have write access to others
cat -vet a,"print content of 'a' file, showing all non-printing characters including tab characters, and displaying $ at the end of each line."
find . -type f -print0 | xargs -0 perl -pi -e 's/ +$//',remove trailing spaces from all files under current directory
find /dump -type f -name '*.xml' -exec java -jar ProcessFile.jar {} \;,find all the xml files in a directory and pass it as an argument to a jar
tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract,extract /path/to/my_archive.tar.xz to /path/to/extract and preserve permissions.
"find . -type d | awk -F'/' '{print NF, $0}' | sort -k 1 -n -r | awk '{print $2}' | sed 'p;s/\(.*\)thumbs/\1thumb/' | xargs -n2 mv","rename all ""thumbs"" directories to ""thumb"" in the current directory tree"
find . -regex '.*\(net\|comm\).*',find all the files in the current folder which have the name net or comm in them
find dir/ -type f -exec mv {} $(echo {}.fix | iconv -f UTF8 -t ASCII//TRANSLIT ) \;,find all regular files under and below dir/ and change their names from utf8 to the ascii/translit encoding
"find . -type d -name ""cpp"" -exec find {} -type f \;",search for a cpp directory in current folder and display all its files
"echo ""Total generated: $(echo ""$generated_ports"" | sort | uniq | wc -l).""","print ""total generated: "" followed by the number of unique lines in ""$generated_ports"""
find . -type f -exec grep -l 'ExtJSLogin' {} \; | grep -v 'change-app-name.sh' > files.txt,save the list of files containing string `extjslogin' to files.txt excluding change-app-name.sh
find . -perm -20 -exec chmod g-w {} ;,find files with group write permission and remove the permission
diff -y a b,display differences between a and b side-by-side
find /path/to/dir/ -type f ! -perm 0644 -print0 | xargs -0 chmod 644,change permissions to 644 for all regular files under the /path/to/dir/ tree unless these permissions are already set
basename $0,"from a script, output the name of the script itself, without containing directories."
find  . -name \*.txt -print -exec cat {} \;,recursively find all files ending with '*.txt' and print they names and content
"find ""${searchpath}"" -type f -print0 | xargs -0 grep -l -E ""${string1}"".*""${string2}"".*""${string3}""",find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded
find . -type d | xargs rmdir,removes only lowest level subfolders from current directory tree (folders without files and another folders within).
find -newer foo.txt,find files/directories that are newer than 'foo.txt' under current directory tree
"find /dir/dir -type f -mtime +540 -mtime -720 -printf \”%p\”,\”%s\”,\”%AD\”,|”%TD\”\\n > /dir/dir/output.csv","display the files modified between last 18 to 24 months in the format filename, file size, last access date, modification date and save the output to the file /dir/dir/output.csv"
find . -type d -name 'uploads' -print0 | xargs -0 chmod -R 755,"search for the directory ""uploads"" in current folder and change the permission of the folder and all the files to 755"
find . -maxdepth 1 -mindepth 1 -iname '*.jpg' -type f,display all the jpg files in the current folder and do not search in sub directories
mkdir -p a/b/c,"create intermediate directories ""b and ""c"" as required and directory ""c"""
mkdir -p dir,"make directory ""dir"" and do not cause an error if it exists"
"find . -name ""*.txt"" -print0 | xargs -0 rm",remove all .txt files in and below the current directory
find . -name '*.txt' | xargs zip -9 txt.zip,"compress all .txt files in the current directory tree to archive ""txt.zip"""
find /tmp/foo -exec /tmp/echoargs {} +,find all files in directory tree /tmp/foo and pass them as arguments to script /tmp/echoargs
find -type f -regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+',find all files under current directory matching the regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+' in their paths
"find /var/www/html/ -type d -name ""build*"" | sort -r",find all build* directories under /var/www/html/ and reverse sort them
nbLines=$(cat -n file.txt | tail -n 1 | cut -f1 | xargs),save number of lines in 'file.txt' file in 'nblines' variable
"if find ""`echo ""$some_dir""`"" -maxdepth 0 -empty | read v; then echo ""Empty dir""; fi",print 'empty dir' if $some_dir is empty
"find .  ! -regex "".*[/]\.svn[/]?.*""",search the current directory tree for all files except svn ones
find . -type f -not -name '.*' -mtime +500 -exec ls {} \;,list non-hidden regular files in the current directory tree that were last modified more than 500 days ago
find / -type f -size -10k 2>/dev/null -print0 | xargs -0 egrep '\bsomeknowncontent\b',search the system for a file by its content limiting the search to regular files smaller than 10kb
find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups,move all emacs backup files from the current directory tree to ~/backups/
"find . -type f -name ""*html"" -exec perl -pi -e 's|pibeta.psi.ch/~stefan|midas.psi.ch/~stefan|g' {} ;",search for all html files in current folder and replace a pattern in all the files
chgrp btsync /etc/btsync/[prefered conf name].conf,changes group ownership of '/etc/btsync/[prefered conf name].conf' to 'btsync'.
find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.*\n//g',delete all contents (including new lines) form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions
"yes ""Hidden"" | dd of=/dev/sdb","continuously write ""hidden"" over the entire ""/dev/sdb"" disk"
find -name 'file_*' -follow -type f -exec zcat {} \; | agrep -dEOE 'grep',"unzip all files matching ""file_*"" and pipe into ""agrep -deoe 'grep'"""
"find dir -type f -print0 | xargs -0 sed -i .bak -E ""s/[[:space:]]*$//""",remove trailing white spaces from all files under dir directory and keep backups of the originals
"rsync -azP -e ""ssh -p 2121"" /path/to/files/source user@remoteip:/path/to/files/destination","archive ""/path/to/files/source"" to ""user@remoteip:/path/to/files/destination"" via ssh on port 2121"
"cat filname | lua -e ""sum = 0;for i in io.lines() do sum=sum+i end print(sum)""","mathematically sum all lines in ""filename"""
find ./ -mtime -0.5,find all the files that have been modified in the last 12 hours
find test -type l -exec cp {} {}.tmp$$ \; -exec mv {}.tmp$$ {} \;,"find symlinks under and below the ""test"" directory and replace them with the content of the linked files"
find . -mtime -7 -print,"find all the files that have been modified in the last 7 days,"
"cd ""$(grep DOWNLOAD $HOME/.config/user-dirs.dirs | cut -f 2 -d ""="" | tr ""\"""" ""\n"")""",change directory to the download directory specified in the current user's user-dirs.dirs file
ps -p $$,print current shell using process id
"find /home/user/workspace -mindepth 1 -maxdepth 1 -type d -mtime +30 -printf ""\t- It seems that %p wasn't modified during last 30 day\n""",find directories that are directly under /home/user/workspace directory (no-subdirectories) and were modified more than 30 days ago and print a message saying that the directory wasn't modified during last 30 days
ls -d */|sed 's|[/]||g',"list directories in the current working directory and remove the trailing ""/"""
find /dev/shm /tmp -type f -ctime +14,find files/directories not changed in two weeks under /dev/shm
alias j7='JAVA_HOME=`/usr/libexec/java_home -v 1.7`',"set alias ""j7"" for command 'java_home=`/usr/libexec/java_home -v 1.7`'"
"find $DIR -name ""*.mod"" -type f -exec remodup {} \;","find all the regular/normal files ending with "".mod"" in a folder and send them as input to the remodup command"
find -cnewer /etc/fstab,find all the files in the current directory and sub-directories whose status was changed after /etc/fstab was modified
find / -size 50c,find all files that are exactly 50 bytes
set -o noclobber,disables overwriting existing files
find . -type f -exec grep California {} \; -print | grep surfboard > SurfsUp.txt,"search all regular files from the current directory tree for lines containing ""california"" and ""surfboard"", and save the output as surfsup.txt"
find . -maxdepth 1 -type f -not -regex '.*\.txt',find all files files under the current directory except *.txt
rsync -a --relative /new/x/y/z/ user@remote:/pre_existing/dir/,"copy ""/new/x/y/z/"" over the network to ""user@remote:/pre_existing/dir/"" preserving the directory hierarchy"
find /home/username/public_html/sites/default/files -type f -exec chmod 660 {} +,find all files under /home/username/public_html/sites/default/files and set their permission to 660
find ~/Books -type f -name Waldo,find all regular files named 'waldo' under 'books' directory tree that is located in user's home directory
find /Users/Me/Desktop -readable,"display all the files in the folder ""/users/me/desktop"" which have read permission to them"
mount -obind /etc /tmp/sarnold/mount_point/,"mount the directory ""/etc"" on ""/tmp/sarnold/mount_point/"""
ln -s target-directory/`ls -rt target-directory | tail -n1` latest,"create a symbolc link named ""latest"" to the last modified file or directory in ""target-directory"""
find -path './Linux/*' -name teste.tex,search subdirectory `linux' in the current directory for file `teste.tex'
find /home/family/Music -name *.m4a -print0,find all *.m4a files/directories under /home/family/music directory
"find / -type f -iname ""Dateiname""","search for the regular/normal file ""dateiname"" in the entire file system"
sudo chown -R $(whoami):admin /usr/local,"recursively change ""/usr/local"" owner to the current user and group to admin"
find . \( -name '*.txt' -o -name '*.html' \) -mtime +5 -print0,"lists txt or html files older than 5 days, null separated"
"find /srv/www/*/htdocs/system/application/ -name ""*.php"" -exec grep -H ""debug ("" {} +","find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string ""debug ("""
"echo ""a,b""|sed 's/,/\r\n/'","replace "","" with ""\r\n"" in ""a,b"""
join <(sort index) <(nl strings | sort -b),"print the lines of file ""strings"" specified in file ""index"""
find /path/to/search                    \   -type d                               \     \( -path /path/to/search/exclude_me \        -o                               \        -name exclude_me_too_anywhere    \      \)                                 \     -prune                              \   -o                                    \   -type f -name '*\.js' -print,"list all js files under currect directory exculde the directory which path contain ""/path/to/search/exclude_me"" or name isexclude_me_too_anywhere"
gzip -c my_large_file | split -b 1024MiB - myfile_split.gz_,"compress ""my_large_file"" with gzip and split the result into files of size 1024 mib with prefix ""myfile_split.gz_"""
"find /var -maxdepth 2 -type d -printf ""%p %TY-%Tm-%Td %TH:%TM:%TS %Tz\n""",display the directory name along with the modified time  for all the files /var
readlink $(which python2.7),"resolve symbolic link of path of ""python2.7"""
find /home/user -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents,find all .txt files in the /home/user directory tree and copy them to /home/backup
find path -type f -printf '%s\n' | awk '{sum += $1} END {print sum}',get the total sizes of all files under current directory
pstree -s $$,prints process tree of the current process with parent processes.
ifconfig  | grep 'inet addr:' | grep -v '127.0.0.1' | awk -F: '{print $2}' | awk '{print $1}' | head -1,gets ip address of first listed active network interface in system.
find / -name xyzzy -print0 > list,print all files which name is xyzzy  followed by null and save to list
chgrp -R git ./,recursively changes group ownership of everything within current folder to 'git'.
comm -13 <(grep '#include' file1 | sort) <(grep '#include' file2 | sort),"print ""#include"" statements found in ""file2"" that are not in ""file1"""
tree -Csu,print file size and user name with color support for each file in the current directory tree
basename /EBF/DirectiveFiles/data_report_PD_import_script_ABF1_6,"output the last slash-separated component of specified path, in this case ""data_report_pd_import_script_abf1_6"""
find / -mtime 50,find all the files in entire file system  which are modified 50 days back.
rpm -qf `which sort`,"check which package the ""sort"" command belongs to in rpm"
set | grep -A999 '^foobar ()' | grep -m1 -B999 '^}',"display bash function definition of ""foobar"""
find . -name '*.ear' -exec du -h {} \;,print file size with the file name
fold file | wc -l,"wrap each line in ""file"" to fit in 80 characters and count the number of lines"
"echo ""$(dirname $(readlink -e $F))/$(basename $F)""","print the real path of ""$f"" where each symbolic link component must exist"
"find . -type f -exec bash -c 'f=""{}""; echo ""${f:2}""' \;",find all files under current directory and print them by removing the leading ./ in their paths
find . -type f -name '*.DS_Store' -ls -delete,"find all regular files in the current directory tree whose names end with "".ds_store"" and delete them"
find . -name \*.c -print0,display all the files ending with .c in the current folder
find /home/foo \( -name '.DS_Store' -or -name '._.DS_Store' -or -name '._*' -or -name '.TemporaryItems' -or -name '.apdisk' \) -exec rm -rf {} \;,"remove all files and directories under '/home/foo' directory tree that match with one of the name patterns '.ds_store', '._.ds_store' , '._*', '.temporaryitems' or '.apdisk'"
cat folder_list.txt | xargs mkdir,"make directories for each line in ""folder_list.txt"""
find /path/to/search -user owner,find files belonging to the given owner
tail -f file | stdbuf -o0 grep my_pattern,"print appended data in ""file"" and search for ""my_pattern"" without buffering"
find ~ -name 'xx*' -and -not -name 'xxx',find all xx* files/directories excluding 'xxx' files/directories under your home directory
"find . -type f \( -iname ""*.txt"" -and -perm -o=w \)",search for text files in the current folder which have write access to others
find X -depth -type d -exec rmdir {} \;,recursively removes all empty folders from the x folder.
split -C 100m -d data.tsv data.tsv.,"split ""data.tsv"" into files of at most 100 mib preserving lines and use a prefix of ""data.tsv."" and numeric suffixes"
"dig +noall +answer soa yahoo.com | awk '{sub(/.$/,"""",$5);print $5}'",prints server name from soa record for domain yahoo.com
"find /home/jul/here -type f -iname ""*.php"" ! -path ""$EXCLUDE/*"" -o -iname ""*.js"" ! -path ""$EXCLUDE/*""",find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding $exclude/* paths
find /etc -print0 | xargs -0 file,execute the file utility for each file found under /etc and below
"zcat file.gz | cut -f1 -d, | sort | uniq -c | sort -n","unzip ""file.gz"", list the unique first comma separated field prefixed by the number of occurrences, sort from least frequent to most frequent"
tmpdir=$(mktemp -d) && cd $tmpdir,create a temporary directory and go into it.
echo $(( ( $(date -ud '2003-08-02 17:24:33' +'%s') - $(date -ud '2003-04-21 22:55:02' +'%s') )/60/60/24 )) days,print difference in days between two dates
find . -name “*.pdf” -print,find all pdf files in the current folder
ssh user@host -M -S /tmp/%r@%h:%p -N,"open a session-less connection to 'host' as user 'user' in master mode with a socket ""/tmp/%r@%h:%p"" to enable connection sharing"
"find /file/path ! -newermt ""Jul 01"" -type f -print0 | xargs -0 rm",remove all files that are not newer than jul 01 by modification time
"find . -\( -name ""myfile[0-9][0-9]"" -o -name ""myfile[0-9]"" \)",search the current directory tree for files matching regular expression '^myfile[0-9][0-9]?$'
"cat mail.tmp | mail -r ""noreply@$(hostname)"" -s ""Config done!"" ""${MAIL}""","send email in ""mail.tmp"" from ""noreply@hostname"" with subject ""config done!"""
"alias jump=""cd $(myscript.sh)""","set alias jump for command ""cd $(myscript.sh)"""
seq $(tail -1 file)|diff - file|grep -Po '.*(?=d)',"print comma separated gaps in file ""file"" that contains new line separated ordered numbers"
find /tmp/test/* -daystart -mtime +1,find files/directories that have not been modified in the last one day in directories or files taken from the glob pattern '/tmp/test/*'
od --read-bytes=2 my_driver,"print the first two bytes of ""my_driver"" in octal"
find /home/tecmint/Downloads/ -type f -exec du -Sh {} + | sort -rh | head -n 5,find the 5 largest regular files in the downloads folder of tecmint's home directory.
sed -i 's/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g' index.html,"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in ""index.html"""
sudo yum update --skip-broken,"updates all software in a system, skipping packages that have a failed dependencies."
find /project/directory -iname '*.php' -or -iname '*.phtml' | grep -iv '/some/directory' | xargs xgettext,"recursively finds files like '*.php' or '*.phtml' in folder /project/directory ignoring case differences, filters out files with any cased pattern '/some/directory' in path, and processes found files with xgettext tool."
su -l,login as user root
find debian/fglrx-amdcccle/usr/lib/fglrx/bin/ -type f | xargs chmod a+x,make regular files from debian/fglrx-amdcccle/usr/lib/fglrx/bin/ executable for all
find . -maxdepth 1 -print0 | xargs -0 stat -c '%i %n',find all files/directories under maximum 1 level down the current directory and print their inode numbers and names
find / -mtime -1,find all the files (under root file system /) that were updated in the last 24 hours
find pathfolder -type f,"display all normal/regular files in the folder ""pathfolder"""
"find . -name ""*.c"" -print | xargs grep ""main(""","search for occurrences of string ""main("" in the .c files from the current directory tree"
bind -q complete,query about which keys invoke the named function
"find /home/pat -iname ""*.conf""",return all of the .conf files in pat's user folder and subdirectories
"screen -x $PROCESS -p 0 -X stuff `printf ""stop\r""`",send command to named screen session with special characters
echo $(dirname $(readlink -m $BASH_SOURCE)),print the directory of the full path to the current script
"echo ""filename.gz""     | sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-","remove the last file extension from ""filename.gz"""
nohup cmd1 | cmd2 &,"run two processes, cmd1 whose output is fed as input to cmd2: cmd1 is immune to all sighup (hangup) signals sent to it, but cmd2 is not."
"find ""$dir"" -type f",find all files under $dir
df -P file/goes/here | tail -1 | cut -d' ' -f 1,"print the file system ""file/goes/here"" is on"
"ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10",prints top ten of most memory using processes in system.
"find . -name '*.gz' -print | xargs gzip -l | awk '{ print $2, $4 ;}'  | grep -v '(totals)$' | sort -n | tail -1","find the largest original "".gz"" file in the current directory tree"
unset `env | awk -F= '/^\w/ {print $1}' | xargs`,unset (delete) all environment variables.
find . -name \*.c -print0 | xargs -0 grep hogehoge /dev/null,"search all *.c files from the current directory tree for ""hogehoge"""
dmidecode | more,"display smbios/dmi information, pausing for user interaction between pages of output."
ls -l /proc/$$/exe | sed 's%.*/%%',prints name of a current shell binary file.
find /tmp/test/* -mtime -0,find all the files recursively in directories or files taken from the glob pattern /tmp/test/* that have been modified today
cat ~/.bashrc | pbcopy,"save the contents of ""~/.bashrc"" to the clipboard on osx"
mkdir foo bar,"make directories ""foo"" and ""bar"""
tr -cs '[:space:]',read standard input and replace any repeated characters except spaces with a single instance
cat files.txt | xargs scp user@remote:,"file ""files.txt"" contains a list of files, copy all files listed to host ""remote"", connecting as ssh user ""user"", and copying the files to this user's home directory - this will not work with files/directory names containing spaces."
find $STARTDIR -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf \{}.ps,find all *.ps files under $startdir and run ps2pdf for each files with the file path as a argument
chmod 644 `find . -type f`,set 644 permission to all regular files under current directory
find . -type d -exec chmod +rx {} \;,add read and execute permission to every directory under the current directory
ssh -O exit otherHosttunnel,"request that the master ssh connection ""otherhosttunnel"" exits"
"watch -n 5 ""wget -qO-  http://fake.link/file.txt | tail""","execute ""wget -qo-  http://fake.link/file.txt | tail"" every 5 seconds"
su apache -s /bin/ksh,run ksh shell as user apache
grep -b -o $'\x0c' filename | less,use 'less' to nicely display control characters from the outupt of 'grep'.
find . -type f -name \*.bak -print0 | xargs -0 rm -v,remove all *.bak files under current directory
find / -type d | wc -l,find all directories recursively starting from / and count them
find $HOME -atime +30,locate files that reside in the home directory and have not been accessed in the past 30 days
find / -executable,find all executable files
find . -type f  -perm 777 -exec ls -l {} \;,"list regular files in current directory with read, write and execute permission for all users and also show the permissions"
"ifconfig | awk -F""[ :]+"" '/inet addr/ && !/127.0/ {print $4}'",gets list of ip addresses of all network interfaces.
"mail -s ""Alert: SSH Access from `who | cut -d'(' -f2 | cut -d')' -f1`"" -a tmpfile user@example.com","email an alert message containing the ip address of the ssh connection with attachment ""tmpfile"" to ""user@example.com"""
"find . -name ""*"" \( -exec chgrp -v new_group {} \; -o -exec chmod -v 770 {} \; \)","change the group to ""new_group"" and permissions to 770 for all the files in the current folder"
mv /usr/bin/openssl /root/,"move ""/usr/bin/openssl"" to directory ""/root/"""
sudo chmod 755 mksdcard,"change permissions of ""mksdcard"" to 755"
find /home/www/ -type f -exec sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g' {} +,find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files invoking sed as few times as possible
split -a4 -d -l100000 hugefile.txt part.,"split ""hugefile.txt"" into files with 100000 lines each starting with ""part."" and using numeric suffixes"
find . -path './bar*' -print,find directory names starts with 'bar'
"find ""$STORAGEFOLDER"" -name .todo -printf '%h\n'",find all files/directories named '.todo' under $storagefolder directory tree and print the parent directory names
"find . -name '*[+{;""\\=?~()<>&*|$ ]*' -exec rm -f '{}' \;","remove all files matching the pattern *[+{;""\\=?~()<>&*|$ ]* under current directory"
find -name \*.plist,find all *.plist files/directories under current directory
"find ""${current_directory}"" -type f -iname ""*.wma""","find all the "".wma"" files in the folder ""$current_directory"""
"find . \( \( -path ""\.?.*"" -type d \) -o -path ""*normal*"" \) -prune -o \( -type f \) -print","display all the regular files in current folder excluding all the directories and all the sub directories having ""normal"" in their name"
find /tmp -maxdepth 1 -type f -delete,remove all the regular/normal files in the temp folder and do not delete in the sub folders
find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz,search for all jpg images on the system and archive them
"echo ""hello world"" | echo test=$(cat)","print ""test=hello world"""
find . -name '*~' -print0 | xargs -0 rm,remove recursively emacs backup files in the current directory
echo aa | wc -l | tr -d ' ',"remove spaces from output of ""echo aa | wc -l"""
hostname -I | cut -d' ' -f1,print ip addresses of the host name
"find / -name ""*.dbf""  -exec dirname {} \; 2> /dev/null | sort -u",find all *.dbf files/directories in entire file system discarding errors and print their sorted and unique parent directory pathsg
"find <file path> -name ""myFile.*"" -exec rm -f {} ;","recursively removes all files with name like ""myfile.*"" in 'file path' folder."
ls -a | tee output.file,"prints listing of a root folder including hidden files, and saves output to 'output.file'."
"rm -fR ""${TMP}/"";",recursively and forcibly removes $tmp folder with all content.
find /var/tmp/stuff -mtime +90 -execdir /bin/rm {} \+,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
find . -name *.rb,find all *.rb files/directories under current directory
last -i | grep $(whoami) | grep 'still logged in',display ip address and login time of the current user's session
chmod 644 $(find /path/to/base/dir -type f),find all files under /path/to/base/dir and change their permission to 644
"find -L /path/to/dir/* -printf ""%TY%Tm%Td%TH%TM%TS|%p\n""",find all files/directories following symlinks under /path/to/dir/* paths and print the timestamp in ymdhms format along with their paths
"find . -type f -name ""Tes*"" -exec rm {} \;","delete all the files which start with ""tes"" in the current folder"
"ls -1 | tr '\n' ','","list all files in a current folder, separating names with comma"
"find /var/log -type f -size +100000k -exec ls -lh {} \; | awk '{ print $9 "": "" $5 }'",display the name and size of all the regular/normal files  in the var/log folder which are bigger than 100mb
df . -B MB | tail -1 | awk {'print $4'} | cut -d'%' -f1,print amount of space available on the file system containing path to the current working directory in megabytes.
"find . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo -e $(find ""{}"" -printf ""\n"" | wc -l) ""{}""' | sort -n",counts all files in a current folder and in subfolders one-level lower and sorts result by number of files within.
find . -name heapdump* -exec rm '{}' \; -print >delete.txt,"remove all files whose names begin with ""heapdump"" and write their names to ""delete.txt"""
find . -type f -exec chmod 400 {} \;,find all files under current directory and change their permission to 400
"ssh askapache 'nohup sh -c ""( ( chown -R ask:ask /www/askapache.com &>/dev/null ) & )""'","execute ""chown -r ask:ask /www/askapache.com"" in the background on server ""askapache"""
"find / -name ""*.jpg"" -print",list all *.jpg files/directories in entire file system
"find -name ""*.js"" -not -path ""./directory/*""",exclude directory from find . command
find . -name \*.py -print,find all *.py files/directories under current directory
"find $(pwd) -name YourProgram -exec dirname {} \; | while read d; do cd ""$d"" && ./YourPrgram; done","find all files in the current directory tree whose names are ""yourprogram"", change to the directories they are in, and execute them"
find . -type f -name \*,display all the regular/normal files in current folder
find . -name \*.php -type f -print0 | xargs -0 -n1 -P8 grep -Hn '$test',"find all php files in the current directory recursively and search them for string ""$test"" with 8 simultaneous processes"
somecommand | true,returns 0 exit status despite of 'somecommand' execution result.
"find . -mindepth 1 -maxdepth 1 -type d | awk 'BEGIN {FS=""./""}; {print $2}' | xargs -d '\n' tar czf backup1.tar","create archive ""backup1.tar"" of all subdirectories of the current directory"
sudo  ln  -d  existing_dir  new_hard_link,"create a hard link as directory named ""new_hard_link"" to the directory ""existing_dir"" as root"
find / -type f ! -perm 644,find files that don’t have 644 permissions
"find . -type d | sort | xargs -n1 -I{} bash -c ""find {} -type f -maxdepth 1 -executable | sort -r""",list every directory under current directory with their child executable files
find /home/the_peasant -type f,display all normal/regular files in a folder
find . -maxdepth 1 -type f -regex '.*\.txt' -not -name File.txt,"find all *.txt files under the current directory whose names are not ""file.txt"""
"find -maxdepth 1 -iname ""*.txt""",find all the text files in the current folder and do not  search in the sub directories
"basename $(echo ""a:b:c:d:e"" | tr ':' '/')",print the basename from a colon separated path 'a:b:c:d:e'
"find /tmp/ -ctime -1 -name ""x*"" -exec mv '{}' ~/play/",find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play
find /base/path/of/proj/d‌​ata -name target.txt | xargs simpleGrepScript.sh > overallenergy.out,"find target.txt files in the /base/path/of/proj/d‌​ata directory tree and pass them as arguments to simplegrepscript.sh, saving the output as overallenergy.out"
comm abc def,"compare files 'file1' and 'file2' and print in three columns strings unique for first file, second file, and common ones"
source <(export | sed 's/gcc.4.2/gcc64/g'),"change all variables containing ""gcc.4.2"" to containing ""gcc64"" in the current shell's environment."
find directory_name -type f -print0 | xargs -0 grep -li word,"search the regular files from directory tree 'directory_name' for ""word"" and print the names of the matched files"
brew doctor,checks your homebrew system for potential problems.
find . -user root -perm -4000 -print,find all files that are set user id to root
find /usr/* -size 0c -exec rm {} \;,find and remove zero bytes files from user's directories .
"g=`dirname ""$f""`/`basename ""$f"" | tr '[A-Z]' '[a-z]'`","compose filepath as folder path where file $f is located, and lowercase filename of $f file, and save it in 'g' variable"
find /dir/to/search/ -type f -name 'expression -or expression' -print,"find regular files named ""expression -or expression"" under and below /dir/to/search/"
jobs -l,list all active jobs and its ids
"find path/ -name '*.log' -print0 | xargs -r0 grep -L ""string that should not occur""","find all *.log files under path/ that do not contain ""string that should not occur"""
yes 2>/dev/null | ./MyScript.sh,"continuously send ""y"" as input to ""./myscript.sh"" and ignore standard error"
"find ~/junk -exec touch ~/junk/cart{1,2,3,4,5,6} {} \; 2> /dev/null",create six empty files in directory ~/junk
comm -3 <(sort -un f1) <(sort -un f2) | tr -d '\t',"list any line in ""f1"" or ""f2"" which does not appear in the other and delete all tab characters in the output"
find . -depth -print | cpio -dump /backup,compresses all the files in the current folder with default depth
"ping google.com -n 10 | awk '/Minimum =/ { sub("","","""",$3); print $3 }'","print the minimum transmission time of 10 ping requests to ""google.com"" from cygwin"
find /etc -type f -print0 2>/dev/null | xargs -0 grep --color=AUTO -Hn 'nameserver' 2>/dev/null,search for the string 'nameserver' in all files under /etc
rpm2cpio packagename | cpio -ivd,"extract rpm ""packagename"""
"find ./ -type f -iregex "".*\.html$"" -or -iregex "".*\.cgi$""",find all html or cgi files in current folder
ifconfig | grep -v '127.0.0.1' | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p',finds ip addresses of all network interfaces.
find -depth -type d -empty -exec rmdir {} \;,recursively removes all empty folders under current folder.
find . -type f -name INPUT.txt -print0 | xargs -0 -I {}  sed -i.bak '/^#/d' {},"find all files called ""input.txt"" in the current directory tree and remove lines starting with # in them, saving backup copies as input.txt.bak"
find ~/ -type f -exec grep -H 'text-to-find-here' {} \;,"recursively finds all files in root folder and prints all strings with 'text-to-find-here' from that files, preceding matched string with filename."
"alias rm5g=""find / -type f -name *.tar -size +5G -exec rm -i {} \;""",assign the alias rm5g to a find command that removes any .tar file larger than 5 gigabytes.
ls -ld $(find .),recursively lists all files in a current folder in long format.
(cd A && find .) > tmp.txt,"change the current working directory to ""a"" and display all the files in that folder and save the output to the file ""tmp.txt"""
"find . -iname ""*.jpg"" -ls |perl -lane '$t += $F[6]; print $t/1024/1024/1024 . "" GB""'",find the total size of *.jpg files within the current directory tree
sudo find / ( -name firefox -o -name thunderbird -o -name seamonkey \) -type f 2>/dev/null|grep -v '(10_Recommended|repo)',"search in the entire file system for the files firefox, thunderbird, seamonkey and display all the files expect those having the words ""10_recommended"" or ""repo"" (discard all the errors during search)"
sudo ls -hal /root/ | sudo tee /root/test.out > /dev/null,"prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file."
"history | awk '{sub($1, """", $0); sub(/^[ \t]+/, """", $0); print}'",print history with the first field removed
"crontab -l | awk '$1 == ""*"" || $1 ~ /^[0-9]+$/ && $1 < 15 {print}'",list all cron jobs where the minute part is either * or a number from 0 to 14.
find / -size 50M,find all 50mb files
find /myfiles -name '*blue*',find all *blue* files/directories under /myfiles
find -name '*php' | xargs cat | wc -l,count all the lines of all files with names ending with 'php' in current directory recursively
"find / -xdev -name ""*.log""",find all the log files in the file system which are present in the current partition
"find /Path -name ""file_name*"" | grep ""bar""","search the /path directory tree for files matching pattern ""file_name*"" and containing ""bar"" in their pathnames"
path=$(basename $(pwd)),set variable 'path' to name of current directory (without the containing directories).
find /root -name FindCommandExamples.txt,find all files/directories named 'findcommandexamples.txt' under '/root' directory tree
diff -r dir1 dir2 | grep dir1 | awk '{print $4}' > difference1.txt,"write summary of files present only in dir1, and which files differ between dir1 and dir2 to file 'difference1.txt'"
ssh -t SERVER 'command; bash -l',"ssh into server, execute ""command,"" and start up a login shell when it completes"
find . -type d | xargs chmod -v 755,change permissions to 755 for all directories in the current directory tree
find /home/calvin/ -name “*.txt” > /tmp/search.log,search for all the text files in the folder /home/calvin/ and save the output to  /tmp/search.log
"seq 5 | awk '{printf ""%s"", $0} END {print """"}'",print numbers from 1 to 5 without separating spaces
cal -h | cut -c19-20,prints all saturday days of a current month.
find ~/Books -name Waldo,find all files/directories named 'waldo' under 'books' directory tree that is located in user's home directory
find -type d -a -name test|xargs rm -r,find all 'test' directories in the current directory tree and remove them
find --version,show find's version
du -smc * | sort -n,list each file or directory in the current directory prefixed with its filesize in mb and sorted from smallest to largest
find . \( ! -name . -prune \),list files in the current directory
find . -name *.txt | xargs dos2unix,convert all .txt files under and below the current directory from the dos format to unix
"find . -name ""*.js"" -exec grep -iH foo {} \;",search for the word foo in all the js files in the current folder
find /etc -type f -exec cat '{}' \; | tr -c '.[:digit:]' '\n' \ | grep '^[^.][^.]*\.[^.][^.]*\.[^.][^.]*\.[^.][^.]*$',find all files under the /etc directory and display ip address patterns in them
echo 'deb blah ... blah' | sudo tee --append /etc/apt/sources.list,"write ""deb blah ... blah"" to standard output and append to ""/etc/apt/sources.list"" as root"
find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(\|#hyphenate' {} +,find all *.p[lm] files under /users/tom directory that matches the regex '->get(\|#hyphenate' in their contents
"find . -type f -name ""*.java"" -exec grep -l StringBuffer {} \;",find stringbuffer in all *.java files
find /home/ -type f -size 6579c -exec ls {} \;,display list of all the regular/normal files in the home folder which are exactly 6579 bytes
find -E /somefolder -type f -regex '\./(.*\.error.*|second.*log|.*FFPC\.log)$',find all files under /somefolder matching the extended regex '\./(.*\.error.*|second.*log|.*ffpc\.log)$' in their paths
"find . -type d -iname '*foo*' -exec bash -O nocasematch -c '[[ $1 =~ (foo) ]] && mv ""$1"" ""${1//${BASH_REMATCH[1]}/Bar}""' -- {} \;",move all *foo* (case insensitive) directories under current directory to new paths obtained by replacing all occurrences of 'foo' (case insensitive) with 'bar' in their paths
find /foldername | sort -n | tail -1,"list the last entry of the numerically sorted list of all files and folders under ""/foldername"""
find . -name “*.[php|PHP]” -print,find all the php files in the current folder
find . -type f \! -iregex '.\|./.git' -exec perl -i -pe 's/$lower1/$lower2/g' {} \;,find all files under current directory that match the case insensitive regex .\|./.git and replace the text matching the regex '$lower1'  (literal) with $lower2 (literal)in these files
find . -name whatever -print | xargs grep whatever,"search all files in the current directory tree that are named ""whatever"" for ""whatever"""
"find /usr -name core -atime +7 -exec rm ""{}"" \;",remove all the core files from /usr folder which have not been accessed in the last 7*24 hours
uniq -w12 -c file,output all lines in 'file' comparing the first 12 characters and discarding any adjascent lines where these characters are duplicates.
"echo -e ""length(FOO_NO_WHITESPACE)==$(echo -ne ""${FOO_NO_WHITESPACE}"" | wc -m)""","reports count of characters in the value of ${foo_no_whitespace} variable as follows: ""length(foo_no_whitespace)==<counted number of characters>"""
"find . -type f -iname '*'""${1:-}""'*' -exec ${2:-file} {} \;",find all regular files with case insensitive pattern '*$1*' ($1 expands to first positional parameter and falls back to empty string when not given) under current directory tree and execute a command given by $2 (falls back to 'file' command when $2 is not given) with each of those files as arguments
"find . -name ""*.txt"" -exec echo {} \; -exec grep banana {} \;",use multiple -exec command in find . find all .txt files & grep banna in .txt files .
"curl -X GET -H ""Authorization: Token wef4fwef54te4t5teerdfgghrtgdg53"" http://testsite/api/ | python -mjson.tool","send get request to ""http://testsite/api/"" with header ""authorization: token wef4fwef54te4t5teerdfgghrtgdg53"" and format as json"
nohup php newEmptyPHP.php &,"run the php script ""newemptyphp"" redirecting the output to ""nohup.out"" in the current directory, or in the home directory if that is not possible. the process will not receive or respond to sighup (signal 1) which are sent to it."
chgrp god public private,changes group ownership of 'public' and 'private' to 'god'.
find /home/peter -nouser -exec ls -l {} \; -ok chown peter.peter {} \;,"display long list of all the files in the folder /home/peter which belong to no user and change the owner,group of all these files (after user confirmation) to ""peter"",""peter"""
find . -type f -iname '*.jpg' -print0 | du -c --files0-from=-,find the total size of *.jpg files within the current directory tree
path=$(basename $(pwd) | awk '{print tolower($0)}'),set variable 'path' to name of current directory (without the containing directories) converted to lowercase.
find . -depth -name '__temp__*' -exec rm -rf '{}' \;,delete all __temp__* files/directories under current directory tree
mount -l | grep 'type nfs' | sed 's/.* on \([^ ]*\) .*/\1/',list all nfs mount points on the system
find /path/to/files -type f -name \*.cfg  -print -exec cat {} \; -exec sleep 2 \;,"print every found file like '*.cfg' under '/path/to/files/' directory followed by its content, and wait 2 seconds after each printed file"
"nl -n rz ca | awk -vOFS=""\t"" '/Ca/{$1=""#""$2} {$1=$1}1' | sort -k1,1 | cut -f2-","move all lines starting with ""ca"" to the beginning of the file"
find . -size -1c -print,find all files in the current directory that are less than 1 byte size
ls **/*.py **/*.html,recursively lists all *.py and *.html files in a current folder.
"echo ',s/foo/bar/g; w' | tr \; '\012' | ed -s file.txt","change all occurrences of ""foo"" to ""bar"" in the file ""file.txt"""
find . -type f -exec chmod 775 {} +,find all files under current directory and set their permission to 775
find . -atime +1 -type f -exec mv {} TMP \; # mv files older then 1 day to dir TMP,move files accessed more than one day ago to directory tmp
"find . -name ""*.pdf"" -print",find and print the full pathname of all pdf files in the current directory and its sub-directories.
"find . -type f -name ""*.txt"" -exec sed '/\-/s /\-.*//g'  {} \;",find & substitute only when the line matches with the pattern using sed
"find . -maxdepth 1 -type f ! -name '*.gz' -exec gzip ""{}"" \;",find all files except files with '.gz' extension in the current directory non-recursively and compress them with gzip
"find . -name ""octave"" -type d",find all directories named 'octave' under current directory tree
find / -type d -name root,find all directories whose name is root in / directory
(time ls) > outfile 2>&1,saves command execution output to a file 'outfile' together with time report.
find ~ -type f -mtime 0,find all regular files in the home directory tree that were modified in the last 24 hours
od -tx2 FILENAME,"dump ""filename"" as 2 byte wide hexadecimal numbers"
mount /path/to/device /path/to/mount/location -o loop -t vfat,"mount ""/path/to/device"" on ""/path/to/mount/location"" as a vfat filesystem and a loop back device"
"find files/ -name ""*.gz"" | nl -n rz | sed -e 's/\t/\n/' | xargs --max-args 2 ...","find all "".gz"" files in directory tree ""files/"" and use a count and the filename as arguments to ""..."""
find /myfiles -type d,find all directories under /myfiles directory
seq -s= 100|tr -d '[:digit:]',print a line of 99 '=' characters
watch -n 60 killall -USR1 dd,"execute ""killall -usr1 dd"" every minute"
find . -not \( -path ./directory -prune \) -name \*.js,find all files/directories with '.js' extension under current directory tree without descending into  and ignoring './directory' completely
"echo ""$(basename $(pwd))""",print the base name of the current working directory
find . -exec grep foo {} +,"search the files from the current directory tree for ""foo"""
rm -r $TMPDIR,"recursively removes $tmpdir folder, prompting user on each deletion."
"find $(/usr/ucb/ps auwwx | grep weblogic | tr ' ' '\n' | grep security.policy | grep domain | awk -F'=' '{print $2}' | sed -e 's/weblogic.policy//' -e 's/security\///' -e 's/dep\///' | awk -F'/' '{print ""/""$2""/""$3""/""$4""/somefile.cf""}' | sort | uniq) 2> /dev/null -exec ls {} \; -exec cat {} \;",find and display contents of somefile.cf in a weblogic domain directory
"find . -name ""*.rb"" -type f -exec chmod 600 {} \;",change permissions to 600 for all regular .rb files in the current directory tree
top -n 1,display info on most cpu-intensive processes once and exit.
find /var/www ! -user apache -print0 | xargs -0,find files/directories that isn't owned by the user 'apache' under /var/www
shopt -s histappend,enables shell option 'histappend'.
find /media/Movies -type f -mtime -30 -exec ln -s {} /media/Movies/New/ \;,create a soft link of the files in the folder /media/movies which have been modified in the last 30 days
doFirst= true,run the command 'true' with an empty environment variable dofirst
find /etc/. ! -name . -prune,print the list of files and directories of the /etc directory
"find /some/path -name ""*rb"" -o -name ""*yml"" | xargs grep -sl ""some_phrase"" | xargs sed -i -e 's/some_phrase/replacement_phrase/g'","find all .rb and .yml files in the /some/path directory tree and replace ""some_phrase"" with ""replacement_phrase"" in them"
find . -type f -exec echo mv -t . {} +,find all regular files in the current directory tree and print a command to move them to the current directory
find . -not -iwholename './var/foo*' -exec chown www-data '{}' \;,"change the owner of all files in the current directory tree excluding those who match ""./var/foo*"" to ""www-data"""
find . -uid 0 -print,find all files/directories under current directory tree that are owned by 'root'
find . -type f -print0 | xargs -0 grep -cH '.' | grep ':16$',search for all regular/normal files in current folder and display all the files which contain 16 lines
timeout 5 ssh user@ip,execute the ssh command and kill it after 5 seconds
chown -R :lighttpd /var/lib/php/session,"recursively change the group of all files in ""/var/lib/php/session"" to ""lighttpd"""
sort -nr bb,"numerically sort each line in file ""bb"" and output the result to console from greatest value to least value"
find /usr /home -name Chapter1.txt -type f,search through only the /usr and /home directories for any file named chapter1.txt
find . -name foo.txt,find file named foo.txt under current directory.
"find /dir/to/search/ -name "".*"" -print","display all the hidden files in the directory ""/dir/to/search/"""
find . -type f -exec sh fixname.sh {} \;,run script `fixname.sh' for each regular file from the current directory tree
find -type f -print0 | xargs -0 sed -i .bakup 's/company/newcompany/g',replace 'company' with 'newcompany' in all files under current directory and keep backups with .bakup extension
"watch -n 1  ""mysqladmin -u root -pXXXXX processlist | grep tablename""  | tee -a /root/plist.log","execute ""mysqladmin -u root -pxxxxx processlist | grep tablename"" every second and append output to ""/root/plist.log"""
find / -type f|awk -F'/' '{print $NF}'| awk 'length($0) < 25',search the file system for regular files whose pathnames are shorter than 25 characters
"grep -v ""#"" -R  /var/spool/cron/tabs",processes all files recursively in /var/spool/cron/tabs folder and filters out all strings with '#'.
env $(cat .env | xargs) rails,set environment variables using assignments are listed in '.env' file and run 'rails' command with defined environment
"find . -type l -exec readlink -f '{}' \; | grep -v ""^`readlink -f ${PWD}`""",find all target files outside the current working directory with symbolic links in the current working directory
find dir -name \*~ | xargs echo rm | ksh -s,remove all *~ files under dir
"echo ""30 * * * * touch $(pwd)/washere2"" | crontab","set a crontab to create or update the timestamp of ""washere2"" in the current directory every 30 minutes."
find / -name passwd,find all files name passwd in the root directory and all its sub-directories.
find ./ -type f -print,print the list of all regular files residing in the current directory and below
find  -name '*-*x*.*' | xargs rm -f,remove files matching pattern '*-*x*.*' from the current directory tree
find . -type f -mtime +7 | xargs tar -cvf `date '+%d%m%Y'_archive.tar`,find files that were modified more than 7 days ago and archive them
"ip addr show en0 | awk '$1 == ""inet"" {gsub(/\/.*$/, """", $2); print $2}'",gets ip address of 'en0' network interface.
find -name '*.php' | xargs cat | wc -l,count all the lines of all php files in current directory recursively
"script=""`readlink -f ""${BASH_SOURCE[0]}""`""","save the absolute path of the current script to variable ""self"""
find . -type f –iname stat*,find all regular files that start with stat
find . -name 'abc' -type f -exec grep -q xyz {} +,"return 0 if at least one ""abc"" file in the current directory tree contains text ""xyz"""
"ls -l | grep ""^d"" | awk -F"" "" '{print $9}'","filters only directories from long file listing of a current directory, and prints their names."
find . -type f -executable -exec sed -i 's/foo/bar/g' {} +,replace the word foo to bar in the current folder in all the regular/normal files which have execute permission  (does not update the file)
echo 987654321 | rev | cut -c 4- | rev,"remove the last 3 characters from 987654321, keeping only 987654"
find . -path ./.git -prune -o -print -a \( -type f -o -type l -o -type d \) | grep '.git',check if there any files from the .git folder after excluding it using the prune command
"find . -iname ""*.txt"" -exec du -b {} + | awk '{total += $1} END {print total}'",get the disk space used by all *.txt (case insensitive) files/directories under current directory
shred -uzn 35 filename,"overwrites file 'filename' with random content 35 times, finally writes it with zeros, truncates and deletes."
"awk '{print(NR""\t""$0)}' file_name | sort -t$'\t' -k2,2 | uniq -u --skip-fields 1 | sort -k1,1 -t$'\t' | cut -f2 -d$'\t'","remove duplicate lines in ""file_name"" and print the output on stdout"
find . ! -user john,display all files in the current folder which do not belong to the user john
tar -I 7zhelper.sh -cf OUTPUT_FILE.tar.7z paths_to_archive,create an archive using 7zhelper.sh as a compress program
mv /mnt/usbdisk/[^l]* /home/user/stuff/.,"move all files and directories not starting with ""l"" in ""/mnt/usbdisk"" to ""/home/user/stuff/."""
"find -P .  -maxdepth 1 -type l -exec echo -n ""{} -> "" \; -exec readlink {} \;",display all symlinks and their targets in the current directory
"alias c1=""awk '{print \$1}'""","set alias ""c1"" for command ""awk '{print \$1}'"""
"find -path ""*/test"" -type d -delete","remove all directories called ""test"" from the current directory tree"
"HOSTNAME=""`hostname`""","save the system host name in variable ""hostname"""
"ssh -o ControlPath=""$MASTERSOCK"" -MNf ""$@""","ssh using parameters in $@ in master mode in the background without executing any commands and set the controlpath to ""$mastersock"""
"find . -okdir diff {} /some/other/path/{} "";""",compare *.csv files in the current directory tree with their analogs stored in /some/other/path/ prompting before running `diff'
"find kat -name dok.txt -exec bash -c 'echo -e ""\nAutor: Jan Kowalski"" >> {}' \;","search for the file ""dok.txt"" in the kat folder and if it sis present then print the echo statement"
"host=$(dig +short -x ""${ip_address}"" | sed 's/\.$//g')","saves hostname that matches ${ip_address} in 'host' variable, without trailing dot."
pgrep -u w | grep ssh| awk '{print $1}' ssh,finds pids of ssh sessions of all logged in users.
find -anewer /etc/hosts,find all files in the current directory and sub-directories that were accessed after modifying /etc/hosts
mount /windows,"mount ""/windows"" using /etc/fstab entry"
"find $1 \( -name ""*$2"" -o -name "".*$2"" \) -print",find all the files in the directory which is pointed by $1 variable ending with the name held in the variable $2 or having the extension of value saved in the argument $2.
xargs -n 1 dirname <somefile.txt | xargs mkdir -p,"make directories and parents for each file path in ""somefile.txt"" excluding the file name"
find /work -name chapter1,search for the file chapter1 in the folder /work
find . -type f -not -name '*txt' -print0 | xargs -0 rm --,"remove all regular files from the current directory tree whose names do not end with ""txt"""
find . | cpio -pdumv /path/to/destination/dir,"copy all files from the current directory tree to /path/to/destination/dir preserving their times, permissions, and ownership"
find / -mount -name 'win*',"find all the files in the file system that start with ""win"" and searched only in the mounted file systems"
"zcat file.gz | awk -F'[|""]' '$5>5'","unzip ""file.gz"" and print each line with the 5th "" or | separated field greater than 5"
find . -iname CVS -type d | xargs rm -rf,"remove all ""cvs"" directories from the current directory tree, ignoring the case"
"find . ! -name . -prune -name '*.old' -exec sh -c 'mv ""$@"" ../old/' sh {} +","move all files matching patterns ""*.old"", "".old"", "".*.old"" from the current directory to directory ""../old/"""
"launcherfile=$(mktemp -p ""$appdir"" ""$template"")","creates temporary file in $appdir variable with name formatted like expression in variable ${template}, and saves path to it in 'launcherfile' variable."
wc -l **/*.php,counts lines in each of *.php files in a current folder and subfolders and prints total count as well.
paste -s -d' \n' input.txt,"concatenate with a space every other line in ""input.txt"""
find . -type f -exec chmod 775 {} \;,find all files/directories under current directory and set their permission to 775
find . -name \*.tex,display all the tex files in the current folder
find / -type d -name Tecmint,find all directories whose name is tecmint in / directory
echo $(find / -type f -perm -002) has world write permissions,find files with 002 permission in entire file system and print them with the string 'has world write permissions' printed at last
sudo mv $PHANTOM_JS /usr/local/share,"move ""$phantom_js"" to ""/usr/local/share"" directory"
"find . -name ""*.c"" | xargs -n3",list all the .c files under the current directory and below in a 3 column format
chmod g+w * ...*,"add group write permission to all files matching ""*"" or ""...*"""
comm -12  <(ls 1) <(ls 2),"print common files of directory ""1"" and ""2"""
gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -dl1000000 - file,"decompress ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" to files with a 1000000 line limit"
find / -mtime -2 -print,find all the files in the entire file system which have been modified in the last 48 hours
"mydir=$(mktemp -d ""${TMPDIR:-/tmp/}$(basename $0).XXXXXXXXXXXX"")","creates temporary folder in a tmpdir folder or /tmp folder if tmpdir doesn`t defined, with folder name like current shell name and 10-letter suffix, and saves created path in 'mydir' variable."
find -daystart -mitime -1,find all the files that have been modified in the last 2 day
"find / -size +50M -iname ""Dateiname""","find all the files with the name ""datainame"" in the file system which are bigger than 50mb"
mkdir alpha_real,create a directory named 'alpha_real' in the current directory
"alias | awk '/^alias /{print substr($2,1,index($2,""="")-1)}'",list all names of the aliases
find . -type f -mmin 0,find all the files in the current folder which have been modified in the last one minute
TR=`which tr`,"save full path of command ""tr"" to variable ""tr"""
"find . -name ""*.log"" -exec egrep -l '^ERROR' {} \;",search for the regex '^error' in all *.log files under current directory
"find /var/adm/logs/morelogs/* -type f -prune \( -name ""admin.*"" -o -name ""*.user"" -o -name ""*.user.gz"" \) -print","display all the files ending with "".user"" or beginning with ""admin"" or ending with "".user.gz"" in /var/adm/logs/morelogs/ and excluding  all regular files"
yes 123456789 | grep --line-buffered . | { head -n 1; head -n 1; },"continuously print ""123456789"" and line buffer the output via ""grep"" for input to ""{ head -n 1; head -n 1; }"""
find -mindepth 1 -depth -print0 | grep -vEzZ '(\.git(/|$)|/\.gitignore$)' | xargs -0 rm -rvf,remove all files/directories in the current directory without '.git' and '.gitignore'
find /path -type d | xargs chmod 0755,change permissions to 0755 for all directories in the /path directory tree
find / -name 'program.c' 2>errors.txt,"search for the file ""program.c"" in the entire file system and save the errors to the file errors.txt"
find /etc -type f -ctime -1,find files/directories modified within the last day under /etc
"cd -P ""$dir1""","change directory to ""$dir1"" and resolve any symlinks in the resulting path"
"cp -R ""$1"" ""$2""","recursively copies ""$1"" to ""$2""."
"find ""$SOURCE"" -type f -iname '*.jpg'","find all jpg files under the ""$source"" directory and below"
chgrp pub public,changes group ownership of 'public' to 'pub'.
find test -type f  -size 0 -exec mv {} /tmp/zerobyte \;,search for all zero-byte files and move them to the /tmp/zerobyte folder
find /home/mywebsite/public_html/sites/all/modules -type d -exec chmod 750 {} +,find all directories under /home/mywebsite/public_html/sites/all/modules and set their permission to 750
mv new old -b,"rename ""new"" to ""old"" and make a backup if ""old"" exists"
"find -type f -exec perl -e 'printf qq[%s => %s\n], scalar @ARGV, length join q[ ], @ARGV' {} +",find all regular/normal files in the current folder and display them in the a format.
find /srv/abc/ -type d -empty -exec rmdir {} \;,remove empty directories from directory tree /srv/abc
find . -exec cmd1 \; -exec cmd2 \;,find all files/directories in current directory and execute multiple anded commands (cmd1 and cmd2) for each file
"su -s /bin/bash -c ""set -a; \                     . /path/to/nullmailer-vars; \                     set +a; \                     /usr/sbin/logcheck"" logcheck","run command ""set -a; . /path/to/nullmailer-vars; set +a; /usr/sbin/logcheck"" with a bash as user root"
find / -user root -name tecmint.txt,find all or single file called tecmint.txt under the / directory of owner root
fold -80 your_file | more,"display the contents of 'your_file' wrapping lines to maximum 80 characters, and waiting for user interaction after each page."
gunzip < some.file.gz,"unzip ""some.file.gz"" to standard output"
whatever | tee logfile.txt,"write output of ""whatever"" to standard output and to ""logfile.txt"""
ls -b,list files with c-style escape sequences for non-alphanumeric characters
sudo chown root:www-data /foobar/test_file,"change owner to ""root"" and group to ""www-data"" of ""/foobar/test_file"""
bind -f ~/.inputrc,load keybindings from a file ~/.inputrc
find . -maxdepth 1 -type f -name '*.txt' -not -name File.txt,"find all *.txt files under the current directory whose names are not ""file.txt"""
"find . -iname ""1US*"" -exec rm {} \;",delete all 1us* (case insensitive) files under current directory
"find . -type f -exec grep ""example"" '{}' \; -print",search for 'example' in all regular files under current directory tree and also print the filenames
find -type f -perm /110,find files that match the executable bit for owner or group
"join -t, -o 1.2,2.2,2.3 -a 1 -e 'no-match' - <(sort file1.txt)","merge colon-separated information from standard input and file1.txt where the first field of both files matches, print unpairable lines from standard input, replace missing fields with ""no-match"", and output the second field from standard input and the second and third field from file1.txt"
chmod g+w $(ls -1a | grep -v '^..$'),"add group write permission to all files and directories in the current directory including hidden files and excluding "".."""
find -name *.php -print | xargs -L1 awk 'NR>1{exit} END{if(NR==1) print FILENAME}',find all php files under current directory that contain only one line
find . 2>&1 | grep -v 'permission denied' > files_and_folders,display all files in current directory discard any errors and save the output to a file
"mv $(find . -name ""*shp*"" -printf ""%h\n"" | uniq)/* ../shp_all/",find all *shp* directories under current directory and move their contents to ../shp_all/
rsync -a --exclude .svn path/to/working/copy path/to/export,"archive ""path/to/working/copy"" to ""path/to/export"" excluding files or directories named "".svn"""
find /usr/src -name CVS -prune -o -depth +6 -print,find files and directories that are at least seven levels of nesting in the directory /usr/src excluding cvs directory
"alias psgrep=""ps -ef | grep""","set alias ""psgrep"" for command ""ps -ef | grep"""
"gunzip -c mygzfile.gz | grep ""string to be searched""","search ""mygzfile.gz"" for ""string to be searched"""
find $backup_path/* -mtime +30 -exec rm {} \;,remove all files in the $backup_path directory recursively that were last modified more than 30 days ago
"size=""$(zcat ""$file"" | wc -c)""","save the number of bytes in ""$file"" after decompression into variable ""size"""
find . -type f -name \*.ext | xargs grep foo,"display files ending with "".ext"" in current folder which are present in the file ""foo"""
find ${userdir}/${i}/incoming -mtime +2 -type f -size +200557600c -exec rm {} \;,find files with size more than 200557600b and which are more than 2 days old under  ${userdir}/${i}/incoming directory and remove them
find .|xargs perl -p -e 's/ /\n'|xargs grep aaa|wc -l,search for aaa in all files under current directory and count the number of matches
find . -ctime -1 -print,locate files whose status was changed less than 1 day ago
"paste -s -d"",""",merge each line of standard input into a single comma separated line
sudo chown $(whoami):$(whoami) /usr/local/rvm/gems/ruby-2.0.0-p481/ -R,"recursively change owner and group of ""/usr/local/rvm/gems/ruby-2.0.0-p481/"" to the current user"
"find . -name ""*bsd*"" -print","search the current directory and its sub-directories for any file that has ""bsd"" somewhere in its name."
file --mime myfile.txt,display mimetype of myfile.txt.
find ./ -name *.ogv -exec bash -c 'myfile {}' \;,"execute ""myfile"" on all .ogv files from the current directory tree"
find . -name modules \! -exec sh -c 'find {} -mindepth 1 -name modules|read' \; -print,find all directories named 'modules' that don't include any other directory named 'modules'
sudo find ./storage/ -type d -exec chown apache:laravel {} \;,"change all directories under ""./storage/"" to owner ""apache"" and group ""laravel"""
"echo ""Welcome $(whoami)!""",print a welcome message with the current user's user name
find . -name \*.xyz -exec rm {} \;,recursively removes all files like '*.xyz' in a current folder.
watch -n 1 'ps aux | grep php',"execute ""ps aux | grep php"" every second"
find . -type f  -mtime +7 | tee compressedP.list | xargs -I{} -P10 compress {} &,compress in parallel regular files in the current directory tree that were last modified more than 7 days ago
find . -maxdepth 1 -type f -delete,delete all the normal files in the current folder and do not delete those in the subfolders
"find . -iname ""$srch1*"" -exec grep ""It took"" {} \; -print |sed -r 'N;s/(.*)\n(.*)/\2 \1/' > temp1",search for 'it took' in all $srch1* (case insensitive) files under current directory and run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output and redirect the final output to temp1 file
ls -d !(*.[ch]),lists all content in a current folder but names like *.c and *.h.
find . -name 'text.txt' -print -exec cat {} \;,find all files named 'text.txt' under current directory tree and display their contents
"find . -type f -newermt ""2014-01-01"" ! -newermt ""2014-06-01""",display all files which have been modified between two dates in current folder
"find . ! -perm -g+r,u+r,o+r -prune",find all files in the current directory do not display the files which do not have read permission to all users
"find . -mtime +7 -name ""G*.html""","find all ""g*.html"" files modified more than 7 days ago in the current directory tree"
find . -type f -name “k*.*” -mmin -360 -exec ls -l ‘{}’ ; | xargs -0 /bin/rm -f,display a long list and delete all the regular/normal files in the current folder starting with the word k which have been modified in the last 4 hours(360 minutes)
"yes | sed -n '200000000,${=;p};200000005q'","output line number and lines 200000000 through 200000005 from the infinite input of ""y"""
"find . -type f -name ""*.txt"" -exec rm -f {} \;",fiind and remove multiple files such as *.mp3 or *.txt
find -name '*~' -delete,"delete all the files ending with ""~"" in current folder"
date -d @1267619929,format time string @1267619929 according to default time format
find -name *monfichier*.ogg,"find all the ogg files in the current directory which have the word ""monfichier"" in their name"
apropos -r '.*',lists all manual pages.
"find . -name ""rc.conf"" -exec chmod o+r '{}' \;",add read permission for 'other' for all files/directories named 'rc.conf' under current directory tree
"find -name ""*test*"" -depth",find files/directories containing 'test' in their names and display the directory contents before the directories themselves
find /home/john -type d -name test -print,find all directories with the name test in a directory
find dir1 ! -type d |xargs wc -c,get the sizes (and total size) of all files under dir1 directory
"find . -name ""*.pl"" -ls",display long list of all the perl files in the current folder
find /usr/share -type d,display all the directories in the folder /usr/share
"find ""$dir"" -maxdepth 1 -type f -iname '*.txt' | sort -n",find all files with '.txt' (case insensitive) extension under $dir directory non-recursively and sort them numerically
"find . -name ""*bmp"" -print0 | xargs -0 -l -i basename ""{}"" "".bmp"" | xargs -0 -l -i convert ""{}.bmp"" ""{}.png""",convert all bmp files to png in the current directory tree
g++ omnitest.cpp -E | less,preprocess c++ file 'omnitest.cpp' (resolve all preprocessor directives) and page interactively through the result.
head -c -N file.txt,prints file.txt without the last n bytes
find -type d -empty -exec rmdir -vp --ignore-fail-on-non-empty {} +,delete all empty directories and directories that contain only empty directories under current directory
"dig +trace +additional dragon-architect.com | awk 'NR==3' RS=""\n\n""","request dns record for  domain 'dragon-architect.com' with tracing and additional section, and extract third block of text, separated between two new lines."
crontab -l,list all cron jobs for current user.
ps -A|grep mysql,find the process id of mysql
gunzip -t file.tar.gz,"test if ""file.tar.gz"" is corrupt"
"find project ! -type d -print | egrep '/,|%$|~$|\.old$|SCCS|/core$|\.o$|\.orig$' > Exclude",search for all the files excluding directories ending with old or sccs or core or orig in the project folder and save the output to the file exclude
find /res/values-en-rUS /res/xml -iname '*.xml',search directories /res/values-en-rus and /res/xml for xml files
"sudo find / -xdev -type f -size +100000 -name ""*.log"" -exec gzip -v {} \;","compress and display the gzip compression ratio of every file on the system that is greater than 100000 bytes and ends in "".log"""
find /etc/ -type f -exec ls -s {} + | sort -n | head -3,display the three smallest files by size in a folder.
find /dir/to/search/ -type f -name 'regex' -print,"find regular files named ""regex"" under and below /dir/to/search/"
find . -name \*.exe -o -name \*.dll -o -print,"search the current directory tree for files and directories whose names do not end in "".exe"" and "".dll"""
thisHOSTNAME=`hostname`,"save host name in variable ""thishostname"""
"echo ""$url"" | cut -d'/' -f4-",extract path and query part from url
df -k $FILESYSTEM | tail -1 | awk '{print $5}',print percentage of the space used on the $filesystem.
split -n2 infile,"split ""infile"" into 2 files of about equal size"
cat file | xclip -selection clipboard,"save the contents of ""file"" in the clipboard"
"false | echo ""${PIPESTATUS[0]}""",returns exit status 0 and prints exit status of previous command.
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | xargs mkdir,make a directory in the current working directory with a random 32 alphanumeric character name
find . -not -empty -type f -exec ls -s {} \; | sort -n  | head -5,display the 5 smallest files in the current directory and its sub-directories ignoring any empty files.
sudo chown -R ec2-user:apache /vol/html,"recursively change the owner to ""ec2-user"" and group to ""apache"" of all files in ""/vol/html"""
find . -exec echo xx{}xx \;,"print the list of files in the current directory tree with ""xx"" preceding and following each filename"
sudo yum update openssl --skip-broken,"updates 'openssl' package, skipping packages with broken dependencies."
"find . -type f \( -iname "".*"" ! -iname "".htaccess"" \)",search the current directory tree for hidden files skipping .htaccess
"echo ""${line}"" | egrep --invert-match '^($|\s*#|\s*[[:alnum:]_]+=)'",shows strings that not match regex '^($|\s*#|\s*[[:alnum:]_]+=)'
"find ""$path"" -type f -print0 | sort -z | xargs -r0 md5sum | md5sum",calculate md5 sum of the md5 sum of all the sorted files under $path
find / -name core -print | xargs echo > /tmp/core.log,search the entire file system and save all the core file paths into a file
"find . -name ""*.sh"" -print0 | xargs -0 rm -rf",find all .sh files in the current directory tree and remove them
find ./ -type f \( -name '*.r*' -o -name '*.c*' \) -print,find all regular files with '.r' and '.c' in their names under current directory tree
"find . -iname ""*needle*""","search the current directory tree for files containing ""needle"" in their names"
find / -type f -exec grep bananas {} \; -print,search for the word bananas in the all the regular/normal files in the entire file system
find -name file -quit,"search for a file ""file"" in current folder and if the file is found quit !"
find . | xargs perl -p -i.old -e 's/oldstring/newstring/g',replace a string in all the files in the current folder
find . -path ./source/script -prune -o -type f -print;,find all regular files in the current directory tree ignoring directory ./source/script
df -i $PWD,report file system containing path to the current working directory inodes usage.
find . -type f -atime $FTIME,find all regular files under current directory tree that were accessed $ftime days ago
split -l 600 list.txt,"split ""list.txt"" into files with at most 600 lines each"
find /logs -type f -mtime +5 -exec rm {} \;,remove all the log files which have not been modified in the last 5 days
"read -n1 -p ""Pick a letter to run a command [A, B, or C for more info] "" runCommand","read a single character from standard input into variable ""runcommand"" with the prompt ""pick a letter to run a command [a, b, or c for more info] """
"tar -czf /fss/fi/outfile.tar.gz `find /fss/fin -d 1 -type d -name ""*"" -print`",archive the list of 1st level subdirectories in /fss/fin to /fss/fi/outfile.tar.gz
"echo ""$(comm -12 <(echo ""$a"" | fold -w1 | sort | uniq) <(echo ""$b"" | fold -w1 | sort | uniq) | tr -d '\n')""","print characters in variable ""$a"" that exist in variable ""$b"""
mv file.txt.123456 $(ls file.txt.123456 | rev | cut -c8- | rev),rename file file.txt.123456 to file.txt
find . -size 300M,find all files in current folder which are exactly 300mb
find . -type f -exec grep -i California {} \; -print | wc -l,"find all files under and below the current working directory with the word california in the file (case insensitive), and count the number of lines in the output"
cd /home/`whoami`,change directory to the current user's home directory
find ... -print0,print all files/directories under ... directory by terminating their paths with a null character
find /data/SpoolIn -name job.history -exec grep -l FAIL {} \; | wc -l,count the number of files named 'job.history' under '/data/spoolin' directory tree that match 'fail' in their contents
who -m | awk '{print $1;}',print the current user name associated with standard input
"find ""$d/"" -type d -print0 | xargs -0 chmod 755",change permission to 755 for all directories under $d directory tree
"tree -dfi -L 1 ""$(pwd)""",list the full path of each directory in the current working directory
gzip -dc libxml2-sources-2.7.7.tar.gz | tar xvf -,decompress and extract 'libxml2-sources-2.7.7.tar.gz'
zcat compressFileName | tar xvf -,"unzip and expand tar archive ""compressfilename"""
find ./ | grep -E 'foo|bar',"find all files under the current directory, filtering the output through a regular expression to find any lines that contain the word foo or bar."
"printf ""operator: `finger ${USER} | grep Name: | cut -f3 -d:` \n""","print ""operator: "" followed by the full name of ""${user}"""
find -ipath './projects/insanewebproject',find files/directories under current directory that matches './projects/insanewebproject' in their paths
rsync -a /mnt/source-tmp /media/destination/,"archive files in ""/mnt/source-tmp"" to ""/media/destination"""
echo `sed -e 's/$/\ |\ /g' file`,"print the contents of ""file"" with "" | "" appended to each line"
find bills -type f | xargs -I XX sort -o XX.sorted XX,"sort each file in the bills directory, leaving the output in that file name with .sorted appended"
split -b 10M -d  system.log system_split.log,"split ""system.log"" into files of at most 10 mib in size with a numeric suffix and prefix ""system_split.log"""
cat <(yes | tr \\n x | head -c $BYTES) <(sleep $SECONDS) | grep n,"use ""$bytes"" amount of ram for ""$seconds"" seconds with no output"
find . -size +1000k -name *.log -print0 | xargs -0 ls –lSh,display a long listing of all the log files in the current folder which are bigger than 1mb
join -1 2 -2 1 text.txt codes.txt,merge files 'text.txt' and 'codes.txt' by outputting any lines whose second field in the first matches the first field in the second.
scp -v user@remotehost:/location/KMST_DataFile_*.kms,"connect to host ""remotehost"" as ssh user ""user"" to copy remote file ""/location/kmst_datafile_*.kms"" to current directory on local host."
find originals -name '*.jpg' | xargs -1 -P 2 makeallsizes,excute script makeallsizes with all '*.jpg' file under originals directory in 2 processes parallelly
abspath=$(readlink -m $path),"save absolute path of ""$path"" that may not exist to variable ""abspath"""
cp * .hiddendir -R,recursively copies everything under the 'current' folder to the '.hiddendir' folder.
find -perm -111 -type f,find regular files with permissions less than 111
"find -name '*.php' -exec bash -c '[[ ""$(wc -l < ""$0"")"" -eq 1 ]] && echo ""$0""' '{}' ';'",find all php files under current directory that contain only one line
"find ""$DIRECTORY_TO_PROCESS"" -type f -iregex "".*\.$FILES_TO_PROCES"" ! -name ""$find_excludes"" -print0","find all regular files under $directory_to_process matching the case insensitive regex "".*\.$files_to_proces"" where $files_to_proces is a variable and not matching the name pattern '$find_excludes' where $find_excludes is another variable, then print the files with null delimiter instead of newline"
find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*',find all files/directories starting with 'readme' (case insensitive) under '/usr/share/doc' directory tree
"ln -s ""$file""","create a symbolic link in the current directory to ""$file"""
sudo chown hduser:hadoop {directory path},"change the owner to ""hduser"" and group to ""hadoop"" of ""{directory path}"""
mkdir $(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1),make a directory in the current working directory with a random 32 alphanumeric character name
find / -user edwarda -print | cpio -ovBc > /dev/rfd0,create a backup of all the files in the file system which belong to the suer edwarda to the floppy
"find . -name "".txt"" | grep a",find all text files in current folder and display all files that have the alphabet a in their name
"find ! -newermt ""apr 01 2007"" -newermt ""mar 01 2007"" -ls",list all files in the current directory tree that were last modified in march 2007
df -T $dir | tail -1 | awk '{print $2;}',print type of the file system containing path $dir.
uuencode <(head -c 200 /dev/urandom | base64 | gzip),"compress the base64 encoded first 200 characters of ""/dev/urandom"" as input to uuencode"
"find . -type f ! -regex "".*/\(textfile.txt\|backup.tar.gz\|script.php\|database.sql\|info.txt\)"" -delete","remove all regular files from the current directory tree except textfile.txt, backup.tar.gz, script.php, database.sql, info.txt"
bunzip2 -c compressedfile.bz2 | yourfilterprogram,redirects content of extracted file to a pipe
find -L . -type l -delete -exec ln -s new_target {} \;,find & replace broken symbolic links
"find -name ""<fileName>""",find <filename> files/directories under current directory
find . -ls > /tmp/files.txt,list all files/directories under current directory and redirect it to /tmp/files.txt
unset array[`shuf -i 0-4 -n1`];,unsets random one from first five array members.
find /root/Maildir/ -mindepth 1 -type f -mtime +14 | xargs rm,this will remove all files (type f) modified longer than 14 days ago under /root/maildir/ recursively from there and deeper (mindepth 1
cp -R t1/ t2,"copy the entire directory tree under t1 to t2, do not create a containing t1 directory in t2."
"find ""/zu/durchsuchender/Ordner"" -name ""beispieldatei*"" -print0 | xargs -0 grep -l ""Beispielinhalt""","print the list of files from the ""/zu/durchsuchender/ordner"" directory tree whose names begin with ""beispieldatei"" and which contain string ""beispielinhalt"""
find . -maxdepth 1 -name '*.txt' -mtime +2,find all the *.txt files in the current directory older than 48 hours
shopt -u dotglob,disables shell option 'dotglob'.
chgrp -R www-data /var/tmp/jinfo,recursively changes group ownership of every file in '/var/tmp/jinfo' to 'www-data'.
"ls | xargs -I {} echo {}, | xargs echo","lists all files in a current folder, separating names with comma."
"find -type l | while read f; do if [ ! -e ""$f"" ]; then ls -l ""$f""; fi; done",find broken symlinks in the current directory tree
"tac filename | sed 4,6d | tac",removes the 4th-from to 6th-from last lines in file
"find . -name ""*.VER"" -exec grep 'Test_Version=' '{}' ';' -print;","search the .ver files from the current directory tree for string ""test_version='"
find . -name test -type d -exec rm -r {} +,"remove all directories called ""test"" from the current directory tree"
dig @some.other.ip.address domain. ns,print ns record for domain 'domain.' from 'some.other.ip.address' nameserver
"paste -d """" - -",combine every two lines of standard input
yes | head -n10 > 10lines.txt,"write 10 lines of ""y"" to file ""10lines.txt"""
find $HOME/html/andrews-corner -exec grep -q 'slrn' '{}' \; -print,"search for the word ""slrn"" in all the files in the folder $home/html/andrews-corner"
"mktemp -dt ""$(basename $0).XXXXXXXXXX""","creates temporary folder within tmpdir, with name like current shell name and 10-letter suffix."
echo `whoami`,print the user name of the current user
find arch etc lib module usr xpic -type f | xargs chmod -x,"unset the executable bit of all regular files from directory trees arch, etc, lib, module, usr, xpic"
find ~ ! -user ${USER},find all files in the home directory tree that are owned by another user
"read -r -p ""${1:-Are you sure? [y/N]} "" response","read a line from standard input into variable ""response"" ignoring backslash escapes and using the prompt ""${1:-are you sure? [y/n]} """
make 2>&1 | less,page through both standard output and standard error of 'make'.
sort ports.txt | uniq -c | sort -r,"print a count of all unique lines in ""ports.txt"" sorted from most frequent to least frequent"
"find . -name "".DS_STORE"" -delete","find all files in the current directory tree whose names are "".ds_store"" and delete them"
find . -iname '*.jpg' -type f -printf +%b,print the sizes of all files from the current directory tree
command > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2),"write standard output of ""command"" to console and append to ""stdout.log"", and write standard error of ""command"" to console and append to ""stderr.log"""
"rsync -a --filter=""-! */"" sorce_dir/ target_dir/","archive files (not directories) in ""sorce_dir"" to ""target_dir"""
ssh -f user@gateway -L 3307:1.2.3.4:3306 -N,forward all connections to client localhost 3307 via the ssh tunnel to gateway and then connect to host 1.2.3.4 to port 3306
find / -path /proc -prune -o -nouser -o -nogroup,locate files not owned by any user or group
find . -name not\* | tr \\n \\0 | xargs -0 rm,"remove all files in and below the current directory whose names begin with ""not"""
find /data1/Marcel -size +1024  \( -mtime +365 -o -atime +365 \) -ls -exec file {} \;,list all files/directories under /data1/marcel with their file information which are greater than 524288 bytes and were modified or accessed more than 1 year ago
find -exec rm '{}' +,remove all files under current directory
find . -name \*.py | xargs sed -i '1a Line of text here',"add ""line of text here"" on top of each *.py files under current directory"
find /  -size +100M -exec rm -rf {} \;,search  all files & directoy from root directory which  are greater then 100m and delete them .
find /tmp -name *.txt,display all the text files in the temp folder
chown $JBOSS_USER $JBOSS_CONSOLE_LOG,"change the owner of ""$jboss_console_log"" to ""$jboss_user"""
diff /destination/dir/1 /destination/dir/2 -r -x *.xml,display differences between /destination/dir/1 and /destination/dir/2 excluding xml files.
find ~ -iname '*.tex',"find all the files in the home folder which end with "".tex"""
"awk -F, 'NR==1 {gsub(/""/,"""",$3);print $3}' ""$(dirname $(readlink -f $(which erl)))/../releases/RELEASES""","find the ""erl"" executable in $path and read the ""releases"" file to extract the erlang release number"
"history | sed -n '2960,2966p'","print lines 2960 to 2966 from the output of ""history"""
"find $1 -name ""$2"" | grep -v '/proc' | xargs grep -Hn ""$3"" {} \;",find all $2 files in $1 path and search for the regex expanded by $3 in those files excluding the files with /proc in their paths
find dir -type f -print0 | xargs -0 md5sum >> file.txt,find all files under 'dir' directory with white space safety in their paths and print their md5 sums into file.txt
"find /apps -xdev -name ""*.log"" -type f -mtime +60 | xargs rm",search for all the log files in the folder /apps which have not been modified in the last 60 days and which are present in the same file system as that of /apps and delete them
sort inputfile | uniq | sort -o inputfile,"replace ""inputfile"" with a sorted unique list of its contents"
"mkdir dir2; tar cvf - dir1/ --exclude ""*/exclude"" | tar xvf - -C dir2","copy entire directory structure from dir1 as a subdirectory of dir2, omitting any file or directory named ""exclude""."
find / -path /proc -prune -o -user account -ls,find out if there are any files on the system owned by user `account'
"find /Path/bar* -name ""file_name*""","search the /path/bar* directories recursively for files matching pattern ""file_name*"""
diff --brief -Nr dir1/ dir2/,"print which files differ between dir1 and dir2, treating absent files as empty"
shopt -s globstar nullglob dotglob,"sets shell options 'globstar', 'dotglob' and 'nullglob'."
rsync -avz --ignore-existing /source folder/* user@remoteserver:/dstfolder/,"archive ""/source"" and all files under ""folder/"" to ""/dstfolder/"" on host ""remoteserver"" as user ""user"" without copying files that already exist"
sudo chown -R $(whoami) ~/.npm,"recursively change ownership of ""~/.npm"" to the current user"
touch -a UEDP0{1..5}_20120821.csv,"ensure all 5 of uedp0{1..5}_20120821.csv files exist, creating empty files for any missing ones (updates the file's timestamps)"
"find . -type f -name ""*.bak"" -exec rm -f {} \;",find all the backup files in the current folder and delete them
"mount -o rw,remount -t yaffs2 /dev/block/mtdblk4 /system","remount ""yaffs2"" filesystem ""/dev/block/mtdblk4"" to ""/system"" as read and write only"
"find . \( -name ""*.php"" \) -exec grep -Hn ""<\?php /\*\*/eval(base64_decode(.*));.*\?>"" {} \; -exec sed -i '/<\?php \/\*\*\/eval(base64_decode(.*));.*\?>/d' {} \;",find all php files in current directory and delete lines matching the regex '<\?php \/\*\*\/eval(base64_decode(.*));.*\?>' in those files
"find $FULFILLMENT $ARCH1 -exec stat -c '%i,%b,%A,%h,%U,%G,%y,%n' {} \;",print a detailed list of all files under and below the two directories given as variables $fulfillment and $arch1
find . -name '*.php' | xargs wc -l,count and show the number of lines for each php files in the current directory tree
"find . -name '*.text' -exec sh -c 'for i do if [ ! -f ""${i%.text}"" ]; then echo == $i; fi;done' sh {} +",find all text files which have extra extensions in the current folder
"find . -type f -and -iname ""*.deb""",find deb packages in the current directory recursively
find plsql -type f  -perm /220 -exec ls -l {} \; 2>/dev/null,"find files that are writable by the user, the group, or both"
find $root_dir -type f,find all files under $root_dir
"echo ""$(hostname):$(cat /sys/block/sda/size)""","print host name followed by "":"" and the contents of ""/sys/block/sda/size"""
cp --remove-destination `readlink bar.pdf` bar.pdf,"copy file linked to by ""bar.pdf"" to ""bar.pdf"""
find  .  -path  './src/emacs'  -prune  -o -print,"display all the files  in the current folder excluding those which are present in ""./src/emacs"" folder"
scp -r prod:/path/foo /home/user/Desktop,"recursively copy /path/foo on host ""prod"" to local directory ""/home/user/desktop"", connecting as ssh username corresponding to local username."
find / -user test1 -exec du -sm {} \;|awk '{s+=$1}END{print s}',"show the sum of disk used by all the files that belong to the user ""test1"" in the entire file system"
find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -exec echo /usr/local/backup{} \;,"print the names of the subdirectories of /usr/local/svn/repos/ prepending ""/usr/local/backup"" to them"
"find / -name ""dir-name-here""",find all files that names are dir-name-here
find /foo/bar -name '*.mp4' -print0 | xargs -I{} -0 mv -t /some/path {},find all *.mp4 files under /foo/bar and move them to /some/path
find /tmp/dir1 -exec echo {} \;,print the pathnames of all files from the /tmp/dir1 directory tree
"find . -name ""*.tex""",display all the tex files in the current folder
"find . -iname '*.txt' -type f -exec sed -i '' 's/[[:space:]]\{1,\}$//' {} \+",remove trailing whitespaces in txt files from the current directory tree
find . -name 'cmn-*\.flac' -print | grep -P './cmn-[\x4e00-\x9fa5]\.flac',"find all "".flac"" files starting with ""cmn-"" and search for files having cjk characters using unicodes"
"find . -name ""D"" -type d","find all directories named ""d"" in the current directory tree"
find /directory/whatever -name '*.tar.gz' -mtime +$DAYS,find all *.tar.gz files/directories under /directory/whatever which were modified more than $days ago
find . -iname a\*.html,find all html files starting with letter 'a' in the current directory and below ignoring the case
sed ':a;N;$!ba;s/\n/ /g' file,"replace all newlines from the contents of ""file"" except the last with spaces"
find /var -maxdepth 2 -type d;,display all the directories in the folder /var and do not go beyond 2 levels during search
foo | tee output.file,"write output of ""foo"" to standard output and to ""output.file"""
find /home/bozo/projects -mtime 1,find all files/directories under /home/bozo/projects directory that were modified 1 day ago
true | true | false | true | false,"saves exit statuses of piped commands in a system variable pipestatus='([0]=""0"" [1]=""0"" [2]=""1"" [3]=""0"" [4]=""1"")'"
"r=""$(uname -r)""","set variable r to currently running kernel release, ie. 4.4.0-81-generic"
"find asia emea -type f -name ""*gz"" | while IFS= read -r fname; do printf ""%s %s\n"" ""$fname"" $(gzip -dc ""$fname"" | wc -l) >> file_count.txt; done",find all *gz files under asia and emea directory and print their names and line counts to file_count.txt
"find A -type d \( ! -wholename ""A/a/*"" \)",find all directories under 'a' directory tree excluding paths containing the directory 'a'
"dir=$(dirname -- ""$1"")",saves location of file $1 in 'dir' variable.
find /path -type d -exec chmod 0755 {} \;,change permissions to 0755 for all directories in the /path directory tree
"for i in `find . | grep "".xml$""`; do bzip2 $i&; done",find all xml files under current directory and archive them to .bz2 archives
"echo ""Some console and log file message"" | tee /dev/fd/3","write ""some console and log file message"" to standard output and ""/dev/fd/3"""
find /etc -newer /etc/motd,find all files/directories under '/etc' directory tree that have been modified after '/etc/motd'
find /usr -mtime +356 -daystart,find all files/directories under '/usr' directory tree that have not been modified in the last 356 days counting days from today
find . -type f -mtime +3 –exec rm –f {} \;,remove all files that were older than 3 days
ls -1tr * | tail -1,print the most recently modified file
find /your/dir -type f -exec touch {} +,"update timestamps of all regular files (ie. excluding directories, symlinks, sockets, etc.) under /your/dir"
hostname -i,print the ip addresses for the current host name
"find . -name ""*.rb"" -or -name ""*.py""",find all *.rb and *.py files/directories under current directory
find .  -perm 775 -print,search the current directory tree for files and directories with permissions 775
"find / -user edwarda -exec rm ""{}"" \;",delete all the files in the file system which belong to the user edwarda
find / -newer /tmp/t,search for all files newer than file /tmp/t
find . -name '*.php' -type f | xargs wc -l,counts lines in each *.php file.
"ln -s ""../config/init""","create a symbolic link in the current directory to ""../config/init"""
bzip2 -t file.bz2,checks compressed file integrity.
"find -newermt ""mar 03, 2010 09:00"" -not -newermt ""mar 11, 2010"" -ls","list all files in the current directory tree that were last modified between ""mar 03, 2010 09:00"" and ""mar 11, 2010"""
find . -regextype posix-egrep -regex '^.*/[a-z][^/]*$' -type f,find all files under current directory matching the posix-egrep type regex '^.*/[a-z][^/]*$'  in their names
cp lib*.so ~/usr/gtest/lib,copies all files like 'lib*.so' to '~/usr/gtest/lib/' directory.
basename /foo/bar/stuff,"output ""stuff"", removing ""/foo/bar/"" from the specified path."
"find -type d -maxdepth 1 ! -name "".*"" -printf ""%f\n""",print the list of non-hidden directories in the current directory
find root -mindepth 2 -delete,delete all files/directories in minimum 2 levels down the root directory
"echo ""123 123 123"" | grep -o 123 | wc -l","count number of occurences of ""123"" in the string ""123 123 123"" (ie. 3)"
find / -size 2048c,find all files in the file system whose size is exactly 2kb
"find "".performance_test"" -path "".performance_test/prune_me"" -prune -o -exec bash -c 'echo ""$0""' {} \;",list all files under .performance_test directory except .performance_test/prune_me directory
"find /nas/projects/mgmt/scripts/perl -mtime 8 -mtime -10 -daystart -iname ""*.pl""",search for all the perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified 8-10 days ago.
cat <(ls 1 | sort -u) <(ls 2 | sort -u) | uniq -d,"list common files in directories ""1"" and ""2"""
"MY_PATH=$(readlink -f ""$0"")","save absolute path of the script filename in variable ""my_path"""
"find . -perm /u=x,g=x,o=x",find all the files in the current folder which have execute permission to all the users
seq 10 | sed '2~2G' | awk -v RS='' '{$1=$1; print}',print numbers from 1 to 10 with 2 values per line
find . -name foo | xargs ls -tl,search for the file foo in  the current folder and display a long listing of it in sorted order of modification date
"find . -name ""vmware-*.log"" -exec rm '{}' \;","remove all files with names like ""vmware-*.log"" from the current directory tree"
find . -maxdepth 1 -type d -empty,find all the empty in the current folder do not search in sub directories
find -mindepth 3 -type d -path '*/p/*' -prune -o -name c -print,"find all the directories  with the name ""c"" in the current folder which are at least 3 levels deep and which are not present in the path ""/p/""."
find path/to/folder -type f -print0 | xargs -0 sha1sum | sha1sum,calculate the sha1 sum for the contents of the regular files in the path/to/folder directory tree
"find . -name *.so -print0 | xargs -0 -I % sh -c 'echo % ; myCommand ""%"" | grep ExpectedResult'",find all *.so files/directories under current directory and run mycommand with the file/directory paths as its argument then search for expectedresult in the output of mycommand
find . -type f -print0 | xargs -0 ls,list all files under current directory with white space safety in their paths
du -sk $(find . -type d) | sort -n -k 1,show directory sizes in kb and sort to give the largest at the end
find / -user root -name FindCommandExamples.txt,find all files/directories named 'findcommandexamples.txt' that belong to the user 'root' in the entire filesystem
find . -xtype l,find all broken symlinks under current directory
echo $c | crontab,"if variable ""c"" is a syntactically correct cron job, erase user's cron jobs and add ""c"" as the only cron job for user."
who | cut -d ' ' -f 1 | grep -e '^ab' -e '1$',"find users whose names begin with ""ab"" and ends with ""1"""
"find . * | grep -P ""[a-f0-9\-]{36}\.jpg""","find all  files that match ""[a-f0-9\-]{36}\.jpg"" of grep"
stdbuf -o 0 ./a | tee output.txt,"print output of command ""stdbuf -o 0 ./a"" to standard output and ""output.txt"""
ifconfig | grep ad.*Bc | cut -d: -f2 | awk '{ print $1}',gets ip addresses of all network interfaces.
md5sum file*.txt,"find md5sums of files named ""file*.txt"""
find . -mtime -7 -print0 | xargs -0 tar -rf /foo/archive.tar,get all files in a current directory modified in the last 7 days
find . -type f -exec file {} \+;,find the type of all the regular/normal files in the current folder (plus takes bulk of files as input to the file command)
FOLDERS=`ls -dm $MY_DIRECTORY/*/ | tr -d ' '`,save a comma separated list of all $my_directory/*/ directories to variable 'folder'
cp -v [MacVim_source_folder]/src/MacVim/mvim /usr/local/bin,"copies '[macvim_source_folder]/src/macvim/mvim' to the  '/usr/local/bin', printing info message on each operation."
"find . -name ""my.txt"" 2>&1 | grep -v ""Permission denied""",find all instances of a file in current folder and display all errors apart from permission denied
rm -rf folderName,"removes 'foldername', and removes all content within if 'foldername' is folder."
mysqldump –add-drop-table –extended-insert –force –log-error=error.log -uUSER -pPASS OLD_DB_NAME | ssh -C user@newhost “mysql -uUSER -pPASS NEW_DB_NAME”,dump a mysql database over a compressed ssh tunnel and use it as input to mysql
"var=( $(whoami && stat -c %i ""/home"") )","save the current user name and inode number of ""/home"" into bash array variable ""var"""
find ~/Programming -path '*/src/*.c',find all the *.c files at any level of directory programming under any 'src' directory
"find . -name ""*.png"" -print0 | xargs -0 mogrify -format jpg -quality 50",find all png images in the current folder and convert the to jpg images.
find . -print0 | xargs -0 touch,update timestamps of all files and directories under current directory.
TMPDIR=`dirname $(mktemp -u -t tmp.XXXXXXXXXX)`,"finds the folder where temporary files would be written to, and save path to it in a 'tmpdir' variable."
split -b 1024m <file_name>,"split ""<file_name>"" into files of at most 1024 mib in size"
find ./ -daystart -ctime +2,find all files in the current folder which have not been changed in the last 48 hours
cd $(dirname $(find . -name $1 | sed 1q)),find all $1 files/directories under current directory and enter into the parent directory of the first one found
"set SCRIPTPATH=`dirname ""$SCRIPT""`",saves path to the $script file in the scriptpath variable.
find /path/to/files -type f ! -newer dummyfile -delete,delete all files under /path/to/files that are not newer than dummyfile
"find /path -type f -name ""*.ext"" -printf ""%p:%h\n""",find all *.ext files/directories under current directory and print their path and parent directory path
head /dev/random -c16 | od -tx1 -w16 | head -n1 | cut -d' ' -f2- | tr -d ' ',"convert the first 16 characters in ""/dev/random"" to a single hexadecimal value"
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort | uniq -c | sort -rn,count the number of unique file extensions in the current directory tree
"read -r -p ""Are you sure? [Y/n]"" response","read a line from standard input with prompt ""are you sure? [y/n]"" and save response in variable ""response"""
"ssh -t example.com ""screen -r; ls""","allocate a pseudo-terminal and execute ""screen -r"" followed by ""ls"" on host ""example.com"""
"find . -iname ""Articles.jpg"" -print0 | xargs -0 ls -l","display a long listing of all images with the name ""articles"" in the current folder ( print0 is used to preserve file names with new line in their name )"
sed 's/$/\r/g' input |od -c,"append ""\r"" on each line of file ""input"" and display the printable characters"
"find /path/to/dir/ -type f -name ""*.py"" -exec md5sum {} + | awk '{print $1}' | sort | md5sum","calculate the md5sum of each "".py"" file under ""/path/to/dir/"", sort the output, and calculate the md5sum of that"
find /home/ABCD/ -mindepth 1 -type f -print,"search directory /home/abcd recursively, starting from one level below, for regular files"
find folder -type f -exec gzip -9 {} \; -exec mv {}.gz {} \;,compress every file in the current directory tree with gzip and keep file extensions the same
find / -xdev -name \*.rpm,"find all files and directories whose names end in "".rpm"", ignoring removable media, such as cdrom, floppy, etc."
mkdir backup,"make directory ""backup"""
rsync -avv source_host:path/to/application.ini ./application.ini,"archive ""/path/to/application.ini"" on host ""source_host"" to current directory."
"find . -name ""*.rb"" -type f | xargs -I {} echo Hello, {} !","find all *.rb (regular) files under current directory and print them on stdout putting the file name/path in-between two string literals 'hello,' and '!'"
"find ""$DIR"" -type f -atime +5 -exec rm {} \;",delete all files in directory $dir that have not been accessed in at least 5 days
export JAVA_HOME=$(readlink -f $(dirname $(readlink -f $(which java) ))/../),"export variable ""java_home"" as symlink resolved absolute path of the 2nd parent directory name of ""java"""
sed 's/\n//' file,print the content of file
tar [your params] |split -b 500m - output_prefix,"split the output of ""tar [your params]"" into files of at most 500 mib in size and use prefix ""output_prefix"""
"find . -name ""*.db"" -type f | while read file ; do sqlite3 $file ""SELECT * FROM table WHERE column1='value'"" | grep value ; if [ $? -eq 0 ] ; then echo $file ; fi done","find sqlite3 databases in the current directory tree, execute query 'select * from table where column1=""value""' on all of them, and search the result for ""value"""
"find . -name '*.andnav' -exec sh -c 'mv ""$0"" ""${0%.andnav}.tile""' {} \;z",rename file extensions for files with specific extension in the current folder
"find ./work/ -type f -name ""*.sh"" -mtime -20 | xargs -r ls -l",print details for all files in the ./work directory tree with extension .sh that were modified less than 20 days ago
"cat $2 | grep -v ""#"" | ssh -t $1 $INTERPRETER",run script $2 on remote host $1 using interpreter $interpreter with pseudo-terminal allocation
"ln -s ""$(which bam2)"" ""$tmpdir""/bam","create a symbolic link named ""$tmpdir/bam"" to the full path of command ""bam2"" found in ""$path"""
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | sed -r 's/[0-9]+\s//g'","find all files under current directory with their size and paths, reverse sort them numerically, then print the first 4 entries by removing all matches to the regex [0-9]+\s from each line of the output"
find . -type d -name .svn -prune -o -print,print the list of files in the current directory tree skipping svn files
"mount / -o remount,rw","remount ""/"" with read and write permission"
w | grep ssh,finds all users logged in via ssh.
"oldalias=$(alias my_command|sed ""s/^[^']*'//; s/'$//"");",save all aliases to the variable $oldalias
find $1 -perm -u+x -exec chmod g+x {} \;,find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories
"find . -name ""*.csv"" -print0",locate all *.csv files under the current directory tree separating the file names with zeroes
top -l 1 -s 0 -stats vprvt -pid 8631,get virtual private memory use of process
sudo mount /dev/xvdf1 /vol -t ext4,"mount ""ext4"" filesystem ""/dev/xvdf1"" on ""/vol"""
find . -print -o -name SCCS -prune,list all files except for those in directory sccs
"ls -l --color=always ""$@"" | egrep --color=never '^d|^[[:digit:]]+ d'",filters only directories from long file listing of the current directory
find . -type d -regextype posix-egrep -regex '\./processor[0-9]*/10\.(1|2)',display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2
"find . -name "".DS_Store"" -exec rm {} \;",remove mac os x desktop services store files
file file-name,display file type description of 'file-name' based on contents.
find . -path ./.git -prune -o -not -name '*git*' -print |grep git,search for the string 'git' in all the files under current directory tree without traversing into '.git' folder and excluding files that have 'git' in their names
screen -X title mynewtitle,create a named screen session
find /directory_path -type f -mtime -1 -print,find all regular files under '/directory_path' directory tree that have been modified within the last day
"find . -name '*song*abc2009*.jpg' | sed 's/\(^.*song.*\)abc2009\(.*.jpg\)$/mv ""&"" ""\1def2010\2""/' | sh","find all files with pattern` '*song*abc2009*.jpg' and replace ""abc2009"" with ""def2010"""
"find .  -name .svn -prune -o -name ""*.c"" -print","display all the "".c"" files in the current folder excluding those that are present in the .svn sub folder"
find . -type f -not -path '*/\.*',"print the list of files in the current directory tree ignoring .svn, .git, and other hidden directories"
find / -inum 199053,find files with inode number 199053
echo $filename | egrep -o '[[:digit:]]{5}' | head -n1,prints a number stored among text in $filename
find . -print|grep ?i dbmspool.sql,search for dbmsspool.sql file in the current folder
find /data -type f -perm 400,find all 400 permission files under /data directory
tmpdir=$(mktemp -d),"creates temporary folder in tmpdir (if defined) or in '/tmp/', and stores path to created folder in 'tmpdir' variable."
find /var/log/,print a list of all files and directories in the /var/log directory tree
"find . |sed 's,\(.*\)/\(.*\)$,\1/\2\t\1/\L\2,'|sort|uniq -D -f 1|cut -f 1",print a list of all duplicate filenames in the current directory tree if there is no white space in filenames
"mount -o remount,size=40G /dev/shm","remount ""/dev/shm"" with a maximum size of ""40g"""
"find . -type f -name "".*",find all of the hidden files in the current directory and its sub-directories.
sudo find . -name test1.h,find all test1.h files under current directory
find . -size 10c -print,search in current directory downwards all files whose size is 10 bytes ( characters ) .
split -n 100000 /usr/bin/gcc,"split ""/usr/bin/gcc"" into 100000 files of about equal size"
brew update,fetches the newest version of homebrew and all formulae from github and perform any necessary migrations.
cat commands-to-execute-remotely.sh | ssh blah_server,"execute all commands in ""commands-to-execute-remotely.sh"" on server ""blah_server"""
find . -mindepth 1 -name 'onlyme*',find all files/directories starting with 'onlyme' in their names under current directory tree in minimum 1 level deep
tar --one-file-system -czv /home | split -b 4000m - /media/DRIVENAME/BACKUPNAME.tgz,"create a compressed archive of ""/home"" and split the contents into files with at most 4000 mib each and use prefix ""/media/drivename/backupname.tgz"""
ls -1 | awk  -vpath=$PWD/ '{print path$1}',prints full path to files in a current folder.
ps -ef | grep postgres,"show all running processes with a name matching ""postgres"""
alias cleanup='rm -Rf -- foo bar baz',"set alias ""cleanup"" for command ""rm -rf -- foo bar baz"""
pwd | awk -F / '{print $NF}',"get current directory name without full path, ie. the part after the last /"
w,display who is logged on and what they are doing
"find Música/* -type f -name "".*"" -exec /usr/bin/rm -i {} \;",delete all the hidden in the folder musica after user confirmation
find / -name linux,find all files named `linux' on the system
find . -regex '.+\.js',find all the javascript files in current folder using regular expressions
"tar --exclude={*.png,*.mp3,*.wav,.git,node_modules} -Jcf ${target_tarball}  ${source_dirname}","create an archive excluding files and directories matching {*.png, *.mp3, *.wav, .git, node_modules}"
find /path/to/search -type l -xtype l,find all broken symlinks under /path/to/search directory
find . -maxdepth 1 -type d -exec chmod -R 700 {} \;,change the permissions of every directory in the current directory and all files and directories within them to 700
"dig @$ns $d A | grep $d | grep -v ""DiG""","request a record from nameserver $ns for domain name $d, filter strings with domain name and exclude lines matching 'dig'"
"nohup sh -c 'for i in mydir/*.fasta; do ./myscript.sh ""$i""; done >output.txt' &","run the sh ""for"" construct in a subshell (runs ./myscript.sh for each file whose name ends with .fasta in mydir) - the subshell is immune to sighup signals sent to it, and the output is redirected to ""output.txt""."
"join -o 1.1,1.2,1.3,1.4 -t, <(sort file1.csv) <(sort file2.txt)","for each line which has a common first field in file1.csv and file2.txt, output the first 4 fields of file1.csv"
jobs -l | grep 'test.sh &' | grep -v grep | awk '{print $2}',get a pid of a process with name 'test.sh &'
cat /dev/urandom | tr -dc '. ' | fold -w 100,"print continuous lines of 100 random characters either ""."" or "" """
crontab -e,"edit current user's cron job list with editor specified by editor environment variable, or default /usr/bin/editor if editor is not set."
my_ip=$(ifconfig en1 | grep 'inet addr' | awk '{print $2}' | cut -d: -f 2),gets ip address of 'en1' network interface.
"find . -iname ""*linkin park*"" -exec cp -r {} /Users/tommye/Desktop/LP \;","find all files and directories in the current directory tree with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp"
"ssh myusername@ssh.myhost.net ""mkdir -p $2""","ssh into ""ssh.myhost.net"" as user ""myusername"" and run command ""mkdir -p $2"""
rsync -Rv src/prog.js images/icon.jpg /tmp/package/,"copy ""src/prog.js"" and ""images/icon.jpg"" to ""/tmp/package/"" keeping relative path names"
find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g',"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under /home/www and below"
find $dir -maxdepth 1 -type f,find all regular files 1 level down the $dir directory
"ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'",calculate the md5 sum of all files in the current directory with the filename printed first
find $HOME -mtime -7,search the home directory tree for files modified less than 7 days ago
find /path/to/junk/files -type f -mtime +31 -print0 | xargs -0 -r rm -f,remove junk files modified more than 31 days ago recursively
myvar=`seq 1 $N | sed 's/.*/./' | tr -d '\n'`,"save ""$n"" number of '.' characters in variable ""myvar"""
"find /home/me/download/ -type f -name ""*.rm"" -exec ffmpeg -i \{} -sameq \{}.mp3 \; -exec rm \{} \;",find .rm files in the /home/me/download/ directory tree and convert them to the mp3 format
find . -maxdepth 1 -type d ! -name . | sort > a,find all directories in current directory (non-recursive) excluding . and print a sorted list in the file a
rsync -avlzp user@remotemachine:/path/to/files /path/to/this/folder,"archive ""/path/to/files"" on host ""remotemachine"" authentifying as user ""user"" and compressing data during transmission, copy symlinks as symlinks."
"find . -name ""*.txt""",find all *.txt files/directories under current directory
yum --nogpgcheck localinstall packagename.arch.rpm,"installs locally located 'packagename.arch.rpm' package, ignoring gpg checking."
shopt -s extglob,sets 'extglob' shell option.
"gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\.\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \; \\012",print linker search path using gcc formatted on new lines
find ./ -name '*.log' | xargs rm,remove all *.log files from the current directory tree
"sed 's/^,/ ,/' test2.csv | tr -d \"" | column -s, -t",output a csv file as a formatted table
find / \( -newer ttt -or -user wnj \) -print,find all files/directories newer than ttt or owned by user 'wn' in entire file system
find *.1  -exec tar czf '{}.tgz' '{}' --remove-files \;,archive all *.1 files/directories to each filename.tgz files and remove the original source
"find . -type f -name '*.m4a' -exec bash -c 'rm ""$0""' '{}' \;",remove all *.m4a files in the current directory and its subdirectories
"{ find . -name '*my key phrase*'; grep -rl 'my key phrase' *; } | sed ""s/^\.\///"" | sort -u","find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output"
alias mkcd='_(){ mkdir $1; cd $1; }; _',"set alias ""mkcd"" for command '_(){ mkdir $1; cd $1; }; _'"
"find . -type f -path ""*/cpp/*""",find all regular/normal files which have cpp folder in their path
md5sum `which c++`,calculate the md5sum of the executable file of command 'c++'
"find . -maxdepth 1 -type d \( ! -name ""bar"" -a ! -name ""foo"" -a ! -name ""a"" -a ! -name ""b"" \) -delete","remove all subdirectories of the current directory, except for ""bar"", ""foo"", ""a"", and ""b"""
"tac | sed '0,/a/ s/a/c/' | tac",replaces the last occurrence of 'a' with 'c'
ping -s www.google.com 2 4,"send 4 ping packets of size 2 to ""www.google.com"" on a solaris machine"
"find . -type f -iname ""*linkin park*"" | cpio -pvdmu /Users/tommye/Desktop/LP","find all files in the current directory recursively with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp, preserving path hierarchy"
"find ./polkadots -name ""image.pdf"" -print0",find all image.pdf files/directories under ./polkadots with null character as the delimiter
find Mainfolder -type f > outputfile,find all files under mainfolder directory and redirect the output to outputfle
"mkdir -p `cut -f2 -d""&"" filetypes.txt | sed 's/[ ,:]//g' | sort -u`","make directories and parents as needed for each unique second ""&"" delimited field with "" "", "","", and "":"" removed in ""filetypes.txt"""
"find -name ""* *"" -type f | rename 's/ /_/g'",find all regular files with space in their names under current directory and rename them by replacing all spaces with _
"find ""$DELETEDIR"" -mindepth 1 -depth -type d -empty -exec rmdir ""{}"" \;",removes all empty folders within $deletedir folder.
find / -type d -gid  100,get a list of directories owned by group id 100
find /usr -name tkConfig.sh,display all instances  of the file tkconfig.sh in the folder /usr
find  /home -type f -perm /a=x,find all executable files in /home directory.
SELF=$(readlink /proc/$$/fd/255),"save the absolute path of the current script to variable ""self"""
"find ./ -name ""*.[ch]pp"" -print > cscope.files",find all the files in the current folder ending with cpp or hpp or chpp and save the output to the file cscope.files.
join -j2 <(sort -k2 file1) <(sort -k2 file2),merge data in file1 and file2 where second field is common in both files
find -type f -name \*.txt -exec install -D {} /dest/path/{} \;,"recursively copy files by file extension, preserving directory structure"
"`which find` ""$@"" -print0;",run the find command with all shell positional arguments
pg_dump -U myUser myDB | gzip > myDB.sql.gz,"dump ""mydb"" via ""pg_dump"" and compress to ""mydb.sql.gz"""
screen -S foo,assign a name when starting a screen session
cat /proc/2671/maps | grep `which tail`,"search for command ""tail"" in the maps of the process with pid 2671"
"find . -type f -iname \*.mov -printf '%h\n' | sort | uniq | xargs -n 1 -d '\n' -I '{}' echo mkdir -vp ""/TARGET_FOLDER_ROOT/{}""","dry run making directories in ""/target_folder_root/"" for each "".mov"" file in the current directory tree"
"read -p ""Are you sure you wish to continue?""","read a line from standard input with prompt ""are you sure you wish to continue?"""
dd if=/path/to/source/file bs=1 skip=100 count=250 | md5sum,"create md5 message digest of ""/path/to/source/file"" starting at byte 100 until the 250th byte"
touch filename,"update the timestamp of 'filename', or create an empty file if it doesn't exist."
sed 'x;G;1!h;s/\n/ /g;$!d',replace all newlines from standard input except the last with spaces
"find ${DIR} -type f -regex "".*\.${TYPES_RE}""","find all regular files under $dir directory tree whose paths match the regex "".*\.${types_re}"" where ${types_re} expands as a variable"
which bzip2,locates bzip2 command in a system.
find . -type f ! -perm 777,display all the regular files in the current folder which dont not have the permission 777
cat file | head -n 16482 | tail -n 258,"print lines 16225 to 16482 in file ""file"""
find . -name '.svn' -prune -o -type f -printf '%m%c%p' | md5sum,"calculate the md5 sum of all the file metadata in the current directory tree excluding "".svn"""
"find . -type f -exec grep ""foo"" '{}' \;","search the regular files of the current directory tree for string ""foo"""
"find $target -type f -iname ""*.txt""",display all text files in a folder
rm `ls -t | awk 'NR>5'`,removes all files from current folder but 5 newest ones.
gzip -dc data.tar.gz | tar -xvf -,"uncompress and unarchive ""data.tar.gz"""
find . -name '*.jpg' -print ./bar/foo.jpg,find files ending with .jpg
cut -f $FIELD * | sort| uniq -c |sort -nr,"list the unique tab delimited field number ""$field"" in all files, prefix with the number of occurrences, sort from most frequent to least frequent"
"find /usr/local -iname ""*blast*""",find all files/directores under '/usr/local' directory tree that case insensitively contain the word 'blast' in their names
"alias cleanup='rm -Rf `pwd`/{foo,bar,baz}'","set alias ""cleanup"" for command 'rm -rf `pwd`/{foo,bar,baz}'"
"rsync -avz --rsh=""ssh -p$2"" key.pub $1:~/.ssh/key.pub","archive key.pub to directory .ssh in user's home directory on host specified by first parameter to function or script, using ssh to connect on port specified by second parameter to function or script, compress data during transmission."
"find ./ -name ""*sub*""","find files in the current directory tree that match pattern ""*sub*"""
"find working -type f -name ""*.srt"" | head -1",find all *.srt files under directory named 'working' and show the first one found
true | cd /,executes 'cd /' in a subshell created by a pipeline of built-in function 'true'.
"find . -type f \( -name ""*.c"" -o -name ""*.sh"" \)",find *.c and *.sh files
find . -not -path '*/\.*' -type f -name '*some text*',find all regular files under current directory tree that contain 'some text' in their names excluding paths that contain dot files/directories
"find . -type d | sed -e 's/^\.\///g' | awk '{print $1, $1}' | xargs chgrp",recursively changes group ownership of every folder in a current directory to the name of that folder.
"find . -name '*.doc' | while read i; do antiword -i 1 ""${i}"" >""${i/doc/txt}""; done",convert *.doc files in the current directory tree to the .txt format
"find  / -name ""apt""",find all files/directories named 'apt' in the entrie filesystem
seq 1 100,print numbers from 1 to 100
"echo ""aaaa eeee bbbb ffff cccc""|tr ' ' '\n'|tac|tr '\n' ' '","reverse the space separated words in ""aaaa eeee bbbb ffff cccc"""
find /dir|egrep '2015.*(album|picture)',search the /dir directory tree for files whose names match regular expression '2015.*(album|picture)'
"find /mnt/zip -name ""*doc copy"" -execdir rm ""{}"" \;","delete files ""*doc copoy"" in directory tree /mnt/zip"
find . -type d -ls | head,display long listing of first 10 directories in the current folder
bind -P | grep '\\e\\C-k',print readline bindings that use key code '\\e\\c-k'
"find /etc -type f | xargs grep -l -i ""damian""","search for the word ""damian"" in all the regular/normal files in the /etc folder and display only the matched file name"
read -n1 -s,"silently read a single character into variable ""reply"""
"find /dir/to/search/ -not -name ""*.c"" -print","display all file in the folder /dir/to/search except "".c"" files"
"full_backup_dir=""`find . -depth -print0`""",find all files/directories under current directory and put the output into full_backup_dir variable
"find . -name ""*.[ch]"" -exec grep --color -aHn ""e"" {} \;","search all .c and .h files in the current directory tree for string ""e"""
find .  -mtime -14 | sed -e 's/^\.\///',print the list of files modified within a fortnight ago removing the leading ./ from the file names
"find . -not -name '*.png' -o -type f -print | xargs grep -icl ""foo=""",find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs dirname | head",finds binaries names in a list of running processes and prints containing folder of first 10 binaries.
sudo chmod +x java_ee_sdk-6u2-jdk-linux-x64.sh,"add executable permission to ""java_ee_sdk-6u2-jdk-linux-x64.sh"""
rsync --blocking-io *.cc *.h SConstruct rsync://localhost:40001/bledge_ce,"copy ""*.cc"", ""*.h"", and ""sconstruct"" to ""rsync://localhost:40001/bledge_ce"" using blocking io"
"find . — name ""*"" — print -о -name "".*"" — print -depth",display all the files in the current folder along with the hidden files with the depth
find . -name some_pattern -print0 | xargs -0 -J % mv % target_location,"move all files in the current directory tree that match ""some_pattern"" to ""target_location"""
find /home/testuser/log/ -mtime +1 | xargs  tar -czvPf  /opt/older_log_$(date +%F).tar.gz,create tar.gz files older than one day logs
find | egrep string,"search the current directory tree for files containing ""string"" in their path names"
"mount /media/Working/ -oremount,umask=000","remount ""/media/working/"" with a umask of 000"
fold -w130 file | ...,"send every 130 characters of ""file"" as input to ""..."""
find / -perm /a=x,find all executable files
apropos -s 3 .,see all pages in section 3.
"echo -e  'y\n'|ssh-keygen -q -t rsa -N """" -f ~/.ssh/id_rsa","create a new rsa key for ssh with no passphrase, store it in ~/.ssh/id_rsa without prompting to overwrite if this file exists, and minimize output from ssh-keygen."
zcat `find /my_home -name '*log.20140226*'`|grep 'vid=123',"search for ""vid=123"" in all compressed files found under ""/my_home"" matching ""*log.20140226*"""
nl -ba  -nln  active_record.rb  | grep -C 2 '^111 ',"search for line 111 in file ""active_record.rb"" with 2 lines of context"
SRC_DIR=$(cd ..; pwd),record the absolute path of a relative path to a variable
find -prune,find files/directories under current directory without descending into it
ant 2>&1|tee build.log,"write output and error of ""ant"" to the console and to ""build.log"""
cat dax-weekly.csv | awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }',display all lines contained in 'dax-weekly.csv' in reverse order.
"find / -name ""*.core"" -print -exec rm {} \;",find all .core files on the system starting from / and delete them
find -mmin -60,find all the files that have been modified in the last 60 minutes
diff -u file1 file2 > file3,"write differences between files ""file1"" and ""file2"" to ""file3""."
mount -t linprocfs none /proc,"mount the ""linprocfs"" filesystem on ""/proc"""
"ipcs | nawk -v u=`whoami` '/Shared/,/^$/{ if($6==0&&$3==u) print ""ipcrm shm"",$2,"";""}/Semaphore/,/^$/{ if($3==u) print ""ipcrm sem"",$2,"";""}' | /bin/sh",delete all shared memory and semaphores for the current user on sun
"set | grep "" ()""","list all functions or variables containing "" ()"" defined in the shell"
find -maxdepth 0,find files/directories under current directory without descending into it
"find . -name ""*$VERSION*""",find all *$version* files/directories under current directory where $version is a variable
find [whatever] | xargs cat,print content of all files found regarding seach options '[whatever]'
find $1 -type f -name '*'$n'.txt',display all the text files in a folder
"find . -name ""*.txt"" -type f -daystart -mtime -4 -mtime +0|xargs -i cp {} /home/ozuma/tmp",find all the text files in the current directory which have been modified in the last 4 days and not today and copy them to another folder
rsync -avz --chmod=ug=rwx --chmod=o=rx -e ssh src dest,"archive ""src"" to ""dest"" via ssh with permissions set to 755"
file ~/myfile,"try to determine the type of contents in ""myfile"" located in user's home directory."
find /home/user/myusername/ -name myfile.txt -print,"find the file ""myfile.txt"" in the folder /home/user/myusername/"
"bind '""e"":self-insert'","insert ""e"" when it's pressed"
find /path/to/directory/* -maxdepth 0 -type d -printf '%f\n',print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*
chown -R your_user_name.your_user_name 775 /home/el/svnworkspace,"recursively change the owner and group of ""/home/el/svnworkspace"" and ""775"" to ""your_user_name"""
find . -print -name SCCS -prune,print all files and directories in the `.' directory tree skipping sccs directories but printing out the sccs directory name
find [whatever] -exec cat {} +,print content of all files found regarding seach options '[whatever]'
find -printf '%p %T@\n' | sort > file1,display all the files in the current folder along with their timestamps and sort them and save them in the file1
find . -name “*.old” -exec rm {} \;,delete all files with '.old' extension under current directory tree
who | awk '{ print $1 }',print list of all user names who are logged in
find -mindepth 1 -maxdepth 1 -print0 | xargs -0 rm -rf,delete everything in the current directory
"echo ""a.txt b.txt c.txt d.txt z.txt"" | xargs touch",create 5 empty .txt files
find ~/ -atime +100 -exec rm -i {} \;,"search for files in the current user's home directory and below for files that have not been accessed for more than 100 days and ask the user for permission to delete each file, one by one."
find /usr ! -newer /FirstFile -print,find files under /usr that are the same age or older than file `firstfile'
"find ""$DIR"" -name \*.txt",search directory tree $dir for *.txt files
comm -2 -3 <(sort -n B.txt) <(sort -n B.txt),print nothing because b.txt is compared with itself.
find /home/nobody/public_html -type f -exec chmod 644 {} \;,change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html
"history -s 'echo whatever you ""want your"" command to be'","save 'echo whatever you ""want your"" command to be' in history"
command | more,"run 'command', pausing and waiting for user interaction after each page of output."
history | tail -1 | awk '{print $1}',print the last command in history
rev domains.txt | cut -d '.' -f 2- | rev,print content of 'domains.txt' with removed first one of dot-delimited fields
find var/log/ -iname anaconda.* -exec tar -cvf file.tar {} \;,search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file.tar) of the last file found
find /TBD/* -mtime +1 -exec rm -rf {} \;,delete all files in the /tbd directory that were modified more than 1 day ago
"find /home/folder1/*.txt -type f -exec ln -s {} ""folder1_"" +\;",create symlinks to all  /home/folder1/*.txt files and 'folder1_' directory with the same name in a target directory named '+'
find . -atime +30 -exec ls \; | wc -l,count files accessed more than a month ago
find . \( -name '*.mp3' -o -name '*.jpg' \) -print,find all the files ending with .mp3 or .jpg
md5sum $(which cc),"calculate the md5sum of the executable file of command ""cc"""
rm -v *.bak,"removes all files like '*.bak' in a current folder, and prints messages about what is being done."
find project -maxdepth 1 -mindepth 1 -regextype posix-egrep ! -iregex  $PATTERN  ! -empty -type d,find all directories under 'project' directory without going into subdirectories that do not match the posix egrep regex $pattern in their paths and are not empty
diff /tmp/test1  /tmp/test2,display differences between /tmp/test1 and /tmp/test2.
find . -type f -iname '*.jpg' -print0 | xargs -r0 du -a| awk '{sum+=$1} END {print sum}',find the total size of *.jpg files within the current directory tree
cat `find [whatever]`,"print the file content of command ""[whatever]"""
"find /home/you -iname ""*.pdf"" -atime -60 -type -f","search for all pdf files in the folder ""/home/pdf"" which have been accessed in the last 60*24 hours"
find -gid 1000 -exec chown -h :username {} \;,"set the group to ""username"" for all files with gid=1000 in the current directory tree"
split --suffix-length=5 --lines=1 foo.txt,"split ""foo.txt"" into files with 1 line each and use a suffix length of 5"
find . -type f -daystart -mtime 1,find all the files that have been modified exactly yesterday (from 00:00 to 23:59 yesterday)
./a.out |& tee output,"write standard output and error of ""./a.out"" to standard output and to file ""output"""
gzip --help | less,view gzip's help documentation
ps -ef | grep apache,get the path of running apache
ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9,immediately terminate all processes whose command or arguments contain 'amarok'.
find /var/ -size +10M -ls,display a long listing of all files/directories that are bigger than 10mb under '/var/' directory tree
find . -type d -print -exec bash -c 'find {} -type f -depth 1 -perm +0111 | sort -r' \;,list every directory under current directory with their child executable files
mkdir -p path2/{a..z},create intermediate directoriy path2 as required and directories a..z
diff <(find . -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) <(find . -name main.cpp  -exec readlink -f {} \; | sed 's/\(.*\)\/.*$/\1/' | sort | uniq) | sed -n 's/< \(.*\)/\1/p',"find all directories that do not contain ""main.cpp"""
split -n l/10 file,"split ""file"" into 10 files of about equal size without splitting lines"
script2=`mktemp /tmp/.script.XXXXXX`;,creates temporary file with name formatted like '.script.xxxxxx' in '/tmp/' folder and saves path to it in 'script2' variable.
rsync -az --delete /mnt/data/ /media/WD_Disk_1/current_working_data/;,"archive directory ""/mnt/data"" to ""/media/wd_disk_1/current_working_data/"", deleting any extraneous files in destination, compress data during copy."
find katalogi -name wzorzec,"search the ""katalogi"" directory tree for files named ""wzorzec"""
mv -f file.txt /var/lib/docker/aufs/mnt/$CONTAINER_ID/rootfs/root/file.txt,"move ""file.txt"" to docker container ""$countainer_id"" in path ""/var/lib/docker/aufs/mnt/$container_id/rootfs/root/file.txt"""
"find . -name ""*.java"" -exec grep ""String"" {} \;",find all *.java files under current directory containing the string 'string'
find -name '*.patch' -print0 | xargs -0 -I {} cp {} patches/,copy all .patch files from the current directory tree to patches/
mount /tmp/loop.img /mnt/image -o loop,"mount ""/tmp/loop.img"" on ""/mnt/image"" as a loop back device"
find .cache/chromium/Default/Cache/ -mindepth 1 -size +100M -delete,find all files/directories under directory '.cache/chromium/default/cache/' which are bigger than 100mb and which are atleast 1 level deep and delete them
ln --symbolic --interactive $SCRIPT_DIR/$FILE,"interactively create a symbolic link in the current directory for ""$script_dir/$file"""
find . -size 126M,find all the files in the current directory whose size is equal to exactly 126mb.
find . -type f -exec ls -s {} \; | sort -n -r | head -10,sort based on size and display top ten largest normal/regular files in the current folder
find ~/Documents -type f -print0 | xargs -0 grep -il birthday,search for 'birthday' (case insensitive) in all regular files under ~/documents directory tree and show only the filenames
"find /home ! -name ""*.txt""",display all the files in the home folder except text files
"find . -type f -iname ""*.php""  -exec file ""{}"" + | grep CRLF","list path/filename of all php files under current directory whose file type description or path/name contains ""crlf"""
find -L. -type l,print a list of symbolic links reachable from the current directory that do not resolve to accessible files
find -print0 | grep -vEzZ '(\.git|\.gitignore/)',find all files/directories excluding paths that match '.git' or '.gitignore'
"find . -type f -exec grep ""magic"" {} \; -ls",search for the string 'magic' in all regular files under current directory tree and display long listing of them
find -newer ordinary_file,find all files that were modified later than ordinary_file in the current directory and its sub-directories.
find . -name foo -type d -prune -o -name foo -print,find all files named 'foo' under current directory tree without descending into directories named 'foo'
who | grep -v localhost | wc -l,count the number of non localhost users
find / -newer /tmp/checkpoint,find all files in the file system which are modified after the file /tmp/checkpoint
"find . -type f -size +50000k -exec ls -lh {} \; | awk '{ print $9 "": "" $5 }'",display the name and size of all the regular/normal files  in the current folder which are bigger than 50mb
"find . -name ""*.txt"" | xargs -o vim",find all .txt files in the current directory tree on a bsd system and edit them with `vim'
"find ./ -name ""*"" | xargs grep ""searchName""",find all files in current directory and search for 'searchname' in those files
"find . -name ""*.php"" | xargs grep -v -c '^$' | awk 'BEGIN {FS="":""} { $cnt = $cnt + $2} END {print $cnt}'",count all the lines of code in all php files in current directory recursively
find . -type f ! -size 0,list all non-empty files under under current directory
"TMP_FILE=""$(mktemp -t)""",creates temporary file name and saves path to it in 'tmp_file' variable.
read -p 'BGG enter something:' -r data,"read a line from standard input into variable ""date"" with prompt ""bgc enter something"", and storing typed backslash as backslash symbol"
"find . -not -name ""*.pl"" -not -name ""*.sh"" -not -name ""*.py""",display all the files in the current folder expect perl shell and python fiels
myVar=$(tee),"save standard input to variable ""myvar"""
find . -maxdepth 1 -type d -empty -exec rm {} \;,delete all the empty in the current folder do not search in sub directories
find /  -perm /u=s,find all suid files .
join -v 2 index <(nl strings),"print the lines of file ""strings"" not specified in file ""index"""
echo $string | cut -d';' -f1,print first field from semicolon-seprated line $string.
"find ""$sourcedir"" -type f -name ""*.type"" -exec sh -c 'for f; do cp ""$f"" ""$0""; done' ""$targetdir"" {} +","copy all the files with the extension "".type"" from one folder to a target directory"
find /dev -group audio,find all files/directories that belong to the group 'audio' under '/dev' directory tree
var=`egrep -o '\[.*\]' FILENAME | tr -d ][`,save all entries that are wrapped around with opening and closing square brackets in file 'filename' to variable 'var'
egrep -v '^\s*#' /etc/launchd.conf | launchctl,filters out all comment lines(lines beginning with a '#') from /etc/launchd.conf and pipes the output to launchctl.
"find /home/john/scripts -type f -not -name ""*.ksh"" -print",find all regular files under '/home/john/scripts' directory tree excluding files with '.ksh' extension
find .cache/chromium/Default/Cache/ -type d -print0 | du -h | grep '[0-9]\{3\}M' | cut -f2 | grep -v '^.$',find all directories under '.cache/chromium/default/cache' that are bigger than 100 mb in size excluding single letter directory names
find /var/www/* -type d -print | tar -zcpvf {}.tar.gz -C /var/www/ --files-from - {} \;,archive a file named '{}' (literal) residing in current directory  into  '{}.tar.gz' and save it inside /var/www/
"find /home/me/""$d"" -type d","find all directories under /home/me/""$d"""
"find . -type d | sed -e 's/^\.\///g' -e 's/^\./avoid/g' | grep -v avoid | awk '{print $1""\t""$1}' | xargs chgrp",recursively changes group ownership of every folder in a current directory to the name of that folder.
"find . -type f -name ""*.tmp""  -exec rm -rf {} \;",find all files & dircetiry in current directory which  have .tmp extension and delete them .
pstree,prints hierarchical process tree.
rsync symdir/ symdir_output/ -a --copy-links -v,"archive directory ""symdir"" to ""symdir_output"" preserving symbolic links."
"ping -c 2 -n 127.0.0.1 | awk -F'[ =]' -v OFS='\t' 'NR>1 { print $6, $10 }'","print the icmp sequence number and ping time of each request to ""127.0.0.1"""
find . -name '*.php' -print0 | xargs -0 wc -l,"prints lines count of each *.php file in a current folder and subfolders, and prints total count."
find ./ -type d -size 0c -print | xargs rmdir,remove all empty directories under the current directory and below
sort <(sort -u file1.txt) file2.txt file2.txt | uniq -u,"print lines in ""file1.txt"" that do not exist in ""file2.txt"""
find . -type d -name aa,search for the directory with the name aa in the current folder
"find ./ -name ""*.dat"" -type f -cmin +60 -exec basename {} \;",display the names without extensions of all the data files in current folder which have not been changed in the last 60 mins
"find -newermt ""mar 03, 2010"" -ls","list all files in the current directory tree that were last modified on the 3rd of march, 2010 or later"
find arch/x86/usr/sbin arch/x86/usr/X11R6/bin usr/sbin/ -type f | xargs chmod a+x,"set the executable bit for all users on all regular files from directories arch/x86/usr/sbin, arch/x86/usr/x11r6/bin, usr/sbin/"
find / -newerct '1 minute ago' -print | xargs rm,remove all files on the system that have been changed within the last minute
find ~/Library -name '* *' -exec ls {} \;,list all files/directories with spaces in their names under ~/library directory
ls /empty_dir/ | xargs -n10 chown root,"change the owner of all files in ""/empty_dir/"" to ""root"" using at most 10 files at a time"
find . -mmin -60 | xargs -r ls -l,list all files from the current directory tree that were modified less than 60 minutes ago
ssh -L localhost:8000:clusternode:22 user@bridge,forward port 8000 bound on localhost to port 22 in 'clusternode' via 'user@bridge'
"find /home/vmail/ -type d -path ""*/*/Maildir/.LearnAsSpam/new"" -exec sh -c '(cd {} && mv ./* ../../.Junk/new)' ';'","find directories in /home/vmail that match pathname ""*/*/maildir/.learnasspam/new"", and move them to folder .junk/new"
"grep -iH foo `find . -name ""*.js""`",search for the word foo in all the js files in the current folder
"lshw -class cpu|grep ""^       width""|uniq|awk '{print $2}'",determine if the kernel is 32 bit or 64 bit
find /apps/ -user root -type f -amin -2 -name *.rb,find all .rb files owned by root in the /apps/ folder and below that have been accessed in the last two minutes.
rm junk1 junk2 junk3,"removes files 'junk1', 'junk2', 'junk3'."
find -type f -printf '.' | wc -c,find all regular files in the current directory tree and count them
"`which parallel` ""$@""","execute the first instance of ""parallel"" found in the path, passing it all parameters received by the script/function"
dig -t SRV _kerberos._udp.foo.com,query srv records for domain '_kerberos._udp.foo.com'
"DIR=$(dirname ""$(readlink -f \""$0\"")"")","save the absolute path of the directory of the current script to variable ""dir"""
find . type -f -atime +2,search the current directory recursively for regular files last accessed more than 2 days ago
find . -type f -print0|xargs -0 ls -drt|tail -n 1,find recursively the latest modified file in the current directory
find . \( -name '*.txt'  -mtime +5 -o -name '*.html' \) -print0,"list txt files older than 5 days or html files of any age, null separated"
cat backup.img.gz | gunzip | dd of=/dev/sdb,"unzip and write ""backup.img.gz"" to ""/dev/sdb"""
sudo su - jenkins,get the jenkins user access
"mount | awk '/\/dev\/sd/ {print NR, $1, $3}'","print list of disk and mountpoint of disks matching ""/dev/sd*"""
find -d MyApp.app -name Headers -type d -exec rm -rf {} +,search directory tree `myapp.app' for directories whose name is 'headers' and delete them in an optimized way
date -u '+%Y-%m-%dT%k:%M:%S%z',show the current utc date in '%y-%m-%dt%k:%m:%s%z' format
bind -l | grep /,"list names of bind functions containing ""/"""
wc -l /dir/file.txt,counts lines of /dir/file.txt file.
cat list_part* | sort --unique | wc -l,print count of unique lines in all files like 'list_part*'
"find . — name ""*.LOG"" — mtime +5 -ok rm {} \;",delete all the log files which have not been modified in the last 5 days after user confirmation
find -name TEST_3,find files/directories named 'test_3' under current directory tree
cat /boot/System.map-`uname -r` | grep funcname,display all lines contiaining 'funcname' in system map file matching current kernel.
"diff -q ""$file"" ""${file/${dir1}/${dir2}}""","print whether ""$file"" and ""${file/${dir1}/${dir2}}"" differ"
find /path/to/the/folder -depth -type d -print0 | xargs -0 rmdir,removes all empty folders under '/path/to/the/folder' path.
du -h --max-depth=1 . | sort -n -r,prints sizes of all top-level folders in a current folder with human-readable format and descending order.
"find . -xdev -name ""wagoneer*"" -print","find all the files in the current directory with the name ""wagoneer"" which are in the current device."
"find -name ""text""",find all files/directories named 'text' under current directory
paste -d':' *.txt | sed 's/ [^:]*$//;s/ [^:]*:*/ /g;s/://g',print first column of every line in every *.txt separated by a space
"alias clean='rm -rf ""#""* "".""*~ *~ *.bak *.dvi *.aux *.log'","set alias ""clean"" for command 'rm -rf ""#""* "".""*~ *~ *.bak *.dvi *.aux *.log'"
find /abs/path/to/directory -maxdepth 1 -name '.*invalidTemplateName.*',find all files/directories under '/abs/path/to/directory' directory non-recursively that match the pattern '.*invalidtemplatename.*' in their names
rmdir ed*,removes any empty folder that matches pattern ed*.
rsync -Prt --size-only original_dir copy_dir,"recursively copy ""original_dir"" to ""copy_dir"" preserving file/dir timestamps, displaying progress, and skipping files which match in size, keeps partially transferred files."
find -type f -user www,"search the current directory tree for regular files owned by user ""www"""
tmp_file=`mktemp --tmpdir=/tmp emacs-manager.XXXXXX`,creates temporary file with name formatted like 'emacs-manager.xxxxxx' in '/tmp/' folder and saves path to it in 'tmp_file' variable.
find /usr/share -name '*farm*',find all files/directories containing 'farm' in their names under '/usr/share' directory tree
diff -q <(sort set1) <(sort set2),"print whether the sorted contents of ""set1"" and ""set2"" differ"
find / -name drush,find all files on the system whose names are 'drush'
find . -name '*.php' -exec chmod 755 {} \; > logfile.txt,update the permission of all the php files in current directory and save the output to a file
who | sed -e '/orschiro/! d; /pts/! d; s/^.*\(:[0-9.]\+\).*$/\1/p;d' | head -n1,"print display of ""orschiro"" user"
basename /usr/local/svn/repos/example,"display the last slash-separated part of path, in this case ""example""."
find ~/ -newer alldata.tar 	-exec tar uvf alldata.tar {} \;,search the current user's home directory and its sub-directories for any files accessed after alldata.tar was last accessed and add them to that same tar archive.
file /mnt/c/BOOT.INI,"show human-readable file type description of file ""/mnt/c/boot.ini"""
"find ./ -name doc.txt -printf ""found\n""","find all `doc.txt' files in the current directory tree printing ""found"" for each of them"
cd -P ..,"change to parent directory and resolve any symlinks in the resulting path, making the physical path the current one."
"sed -i ""s/\\\\\n//g"" filename",a no-op on filename with sed
split -l5000000 randn20M.csv '_tmp';,"split ""randn20m.csv"" into files of at most 5000000 lines each with prefix ""_tmp"""
find . -type l -exec test ! -e {} \; -printf '%Y %p\n',list all broken symlinks including cyclic links under current directory
"b=`echo ""$a"" | sed 's/./\U&/g'`","convert all characters in ""$a"" to upper case and save to variable ""b"""
"mount -o rw,remount /system","remount ""/system"" with read and write permission"
chmod +x file.sh,"make ""file.sh"" executable"
"find /home/nobody/public_html -type f -name .htaccess -exec replace ""php_admin_flag"" ""#php_admin_flag"" -- {} \;",replace the name php_admin_flag to #php_admin_flag in all the .htaccess files in the folder /home/nobody/public_html
find / -mmin -60,find all the files in file system which are modified in last 1 hour
"find . -name ""*_test.rb"" | xargs -s 1000000 rename s/_test/_spec/","recursively search for all files with names ending with ""_test.rb"", renaming them to end with ""_spec.rb"", using at most 1000000 characters per command."
find . -name '*.png' | perl match4th.pl '/tmp/search.txt' | xargs cp -t /tmp/results,find all the png files in current folder and pass them as input to the perl script and copy the result files to a folder
awk '!/^[[:space:]]*$/{++x} END{print x}' filename,counts lines in file filename ignoring empty lines and lines with spaces only.
find  /var -path */l??/samba*,list all samba files in /var/l* directory ( /var/lib or /var/log )
find $1 -type f | wc -l,get the number of regular files in the directory given as the bash script argument $1
"find . -name *.php -or -path ""./vendor"" -prune -or -path ""./app/cache"" -prune","exclude vendor and app/cache dir, and search name which suffixed with php"
{ find . -name '*my key phrase*'; grep -rl 'my key phrase' .; } | sort -u,"find all files/directories with 'my key phrase' in their names under current directory, search for 'my key phrase' in all files under current directory and print a sorted and unique list of output"
find /data/SpoolIn -name job.history | xargs grep -o -m 1 -h 'FAIL\|ABOR' | sort | uniq -c,"search for the file ""job.history"" in the folder /data/spoolln and search for multiple patterns in the file and display the count of matched lines along with the pattern"
find / -user seamstress -iname “*.pdf”,find all pdfs owned by user “seamstress”
"...| awk '{print $5""\t\t"" $3""\t""$4}'|column -t","format the 5th, 3rd, and 4th fields of ""..."" as a table"
ps aux | grep mysql | grep -v grep,find the process id of mysql
"find /usr/app/etl/01/OTH/log/tra -type f ! -name "".*"" -mtime -10 | egrep -vf /usr/app/etl/01/CLE/par/files_to_skip.par","find all the files in the folder ""/usr/app/etl/01/oth/log/tra"" which have been modified  in the last 240 hours  excluding hidden files and those with the name ""/usr/app/etl/01/cle/par/files_to_skip.par"""
"tac file | sed -n '0,/<tag>\(.*\)<\/tag>/s//\1/p'",prints the last occurrence of text between two tags
"find .  -type f -name ""CDC*"" -ctime -1 -exec sed -i'' -e '1d' -e '$d' '{}'  \ | wc -l",find all cdc* files under current directory that were accessed less than 1 day ago and delete the first and last lines from those files and count the number of lines in the output
find . ( -name a.out -o -name *.o ) -print,find a.out and object files in the current directory tree
find . -name vmware-*.log -delete,"remove all files with names like ""vmware-*.log"" from the current directory tree"
"find . -name text.txt | sed 's|.*/\(.*\)/.*|sed -i ""s@^@\1 @"" & |' | sh",append the parent directory name with a space in all 'text.txt' files in all sub directories of current directory
uname -m,"display machine architecture, ie. x86_64"
n_jobs=$( jobs -p | awk '{print NR}' ),print number of jobs
find . ... -exec cat {} \; -exec echo \;,using exec in find command to dispaly the searched files
find . -maxdepth 1 -name a\*.html,"search the current directory for html files whose names begin with ""a"""
find ${path} -P -type f,find all regular files under ${path} without following symlinks
"find -O3 ""$save_path"" -depth -mindepth 1 -name 'sess_*' -ignore_readdir_race -type f -cmin ""+$gc_maxlifetime"" -delete","delete all regular files that start with 'sess_' in their names, are at least 1 level deep and were modified more than $gc_maxlifetime minutes ago under $save_path directory tree"
"find ""somedir"" -type l -print0",find all the links in somedirectory and print them in a single line (to avoid the problem of files having newline in their names)
tmux -2,"starts new tmux session, assuming the terminal supports 256 colours."
find . -type f -print0 | xargs -0 perl -nle 'print if /^.*666$/',find all files under current directory that match the regex ^.*666$ in their names
find . -type f -exec wc -l {} +,display the number of lines in all regular files under current directory tree and also show the total count
find / -size 42,find all the files in the home folder which are less than 42 bytes
find ~ -user dave -print,find all files/directories that are owned by user 'dave' under current user's home directory tree
find . \( -size +700k -and -size -1000k \) -exec du -Hs {} \; 2>/dev/null,print the sizes and file names of all files in the current directory tree that are between 700k and 1000k
"find ""$directory"" -perm ""$permissions""",find all files in the directory $directory or below with the permissions specificed by $permissions.
"ls -d1 */ | tr -d ""/""",lists all subdirectories in the current directory with the trailing slash removed
mkdir new_dir,"make directory ""new_dir"""
"seq 10 | paste -sd"" \n"" -",print numbers from 1 to 10 with 2 values per line
find . -amin 10,find all files in current folder which have been accessed exactly 10 minutes ago
"find ""$some_directory"" -type f -name '.*' -delete",delete all hidden files under $some_directory
echo find . -atime +7 -o -size +`expr 10 \* 1024 \* 2` -print,find any files in the current directory and its sub-directories that were last accessed more than 7 days or are larger than 20480 blocks in size.
"find . -iname ""Articles.jpg"" -exec ls -l {} \;","display a long listing of all images with the name ""articles"" in the current folder"
"find . -regextype posix-egrep -regex ""./c(([4-6][0-9])|70)_data.txt""","find files in the current directory tree whose names are of the form ""cxx_data.txt"" where xx is a number from 40 to 70"
"find /var/spool/postfix/{deferred,active,maildrop,incoming}/ -type f","look for regular files in the directory trees 'deferred', 'active', 'maildrop', 'incoming' under /var/spool/postfix/"
"find ./ -name ""file_pattern_name""  -exec grep -r ""pattern"" {} \;","recursively finds all ""file_pattern_name"" files and folders and prints strings with ""pattern"", searching through found folders recursively."
"find /source_path -name \*.data  | while read -r filename; do printf ""print version: cp %s %s\n"" ""${filename}"" ""$(printf ""%s\n"" ""${filename}"" | sed ""s/^.*[/]\(category[^/]*\)[/]\(.*[.]data\)$/\/target_path\/\1_\2/"")""; done",print the cp commands that would be required to copy all *.data files under /source_path to /target_path by appending the parent directory names in the source paths to the beginning of each of the target file names
"find . -iname .svn -exec bash -c 'ls -l ""{}"" | wc -l' \;","find any files or directories called "".svn"" under the current directory and run a long list on each one, displaying a line count of the resultant output."
find $dir -maxdepth 1 -type d -user $username -perm -100,find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username
find . -type f -exec grep -il confirm {} \;,"print the list of all regular files from the current directory tree that contain ""confirm"", case insensitive"
"find -maxdepth 1 -type d | sort | while read -r dir; do n=$(find ""$dir"" | wc -l); let n--; if [ $n -eq 0 ]; then printf ""%4d : %s\n"" $n ""$dir""; fi; done",find list empty directories
pstree -aAp $(ps -ejH | awk -v v1=$mypid '$1==v1 {print $3}'),"prints process tree of a process having id $mypid, with command options and process id number."
find . -type f -print0 | tr -dc '\0' | wc -c,display the number of regular files under current directory tree
"find . | grep "".xml.bz2$""",find all *.xml.bz2 files under current directory
find / -nogroup staff -print,display all the files in the file system which belong to no group
find jcho -name 2*.data,find all 2*.data files/directories under jcho directory
"exec /usr/bin/find ""$@""","execute find with ""$@"" arguments"
find . -perm 0777 -type d -exec ls -l {} \;,display a long listing of all 0777 permission directories under current directory tree
find -name \*.txt,find all *.txt files/directories under current directory
"awk 'NR==16224, NR==16482' file","output lines 16224 to 16482 of 'file', not recommended with large files that contain many lines after the ones needed."
find /var/spool/mail -type f | cpio -pvdmB /home/username/mail,"copy all files in ""/var/spool/mail"" to ""/home/username/mail"" preserving the directory hierarchy and modification times"
"mkdir ~/Labs/lab4a/folder{1,2,3}","make 3 directories named ""~/labs/lab4a/folder"" followed by the number 1, 2, or 3"
find -name '*.undo' -exec wc -c {} + | tail -n 1 | cut -d' ' -f 1,search all undo files(ending with .undo) in the current folder and calculate the total size of them
find . -type f -exec file {} \; | awk -F: '{if ($2 ~/image/) print $1}',"find all files under current directory whose file type description contains ""image"", display only path to each file."
{ time sleep 1 2> sleep.stderr ; } 2> time.txt,"reports time consumed by command 'sleep 1' to the file time.txt together, and saves command error output to sleep.stderr."
"ssh someone@somehost ""cd /export/home/someone && find . -name '*' -print | parallel -j1 'sleep 10;curl -u someone:password ftp://somehost/tmp/ -vT'",find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/
alias foo=BAR=baz,"set alias ""foo"" for command ""bar=baz"""
find -nouser,find files that are orphaned
mkdir --parents ./es_MX.utf8/LC_MESSAGES,make directorie(s) 'es_mx.utf8/lc_messages' as needed in the current directory
find -daystart   -atime 0 -ls,display a long listing of all the files in the current folder that have been accessed in today from the start of the day
"find . -regex "".*\\.rb$""","find all files/directories matching the regex pattern "".*\\.rb$"" under current directory"
find . -newer document -print,find all the files in the current folder that are modified after the modification date of a file
ssh-keygen -b 2048 -t rsa -f key -C michael,"create a rsa key of 2048 bits with comment ""michael"" and store it in file ""key""."
ln -sf new_destination linkname,"forcibly create a symbolic link named ""linkname"" to file ""new_destination"""
find . -cmin +2 -cmin -6,display all the files in current folder which have been changed in the last 2-6 days
less -S file,"page through the contents of 'file', but excess from lines that don't fit within the screen/window width is cut."
find test -depth -empty -delete,"delete all empty files and directories in the ""test"" directory tree"
"find . -name ""*.andnav"" | rename ""s/\.andnav$/.tile/""",rename file extension '.andnav' to '.tile' for all files/directories under current directory tree
"find * -name ""*.java""",find all .java files starting from the current folder
"find . -type f -name ""*.mp3"" -exec rm -f {} \;",find and remove all .mp3 regular files under the current directory and below
"find /home/tecmint/Downloads/ -type f -printf ""%s %p\n"" | sort -rn | head -n 5",find and the 5 largest regular files in the downloads folder of tecmint's home directory and output the file sizes in bytes.
find -name '*.txt',find all *.txt files/directories under current directory
"find /old/WordPress/ -type f -regex "".*\.\(php\|css\|ini\|txt\)"" -exec rm {} \;","remove all regular files with extensions php, css, ini, txt from directory tree /old/wordpress/"
find -x / -name foo,find files/directories named 'foo' in the current partition of the root filesystem
find . -mmin -60 -mmin +5,find all directories in the current directory tree that were last modified more than 5 minutes ago but less than 60 minutes ago
find -L /home/peter -name *~ -print0 |xargs -0 -r -n1000 rm,"find all files whose names end with ""~"" in the /home/peter directory tree, following symlinks, and delete them"
"proc_load_average=$(w | head -1 | cut -d"" "" -f12 | cut -d"","" -f1-2 | tr ',' '.')",save the system load average for the past 1 minute of the currently logged in user to variable 'proc_load_average'
find . -follow -inum 41525360,search for all files with the same inode number 41525360
"find . -regex "".*\.\(flv\|mp4\)"" -type f -printf '%T+ %p\n' | sort | head -n 500",display top 500 mp4 and flv files under current directory along with their timestamps in the sorted order of time
"find . -type d -name ""*""",find all directories in the current directory
seq $1,"print numbers from 1 to the number in variable ""$1"""
"diff --new-line-format="""" --unchanged-line-format="""" <(sort file1) <(sort file2)",output all lines from file1 except those present in file2.
"find . -type f -print0 | xargs -0 grep -IZl . | xargs -0 grep ""needle text""","search the current directory recursively for files containing ""needle text"""
find -size +2M,find all files in the current directory which are bigger than 2mb
find / -type d -name httpdocs,find all directories by the name `httpdocs' on the system
find / -mtime +100 -print,find all the files in the file system which have not been modified in the last 100*24 hours
gzip -l $i,list file contents of compressed file $i
"watch -n 1 ps -C java -o pcpu,state,cputime,etimes","execute ""ps -c java -o pcpu,state,cputime,etimes"" every second"
"find . -type f -ls | awk '{print $(NF-3), $(NF-2), $(NF-1), $NF}'",find all normal/regular files in current folder and display them in sorted order
ln -s $(readlink -f $origlink) $newlink,"create a full path symbolic link ""$newlink"" from a relative path symbolic link ""$origlink"""
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg"" | xargs rm","remove the .jpg files from the current directory whose names match regular expression "".+-[0-9]+x[0-9]+\.jpg"""
"find . \( ! -name . -prune \) -name ""*.c"" -print",list .c files in the current directory
cal 2 1900,"prints calendar of february, 1900."
sort -n ip_addresses.txt | uniq -c,"print a count of each unique line in ""ip_addresses.txt"" sorted numerically"
sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html,"replace all instances of ""string_to_replace"" with ""string_to_replace_it"" in file ""index.html"" and make a backup with suffix "".bak"""
cat myfile,"display the contents of ""myfile"" located in the current directory."
fg 1,gets a job with defined number back to the foreground.
od -xcb testscript.sh,"dump ""testscript.sh"" as 2 byte hexadecimale, printable characters, and octal values"
"find . -name ""*.swp"" > rm",find all *.swp files/directories under current directory and print the list to a file named 'rm'
find . -mtime -14 -ls,dispaly a long listing of all the files in the current folder which have been modified in the last 14 days
find /home -perm /a=x,display all executable files in the folder /home
"find /etc -print0 -name ""*.txt"" | xargs -I {} -0 mv {} {}.bak",back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory
find . -name “*.jar” -print -exec jar tvf {} \; |grep -E “jar$|.class”,"find all the jar files in the current folder and display all the "".class"" files or files ending with jar"
"nl -b a ""<filename>"" | grep ""<phrase>"" | awk '{ print $1 }'","print the line number of each matching ""<phrase>"" in ""<filename>"""
find / -uid 1005,display all the files in the file system which belong to the user with the id 1005
"find ~ -name ""*.txt"" — print",find all the text files in the home folder
grep -aR -e . /your/dir | md5sum | cut -c-32,"calculate the md5 sum of all files in ""/your/dir"" including content and filenames and following symbolic links"
"ln -s ""`pwd`"" $1/link","create a symbolic link named ""$1/link"" to the current working directory"
top -l 1 -s 0 -i 1 -stats vprvt -pid PID,get virtual private memory use of process
"1 down vote wc -cl `find . -name ""*.php"" -type f`",display the number of lines in all the php files in the current folder
sudo chown -R test /home/test,"recursively change the owner of all files in ""/home/test"" to ""test"""
"find . -not -path ""*git*"" -not -name '*git*' |grep git",search for the string 'git' in all the files under current directory tree excluding paths and names that contain the string 'git'
find . -name vmware-*.log | xargs -i rm -rf {},"remove all files with names like ""vmware-*.log"" from the current directory tree"
"find -type f -name ""Makefile""",find all makefile's in the current directory tree
"find .  -maxdepth 1 -type d -iname "".[^.]*"" -print0 | xargs -I {} -0 rm -rvf ""{}""",to descend at most one levels of directories below the command line arguments pass the -maxdepth 1 option. this will avoid deleting nested directories:
"find foldername -exec chmod a+rwx {} "";""",set permissions for files in `foldername' to 777
"find . -name ""*oraenv*"" -type f -exec file {} \;","find regular files matching pattern ""*oraenv*"" and excecute the ""file"" utility for each of them"
"DATA=$( find ""${1}"" -type f -exec ${MD5} {} ';' | sort -n )","execute ""${md5}"" on all files found under ""${1}"", numerically sort the results, and save to variable ""data"""
"grep -r -l 'searchtext' . | sort | uniq | xargs perl -e ""s/matchtext/replacetext/"" -pi","recursively search the current directory for unique entries of ""searchtext"" and replace ""matchtext"" with ""replacetext"""
rsync -aHvz /path/to/sfolder name@remote.server:/path/to/remote/dfolder,"archive ""/path/to/sfolder"" to ""name@remote.server:/path/to/remote/dfolder"" preserving hard links and compressing the data during transmission"
find . -name $1 -type f -exec grep -i $2 '{}' \;,search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory
ls -ld /tmp /tnt,"prints long listing of directories '/tmp', '/tnt' themselves."
cat $file | cut -c 1-10,prints only first ten characters of each string of file $file.
find /users/tom -name '*.p[lm]' -exec grep -l -- '->get(' {} + | xargs grep -l '#hyphenate',find all *.p[lm] files under /users/tom directory that matches both the regex '->get(' and '#hyphenate' in their contents
tree -af,list all files and sub directories including hidden files in the current directory tree
"sudo find foldername -type d -exec chmod 755 {} "";""",find all directories under foldername directory and set their permission to 755
find . -type f -exec cp -t TARGET {} \+,copy all regular files from the current directory tree to directory `target'
find /home/user/demo -type f -perm 777 -print -exec chmod 755 {} \;,"find all regular files with permissions 777 under and below /home/user/demo/, and change their permissions to 755"
"mv $(find $(find . -name ""*shp*"" -printf ""%h\n"" | uniq) -type f) ../shp_all/",find all *shp* directories under current directory and move all regular files inside those directories to ../shp_all/
w | awk '{print $1}',finds all logged in users.
find . -name '*.JUKEBOX.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./JUKEBOX,find the files in the current directory that match pattern '*.jukebox.*.txt' and move them to folder ./jukebox
gunzip -c file.tar.gz | tar t > /dev/null,"test if the tar file in ""file.tar.gz"" is corrupt"
find . -name *.txt -exec ls {} \;,list all *.txt files/directories under current directory
diff --brief <(awk '{print $2}' A) <(tac B | awk '{print $2}'),test if the 2nd column in file a is in the reverse order of the second column of file b
find . -type f ! -perm 777 | head,find all the files in the current directory recursively whose permissions are not 777
find . -name photoA.jpg,find all files/directories named 'photoa.jpg' under current directory tree
$ ls -Fltr,"prints long listing of the current directory, sorted from oldest to newest, with appended indicators."
VARIABLENAME=$(date -d @133986838),format the time string @133986838 according to the default time format and save it to variable 'variablename'
cd $(find . -name $1 | xargs dirname),find all $1 files/directories under current directory and enter into the parent directory of the first one found
find . -type f -exec cat {} \; > out.txt,display the contents of all the regular files in the current folder and save the output to out.txt
finger vivek,"lookup information for user ""vivek"""
find foo/// bar/// -name foo -o -name 'bar?*',"print only the line ""foo///"" given two empty directories foo and bar"
find /path/to/dir -type f -mtime -7 -print0 | xargs -0 ls -lt | head,find all files under /path/to/dir that were modified less than 7 days ago and show only first several lines of output
find . -type f ( -iname '.cpp' -o -iname '.hpp' -o -iname '.c' -o -iname '.h' -o -iname '.cc' -o -iname '.hh' ) -print | xargs etags -a,"find c, c++ source and header files in current folder and create etags for them"
"diff --new-line-format="""" --unchanged-line-format=""""  file1 file2","output all lines from file1 except those present in file2, assuming both files are sorted."
"cat inputfile | grep ""^t\:"" | split -l 200","search ""inputfile"" for lines starting with ""t:"" and group the results in files with at most 200 lines each"
find $HOME -name '*.c' -print | xargs    grep -l sprintf,find *.c files under $home and search for the string 'sprintf' in those files
md5sum *.java | awk '{print $1}' | sort | uniq -d,"calculate a list of duplicate md5 sum hashes for all the "".java"" files in the current directory"
find -L -samefile path/to/file,find all links to path/to/file
find . -perm -600 -print,find all files that are readable and writable by their owner
"find -type f -iname ""*.txt"" -exec ls -lrt {} \;|awk -F' ' '{print $1 $2  $9}'",find only number of hard link & name of files from long list
cat input.txt | sed 's/string/longer_string/g' | column -t,"replace all instances of ""string"" with ""longer_string"" in file ""input.txt"" and re-align"
"find -maxdepth 1 -iname ""*target*""",find all files/directories that contain 'target' (case insensitive) in their names under current directory no-recursively
find -type f -iname '*.un~',find every vim undo file in the current directory tree
"top -p `pgrep process-name | tr ""\\n"" "","" | sed 's/,$//'`",monitor all processes whose command includes 'process-name'.
find . -perm /220,search for files/directories which are writable by either their owner or their group
find ./ -type f -ctime -7 -exec ls {} \; > new.files,display a long listing of all regular/normal files in current directory which have been changed in the last 7 days and save the output to new.files
"find $PWD -name ""file.ext"" -exec sh -c 'echo $(dirname {})' ';'","find all files named ""file.ext"" in the current directory tree and print the path names of the directories they are in"
find /usr -mmin 5,find all files/directories under '/usr' directory tree that have been modified exactly 5 minutes ago
mkdir -p /my/other/path/here,create intermediate directories as required and directory  /my/other/path/here
true,set the exit code($?) to '0'.
find / -fstype ext3 -name zsh*,"find all files whose names do not begin with ""zsh"" on ext3 file systems"
pwd | tr -d '\n' | pbcopy,copy current working directory to clipboard
"mount -o remount,rw /system","remount ""/system"" with read and write permission"
find . -name \*.log -print0 | xargs -I{} -0 cp -v {} /tmp/log-files,find and copy all log files in the current directory tree to /tmp/log-files
cat ${TMP}/${SCRIPT_NAME}.kb|sort -rh;,"reversibly sorts content of the '${tmp}/${script_name}.kb' file, comparing human readable numbers in file strings."
find /var/www -print0 | xargs -0 chown www-data:www-data,change the user and group of all files and directories under /var/www to www-data:www-data
du -sb /data/sflow_log | cut -f1,display the file size of file '/data/sflow_log' in bytes
"mount | grep ""^$path"" | awk '{print $3}'","display the mount point of a device file ""$path"""
find . | xargs echo,display all the files in the current folder
ls -ltr | grep 'Mar 4' | awk '{print 9}' | xargs zcat -fq | grep 12345,"find all files modified on ""mar 4"" and unzip and search their contents for ""12345"""
find . \! -empty -type d,display all non empty directories in current folder
"echo ""[some repository]"" | sudo tee -a /etc/apt/sources.list","write ""[some repository]"" to standard output and append to ""/etc/apt/sources.list"" as root"
find . -maxdepth 1 -print0,display all the files in the current directory and do not search in sub directories
find .  \( -name work -o -name home \)  -prune -o -name myfile -type f -print,"search the current directory tree recursively for the regular file named ""myfile"" ignoring ""work"" and ""home"" directories"
find . -maxdepth 1 -type d -print | xargs -I {} echo Directory: {},show the subdirectories of the current directory
"find . -printf ""%P\0"" | sort -z | while IFS= read -d '' -r f; do echo ""$(uuid) $f""; done",generate uuids for the files from the current directory tree
"find -type f -printf ""%s %p\n"" | sort -nr | head -n 4 | awk ""{print $2}""","find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries"
find . -name '*.py' | xargs grep 'import',find recursively all python files in the current directory and search them for the word ‘import’
\time -f%e sleep 1,prints elapsed time of command execution.
find /usr/local -type f -perm /a=x | xargs file |  grep 'not stripped' | cut -d: -f1,print the names of all of the unstripped binaries in the /usr/local directory tree. builtin tests avoid running file on files that are not regular files or are not executable
find . -perm 0777 -type f -exec ls -l {} \;,display a long listing of all regular files with 0777 permission under current directory tree
source `which virtualenvwrapper.sh`,"source executable ""virtualenvwrapper.sh"" found in $path"
find /tmp/test/* -daystart -mtime -0,find all files/directories which have been modified from the start of the day in directories/files taken from the glob pattern '/tmp/test/*'
find . -type f -exec rm -fv {} \;,force delete all the regular/normal files in the current folder
find ~ -name myfile,find all files/directories named 'myfile' under your home directory
ls $PWD/cat.wav,prints full path of a 'cat.wav' file in a current folder.
find /home/hobbes/ /home/calvin/ -name “*.txt” 2>/dev/null,search for text files in the folders /home/hobbes/ /home/calvin/ and discard all the errors
"find . -name "".txt""",display all text files in current folder
find ~/test -type d -exec basename {} \;,"recursively search through directory ""test"" in home directory, displaying names of all directories without full paths, ie. only the name part following the last slash of each directory."
readlink -f $(which lshw),"follow symbolic links for the full path of ""lshw"""
ln -s $(echo /original/*.processme) .,"create symbolic links in current directory to all files located in directory ""/original"" and have filename extension "".processname"""
"echo ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" | tee -a /etc/apt/sources.list","print ""deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main"" and append to file ""/etc/apt/sources.list"""
find root_dir -type f -exec chmod 444 {} \;,change the permissions of all the regular files in the folder root_dir to 444
find . -name \*.py -print0 | xargs -0 sed -i '1a Line of text here',"add ""line of text here"" on top of each *.py files under current directory"
cd $(basename $1 .tar.gz),"change directory to the basename of ""$1"" with "".tar.gz"" removed"
"ifconfig -a | awk '/^[a-z]/ { iface=$1; mac=$NF; next } /inet addr:/ { print mac }' | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'",gets mac addresses of all ip4 network interfaces.
"find ""$1"" -name ""?*"" | dd bs=$((${#1}+3)) count=1 2>/dev/null",print $1 if $1 is an empty directory
set -u,raise an error for using uninitialized variables
chown -R tomcat6 webapps temp logs work conf,"recursively change owner to ""tomcat6"" of ""webapps"", ""temp"", ""logs"", ""work"", and ""conf"""
find / -group 2000 -exec chgrp -h foo {} \;,change group ownership to `foo' for files with gid=2000
"find ""/path/to/files"" -mmin +120",find all the files/directories in '/path/to/files' directory tree which have not been modified in the last 2 hours
find /usr/local -maxdepth 1 -type d -name '*[0-9]',search /usr/local for subdirectories whose names end with a number 0-9
find $(pwd)/ -type f,list all files under the current working directory tree
find . -user sedlav -type f,"find all the regular/normal files in the current folder which belong to the user ""sedlav"""
find -type f -print0 | xargs -0 grep -l `printf '^\xef\xbb\xbf'` | sed 's/^/found BOM in: /',find utf-8 files with bom
find / -user olduser  -type f  -exec chown newuser {} \,search the entire file hierarchy for all regular files owned by olduser and change their ownership to newuser.
find . -daystart -ctime 1 -type f,find all the files that were modified two days ago
sudo crontab -e -u apache,"as root, edit the cron job list of user ""apache"" using the editor specified by editor environment variable, or default /usr/bin/editor if this variable is not set."
"find . -iregex ""./[^/]+\.dat"" -type f -cmin +60 -exec basename {} \;",find all data files in current folder which have not been changed in the last 60 minutes and display their name without extension
find /var/log/crashes -name app-\*\.log -mmin -5 -print | head -n 1,"find all files/directories with '.log' extension whose names start with 'app-', have been modified in the last 5 minutes and show the first one found"
"find . \! -path ""./.git*"" -a \! -name states_to_csv.pl","display all the files in the current folder excluding the file states_to_csv.pl and those that are present in the directories whose name starts with "".git"""
find . -name '*.csv.gz' -exec gzip -d {} \;,"find and uncompress all files in the current directory tree ending in "".csv.gz"""
du --max-depth=0 ./directory,find disk used space of only the target directory
"ifconfig en1 | awk '{ print $2}' | grep -E -o ""([0-9]{1,3}[\.]){3}[0-9]{1,3}""",gets ip address of 'en1' network interface.
"find . -iname ""*.jar"" | xargs zipinfo",list detailed information about all jar files in the current directory tree
find . | xargs grep regexp,find files matching regular expression regexp
"find . -name bin -prune -o -name ""*.txt"" -print",display all the text files in the current folder  and do not search in the bin directory
find / -user vivek,find all files owned by user vivek
find /path/to/input/ -type f -exec grep -qiF spammer@spammy.com \{\} \; -delete,delete all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents
"ls -l -- ""$dir/$file""","prints long listing of ""$dir/$file"" file."
"find ${INPUT}/ -name ""*.pdf"" -exec mv '{}' '{}'.marker ${OUTPUT} \;",move all *.pdf.marker files and their corresponding *.pdf files under ${input} to ${output}
find / -type f -exec echo {} \;,list all regular files in entire file system
find /tmp/a1,print the list of files in directory /tmp/a1 recursively
find / -path /proc -prune -o -perm -2 ! -type l -ls,locate world-writable files and directories on the system
history -c,clear the in-memory history
find . -group root -print | xargs chown temp,find all files owned by group `root' in the current directory tree and change their user to `temp'
find -name '*.php',find all the php files
"PS1=""`whoami`@`hostname | sed 's/\..*//'`""","set the bash prompt to ""username@hostname"""
"grep ""="" myfile | source /dev/stdin","interpret all lines containing an equal sign in myfile (usually, grab all variables from myfile into current shell)"
"nice -10 `alias list | sed ""s/^\(alias \)\?[^=]\+='//; s/'$//;""`","print command for alias ""list"" with low priority command"
find . -type f -mtime +0,find all regular files that reside in the current directory tree and were last modified at least 1 day ago
cat archive.tar | tar x,extract files from archive 'archive.tar'
mkdir dir1,"make directory ""dir1"""
rsync -chavzP --stats /path/to/copy user@host.remoted.from:/path/to/local/storage,"archive ""/path/to/copy"" to ""/path/to/local/storage"" on host ""host.remoted.from"" as user ""user"" updating files with different checksums, showing human readable progress and statistics, and compressing data during transmission"
cat /dev/urandom | tr -dc '. ' | fold -w 100 | head -1,"print a line of 100 random characters either ""."" or "" """
"find . -name ""*.pyc"" -exec rm -rf {} \;",recursively removes all files like '*.pyc' in a current folder.
"find */201111/* -name ""*.jpg"" | sort -t '_' -nk2",find all *.jpg files in */201111/* paths and numerically sort them according to the second field in the file name with a delimiter '_'
"find . | grep ""FooBar"" | (mapfile -t; cp ""${MAPFILE[@]}"" ~/foobar)",find all files/directories under current directory with 'foobar' in their paths and copy them to ~/foo/bar
screen -S demo -p 1 -X screen '/home/aa/scripts/outputs.sh',create a new window in an existing screen session and run a script
"finger -l | grep ""Name:"" | cut -d "":"" -f 3 | cut -c 2- | sort | uniq",print each logged in user's full name
ln -f secret_file.txt non_secret_file.txt,"force create a hard link named ""non_secret_file.txt"" to ""secret_file.txt"""
ping -c 5 -b 10.11.255.255 | sed -n 's/.* \([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' | sort | uniq,"send 5 pings to broadcast address ""10.10.0.255"" and print the unique ips who responded"
who am i --ips|awk '{print $5}' #ubuntu 14,get ip address of your ssh session
"ssh -f user@host ""echo foo; sleep 5; echo bar""","request ssh to run ""echo foo; sleep 5; echo bar"" in the background"
find . -atime 7 -print,search  in current directory downwards all files which were accessed exactly 7 days back
"find . -type f -printf '""%p""\n' | xargs grep string","search the current directory tree for regular files that contain ""string"""
sudo chown -R `whoami` /usr/local/lib,"recursively change ownership of ""/usr/local/lib"" to the current user"
find . -mmin +10 -print,find all files in the current folder that are not modified in the last 10 minutes
"find /path -type f -name ""*txt"" -printf ""cp '%p' '/tmp/test_%f'\n"" | bash","find recursively all files in /path that end in ""txt"" and copy them to /tmp/"
"find . -name ""*.html""",list files ending in .html and residing in the current directory tree
ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/,"create a symolic link in ""/usr/local/bin/"" to ""/applications/sublime\ text.app/contents/sharedsupport/bin/subl"""
"find . -maxdepth 2 -mindepth 2 -name '*.jpg' -exec sh -c 'echo mv -- ""$0"" ""${0%%.jpg}.jpeg""' {} \;",rename .jpg files to .jpeg in all subdirectories of the current directory
"find . -regex "".*/my.*p.$""","search the current directory tree for files whose names begin with ""my"" and end with ""p"" followed by any character"
find . -type f -print0,find all files under current directory and print them appending a null character at the end of each file paths
cat file | fold -w29,"print 'file' content, formatting output as 29-symbol wide column"
cat /proc/1/sched  | head -n 1,print info about thread number of process with pid 1
find /home/*/public_html/ -type f \( -iwholename '*/libraries/joomla/version.php' -o -iwholename '*/libraries/cms/version.php' -o -iwholename '*/libraries/cms/version/version.php' \) -print0 -exec perl -e 'while (<>) { $release = $1 if m/ \$RELEASE\s+= .([\d.]+).;/; $dev = $1 if m/ \$DEV_LEVEL\s+= .(\d+).;/; } print qq( = $release.$dev\n);' {} \;,dispaly the latest version of joomla in various folders
find . -type f -print | xargs grep -i 'bin/ksh',"find all regular files residing in the current directory tree and search them for string ""/bin/ksh"""
pr -n 'find . -type f -mtime -1 -print'|lpr,"provide a list of all the files edited today to pr, and pipe pr's output to the printer"
"find . -type f -name ""tecmint.txt"" -exec rm -f {} \;",find a single file called tecmint.txt and remove it
find . -type f | sed -e 's#.*\(\.[a-zA-Z]*\)$#\1#' | sort | uniq,find all the regular/normal files in the current folder and replace everything expect the extension of the file and display unique file extensions
shopt -s lithist,enables shell option 'lithist'.
find / -print0 | xargs -0 tar cjf tarfile.tar.bz2,archive the entire file system into tarfile.tar.bz2
"cut -d' ' -f5 file | paste -d',' -s","print the 5th space separated fields in ""file"" as a comma separated list"
find /home/admin/public_html/ -type d -exec chmod 755 {} \;,"find all directories under and below /home/admin/public_html/, and change their permissions to 755"
find . -type f -empty -delete,delete all empty files in the current directory tree
echo -en '111 22 3\n4 555 66\n' | column -t | sed 's/ \([0-9]\)/\1/g',create a table from '111 22 3\n4 555 66\n' with columns separated by a single space
grep -o . filename | tr '[:upper:]' '[:lower:]' | sort | uniq -c | sort -nr,"list each unique case insensitive character in ""file"" prefixed by number of occurrences and sorted from most frequent to least frequent"
sleep 10,sleep for 10 seconds
"find / -type f -name ""*.txt"" -print | xargs rm",delete all text files in the entire file system
find /etc -print0 | grep -azZ test | xargs -0 file,"execute the file utility for each file found under /etc or below that contains ""test"" in its pathname"
"rsync -ave ssh '""Louis Theroux""''""'""'""'""''""s LA Stories""'","download ""louis theroux's la stories"" using rsync over ssh"
cat /boot/config-`uname -r`,display current running kernel's compile-time config file.
find . -type d -print0|xargs -0 chmod 644,change permissions to 644 for all subdirectories
"find -name ""bar"" -execdir touch foo \;","create an empty file ""foo"" in each directory under the current directory containing a file named ""bar""."
pwd | tr '/' '\n',print working directory separated by newlines instead of forward slashes
who -m,determine the user associated with stdin
column -t -s $'\n' list-of-entries.txt,"format file ""list-of-entries.txt"" as new-line separated columns"
find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$',"search for directories in the folder ""test"" which end with 5 digits using regular expressions"
du -csxb /path | md5sum -c file,"calculate the md5 sum of the output of ""du -csxb /path"" and compare it against the md5 sum saved in ""file"""
"find . -maxdepth 1 -name ""*.jpg"" -size -50k | xargs rm -f",force delete all jpg files in current directory which are less than 50kb and do not search in the sub directories
ifconfig eth0 | grep HWaddr | cut -d ' ' -f 9,gets mac address of eth0 network interface.
find . \( -type d ! -name . -prune \) -o \( -mtime -1 -print \),display all the files in the current folder which have been modified in the last 24 hours excluding all directories
sed -i 's/foo/bar/' file,"modify and rewrite 'file' replacing the first instance of ""foo"" on each line with ""bar"""
find . -type f -printf '%TY-%Tm-%Td %TT   %p\n' | sort,find the most recently changed files in a subtree
comm -23 <(sort file1) <(sort file2)|grep -f - file1,"print unique lines in ""file1"" compared to ""file2"" in the order they appear"
"find . -type f -exec sh -c 'printf ""%s %s \n"" ""$(ls -l $1)"" ""$(md5sum $1)""' '' '{}' '{}' \;",display a long listing of all the regular/normal files in the current folder along with their md5sum
OS=$(uname -s),"set variable os to the name of the operating system, ie. ""linux"""
join -v 1 <(sort file1) <(sort file2),"print each line in ""file1"" whose first word does not exist as the first word of any line in ""file2"""
"find Música/* -type f -name "".*"" -exec ls -l {} \;",display long listing of all the regular hidden files in the folder musica
find . \! -name '.',display all files in current folder excluding current folder (.)
readlink -f $(which firefox),"resolve all symlinks in path to ""firefox"" binary if it exists in path, resulting in absolute path with no symlinks."
sudo chown -R  $USER:$GROUP /var/log/cassandra,"recursively change the owner to ""$user"" and group to ""$group"" of ""/var/log/cassandra"""
seq 10|jq -s add,calculate the sum of all the numbers from 1 to 10
"su $USER -c ""$WEB --quiet"" &","run command ""$web --quiet"" in backgrounf as user  named as the value of the variable $user"
find /etc -name *fstab*,find all *fstab* files under and below /etc
find . -name new -print -exec cat {} +,find all files named 'new' under current directory tree and display their contents
find . -name \*.c -print | xargs grep hogehoge,"search all *.c files from the current directory tree for ""hogehoge"""
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%TY %p\n',find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%ty %p\n'
df -k /tmp | tail -1 | awk '{print $4}',report available space on the file system containing /tmp in kilobytes.
mktemp /tmp/banana.XXXXXXXXXXXXXXXXXXXXXXX.mp3,"creates temporary file, replacing xxxxxxxxxxxxxxxxxxxxxxx with equal length suffix."
readlink -e /foo/bar/baz,"resolve symbolic link of file ""/foo/bar/baz"""
"find ./js/ -type f -name ""*.js"" -exec java -jar compiler.jar --compilation_level SIMPLE_OPTIMIZATIONS --js '{}' --js_output_file '{}'.compiled \;",find all the java script files in a folder and give them as input to a jar
"rsync -av --rsync-path=""sudo rsync"" /path/to/files user@targethost:/path","archive ""/path/to/files"" to ""/path"" on host ""user@targethost"" with elevated permission on the remote host"
find . -print0 | xargs -0 echo,get a list of files and directories in the current directory tree
chgrp,changes the group of defined file.
split /tmp/files,"split ""/tmp/files"" into files of at most 1000 lines each"
ls -Art *.sql.gz |tail -n 1 |xargs gunzip -c | mysql --user=user --password=password database,"import the uncompressed contents of the last modified file  matching ""*.sql.gz"" into ""mysql"""
"grep -ioh ""facebook\|xing\|linkedin\|googleplus"" access-log.txt | sort | uniq -c | sort -n","search case insensitively for 'facebook', 'xing', 'linkedin', ''googleplus' in file 'access-log.txt', extract the matched part, sort them and print them by sorting them in asending order of the number of repeated lines"
ps -ef,list all processes with detailed information
rpm -qfi `which ldconfig`,"print package information the command ""ldconfig"" belongs to in rpm"
"echo ""$USERTAB""| grep -vE '^#|^$|no crontab for|cannot use this program'","filters out strings, using the extended regexp pattern '^#|^$|no crontab for|cannot use this program' from ""$usertab"""
"find . -name ""*.svg.png"" -print0 | sed 's/.svg.png//g' | xargs -0 -I namePrefix mv namePrefix.svg.png namePrefix.png",rename all the svg.png files to png files in the current fodler
"join -t, -o 1.1,1.2,2.3 in1 in2","merge lines whose first comma-separated field in file 'in1' also appears as a first comma-separated in file 'in2' - both files must be sorted, and the output format of each line will be: first field of in1, second field of in2, and third field of in2."
find -type d -print0|xargs -0 chmod 644,find all directories under current directory and change their permission to 644
"find ""$HOME"" -name '*.txt' -type f -print0 | xargs -0 cp -ut ""$HOME/newdir""","find all txt files in the current directory and copy them to directory ""$home/newdir"""
"tac filename | perl -lane 'print join("" "", reverse(@F))'",reverse both words and lines in file
"find /home -type f -name ""*.sxw"" -atime -3 -user bruno","display all the home folder which end with the extension ""sxw"" and which have been accessed in the last 3*24 hours and which belong to the user bruno"
find /tmp -depth -name core -type f -delete,find files named 'core' in or below the directory /tmp and delete them
find /path/to/input/ -type f -exec grep -qiF spammer@spammy.com \{\} \; -print,find all files under /path/to/input/ that match the case insensitive string literal 'spammer@spammy.com' in their contents
alias ls='ls -lrta',"set alias ""ls"" for command ""ls -lrta"""
"find . -name ""*zip"" -type f | xargs ls -ltr | tail -1",find recursively the latest modified .zip file in the current directory
"ping www.google.com | while read endlooop; do echo ""$(date): $endlooop""; done",prepends date to ping output
df -k /tmp,report file system containing /tmp disk usage in kilobytes.
unset -f z,unsets shell function 'z'.
find . -size 100M,find all files starting from the current directory which are exactly 100mb in size
find -amin -60,"find files in the current directory and sub-directories, that were accessed within last hour"
"find /data/bin/test -type d -mtime +10 -name ""[0-9]*"" -exec rm -rf {} \;","recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number"
find $LOGDIR -type d -mtime +5 -exec rm -f {} \;,remove all directories found in directory tree $logdir that were modified more than 5 days ago
"find . -type f -name ""*.???"" | awk -F. '{print $NF}' | sort -u",print a sorted list of the extensions of the regular files from the current directory tree matching pattern '*.???'
find $HOME -newer ~joeuser/lastbatch.txt,find all the files in the home folder which have been modified after a file
mongo | tee somefile,"write the output of command ""mongo"" to the screen and to file ""somefile"""
find -E . -type f -regex '.*(c|h|cpp)$' -exec ls {} \;,list all files under current directory matching the regex '.*(c|h|cpp)$'
find -regex .*sql.*,find all files/directories matching the regex .*sql.*
find parent -name dir*,find all dir* files/directories under parent
find . -size +50k,find files larger than 50k
yes -- -tcp | head -n 2,"output two lines of ""-tcp"""
"ping -c 5 google.com | grep ""round-trip"" | cut -f 5 -d ""/""","print the average round trip time of 5 pings to ""google.com"" from osx"
"find src/js -type f -name ""*.js"" -exec cat {} >> ${jsbuild}$@ \;",display the contents of all java script files in a folder and save the output to a file
awk -f script.awk file,"filter contents of 'file' through awk commands written in script.awk, display the result."
find xargstest/ -name 'file??',search the xargstest/ directory recursively for files matching pattern 'file??'
"find . -type f \( -iname ""*.sh"" -or -iname ""*.pl"" \)",display all the .sh scripts and perl files in the current folder
sed ':a;N;$!ba;s/\n/ /g',replace all newlines from standard input except the last with spaces
curl -s http://search.twitter.com/search.json?q=node.js | json,"download content from ""http://search.twitter.com/search.json?q=node.js"" and format it as json"
find . ! -name '*.html' ! -name '*.svn*' -exec grep 'SearchString' {} /dev/null \;,"search all files in the current directory tree, except *.html and *.svn*, for ""searchstring"""
find /tmp -user ian,find files/directories that belong to user 'ian' under '/tmp' directory tree
"ifconfig eth0 | awk '/inet /{sub(/[^0-9]*/,""""); print $1}'",gets ip address of 'eth0' network interface.
find . -type f -exec grep -l linux {} \;,search for a word in all the regular/normal files in the current folder and display the filename along with the matched text
mktemp -u,prints name of temporary file but doesn`t create nothing.
find -mmin +60,list all files in the current directory tree that were last modified more than 60 minutes ago
sudo find . -type f -exec sed -i 's/置換前/置換後/g' {} \;,replace all '置換前' with '置換後' in all regular files under current directory tree and modify them in-place
"find $HOME/projects/ -name "".*"" -ls > foo.txt",display list of all the hidden files in the folder $home/projects/ and save the output to the file foo.txt
"tail -n 1 ""$file"" | wc -c | xargs -I {} truncate ""$file"" -s -{}","remove the last line from ""$file"" without reading the whole file or rewriting anything"
find . -type d -exec rmdir {}\;,removes all empty folders under current folder.
scp -3 user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/,"on host ""server_b"", connect as ssh user ""user"" and copy ""/my_folder/my_file.xml"" to directory ""/my_new_folder/"", with all transfer data relayed through local host."
find root_dir -type d -exec chmod 555 {} \;,change the permissions of all the directories in the folder root_dir to 555
find . -type f -exec cat {} \; -print,print content of each file under the current directory followed by that file name
"read -p ""<Your Friendly Message here> : y/n/cancel"" CONDITION;","read a line from standard input with prompt ""<your friendly message here> : y/n/cancel"" and save the response to variable ""condition"""
find ~ -used +365 -ok rm '{}' ';',delete all files under user's home directory tree that were accessed more than 365 days after their status was changed
"echo -e ""HTTP/1.1 200 OK\n\n $(date)""","print '""http/1.1 200 ok', two new lines and the current date"
"find * -maxdepth 0 -name ""efence*"" -prune -o -print","display all files in the current directory excluding those that are present in the directories whose name starts with ""efence"" and do not search in the sub directories"
./aaa.sh 2>&1 | tee -a log,"write standard output and error to the console and append to file ""log"""
"kill `pstree -p 24901 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr ""\n"" "" ""`",kills all child process and process itself having id 24901.
find . -maxdepth 1 -not -iname file.txt,"find all files under the current directory whose filenames are not ""file.txt"", ignoring the case"
find /myfiles -type l,find all symlinks in the /myfiles directory tree
find -mtime +0 -mtime -1,find all the files that are modified in the last 1 day
find /home /opt -name test.txt,search for the file test.txt in the folders /home and /opt
"find `pwd` -name ""file.ext"" -exec dirname {} \;","find all files named ""file.ext"" within the current folder and print the path where each one is located"
find | xargs ls,list all files and directories residing in the current directory and below
find /home/www -type f,search the /home/www directory tree for regular files
"find . -type f | xargs grep ""magic""",search for 'magic' in all regular files under current directory tree
ssh vagrant@127.0.0.1 -p 2222 -o Compression=yes -o DSAAuthentication=yes -o LogLevel=FATAL -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i ~/.vagrant.d/less_insecure_private_key -o ForwardAgent=yes,"ssh into default vagrant host without running ""vagrant ssh"" by passing the configuration parameters vagrant uses for ssh"
find . -mindepth 1 -maxdepth 1 -type d| xargs -n 1 cp -i index.html,copies file 'index.html' to each top-level directory in the current directory.
"find / -name ""*.md"" -type f -exec sh -c 'markdown ""${0}"" > ""${0%.md}.html""' {} \;",convert all markdown files on the system to html
find . -name '*.js' | grep -v excludeddir,exclude directory from find . command
"find ""$dir"" -name ""*.mod"" -type f -print0","display all the regular/normal files ending with "".mod"" in a folder"
FILES=`cat $RAW_LOG_DIR | xargs -r`,saves space separated content of $raw_log_dir in files variable
find . -type f | xargs cat > out.txt,display the contents of all the regular files in the current folder and save the output to out.txt
t=$(tty) echo ee | tee $t | foo,"write ""ee"" to standard output of the current terminal and as input to command ""foo"""
"ssh -l ${USERNAME} ${HOSTNAME} ""${SCRIPT}""","connect to host ""${hostname}"" as user ""${username}"" and execute ""${script}"" non-interactively"
"find ""$PWD"" / -iname '*.jpg' -exec du -s {} + | sed ""s/^/$(hostname): /""","calculate the total disk usage for each "".jpg"" file on the system and prepend the system host name to the output"
"mount | awk '$3 == ""/pa/th"" {print $1}'","print disk of mount point ""/pa/th"""
sudo chown `whoami` /vol,"change ownership of ""/vol"" to the current user"
"find . -name ""articles.jpg"" -exec chmod 644 {} \;",find files/directories named 'articles.jpg' under current directory tree and change their permission to 644
"find . | xargs grep ""searched-string""","finds strings having text ""searched-string"" in all files recursively in a current folder."
path=`which oracle`,"save the full path of command ""oracle"" to variable ""path"""
"find /dir/to/search/ \! -name ""*.c"" print","display all file in the folder /dir/to/search except "".c"" files"
find /path/to/files/ -newermt 20131204 -not -newermt 20131205 -type f -print0 | cpio --create --null  --format=ustar  | gzip > /tmp/dec-4.tar.gz,create a backup of all normal/regular files in current folder which have been modified between two dates and create a tar.gz file of this backup
address=$(dig +short google.com | grep -E '^[0-9.]+$' | head -n 1),save first ip address of domain 'google.com' in 'address' variable
find / -noleaf -wholename '/proc' -prune -o -wholename '/sys' -prune -o -wholename '/dev' -prune -o -perm -2 ! -type l  ! -type s ! \( -type d -perm -1000 \) -print,"display all files in the entire file system excluding the directories /proc,/sys,/dev and those files which are writable and which are not symbolic links and which are not sockets and which do not have the sticky bit set"
"cat new.txt  |  nl |sed  ""3d;4d""","print ""new.txt"" with line numbers prepended and lines 3 and 4 deleted"
find -type f -name '*.au' > names.txt,save the list of *.au files in the current directory tree to file `names.txt'
cat ~/.ssh/config,"print the contents of ""~/.ssh/config"""
diff -rqyl folder1 folder2 --exclude=node_modules,"print summary of new/missing files, and which files differ between folder1 and folder2, excluding those matching pattern ""node_modules""."
find ~/ -name 'core*' -exec rm {} \;,remove all core dump files from user's home directory
yes 'http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr=' | nl -ba | sed 786q | grep . | awk '{print $2$1}',"print url ""http://www.blabla.bla/forum-detail/?ft=72260&fid=34&&pgr="" followed by a number ranging from 1 to 786"
/usr/bin/sudo -u `whoami` `which program`,"run command ""program"" as the current user"
history 10,print last 10 commands in history
parec --raw --channels=1 --latency=2 | od -N2 -td2 | head -n1 | cut -d' ' -f2- | tr -d ' ',read a single sample of raw audio in the form of a number between -32768 and 32767
"find ""$dir"" -not -path ""$dir/prune_me*"" -exec bash -c 'echo ""$0""' {} \;",list all files under $dir directory except path $dir/prune_me directory
su - YOUR_USER,login as user your_user
find /opt /usr /var -name foo -type f,"search directories /opt, /usr, /var for regular file foo"
yes $'a\nb' | script.py,"continuously send ""a"" then ""b"" to ""script.py"""
"find . -type d -name "".svn"" -print | xargs    rm -rf",find all .svn directories under current directory and delete them
"find . -type f | xargs stat -c ""%a %n"" | awk '{print ""chmod ""$1"" ""$2}' > ./filesPermissions.sh",create script filespermissions.sh that restores the original permissions of the regular files in the current directory tree
"echo -e ""<line>"" | sed 's:\s\+:\t:g' | cut -f2",print second section of line <line> where sections are separated by one or more whitespace.
"find . -not \( -name .svn -prune -o -name .git -prune \) -type f -exec sed -i ""s/[[:space:]]*$//g"" ""{}"" \;",remove trailing white spaces from all files under current directory ignoring .git and .svn directories
find . -name '*shp*',find all *shp* files/directories under current directory
rsync -ur dir_a dir_b && rsync -ur dir_b dir_a,"synchronize ""dir_a"" and ""dir_b"" to contain the latest files in both directories"
basename testFile.txt.1 .1,"output ""testfile.txt.1"" without the "".1"" suffix."
find . -name \*.jpg -exec basename {} \; | uniq -d,find all *.jpg files under current directory and print only duplicate names
find -inum 117672808 -exec rm {} \;,delete all files/directories with inode number 117672808 under current directory tree
"find ""$some_directory"" -type f -name '.*' -exec rm '{}' \;",delete all hidden files under $some_directory
"find / -type d -name ""*99966*"" -print 2>/dev/null","find all directories starting from root that contain the string ""99966"" in their names"
fold -w 80 file.txt,"wrap each line in ""file.txt"" to fit in 80 characters"
ssh-keygen -l -E md5 -f /etc/ssh/ssh_host_ecdsa_key.pub,display the host's ecdsa fingerprint using the md5 hasing algorithm.
"find /tmp/ -depth -name ""* *"" -execdir rename "" "" ""_"" ""{}"" "";""",find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _
find . -name '*.tif ' -print,"search for all ""tif"" images in current folder"
"find /etc/ -iname ""*"" | xargs grep '192.168.1.5'","search for the ip ""192.168.1.5"" in all the files in /etc folder"
"top -b -d2 -s1 | sed -e '1,/USERNAME/d' | sed -e '1,/^$/d'","display process information twice, waiting one second between each, filtering out the header line."
"find . -name ""*.java"" -exec cp {} {}.bk \;",backup all of the java files in the current directory tree by copying them and appending the suffix .bk to each
find . -fprint foo,save a list of all the files/directories under current directory tree to a file named 'foo'
"read -p ""Do you wish to install this program?"" yn","read a line from standard input into the variable ""yn"" with the prompt ""do you wish to install this program?"""
find /usr/share -name README,find all readme's in /usr/share
sudo lsusb -v|less,page through extended usb information.
"find . -type f -name ""*.java"" -exec perl -p -i -e ""s/[ \t]$//g"" {} \;",remove trailing spaces and tabs from all *.java files under current directory
cd $(find . -name Subscription.java | xargs dirname),find all subscription.java files/directories under current directory and enter into the parent directory of the first one found
find ~/ -atime +10,search the home directory for files accessed more than 10 days ago
cat table.txt | awk '{print $1}' | sort | uniq  | xargs -i grep {} table.txt,"print the lines in ""table.txt"" grouped by the first field"
zcat /usr/share/doc/mysql-server-5.0/changelog*.gz | less,"view contents of files matching ""/usr/share/doc/mysql-server-5.0/changelog*.gz"" in ""less"""
seq 10 | tr '[\n]' '+' | sed -e 's/+/ + /g' -e's/ + $/\n/' | xargs expr,calculate the sum of all the numbers from 1 to 10
pwd | awk -F/ '{print $NF}',prints current directory name
grep -U -l $'\015' $(fd),"processes file as binary file, and searches for symbol by its octal value '\015'."
find . -name '.git' | xargs dirname,recursively finds all folders in a current folder that contain files like '.git'.
"find . -type f -name ""*.so"" -exec sh -c ""echo {} && readelf -s {} | grep mysymbol"" \;",find all *.so files under current directory and search for mysymbol in their symbol tables
wc -l --files0-from=<(git ls-files -z),counts the number of lines in each file in a git repository.
"find . -path ""./foo"" -prune -o -path ""./bar"" -prune -o -type f -name ""*.html""","display all the html files in the current folder excluding search in the paths ./foo, ./bar."
find xargstest/ -name 'file*' -print0 | xargs -0 myscript.sh,process all files matching pattern 'file*' and residing in the xargstest/ directory tree with script `myscript.sh'
full_path=`readlink -fn -- $path`,"save the absolute path of ""$path"" to variable ""full_path"""
find . -name nasa -type d,find all directories name nasa in the current directory and below.
"find . -name ""file2015-0*""","display all the files in current folder which start with ""file2015-0"""
find /var/www/ -type f -name «access.log*» -exec du -k {} \;|awk '{s+=$1}END{print s}',display the sum of disk used by all the access.log files in /var/www folder
"cat afile | split -l 2 --filter='bzip2 > ""$FILE.bz2""'",split file 'afile' into parts as of two lines per each and compress each part with 'bzip2'
rsync -av --delete src-dir remote-user@remote-host:dest-dir,"archive ""src-dir"" to ""dest-dir"" on ""remote-user@remote-host"" and delete any files in ""dest-dir"" not found in ""src-dir"""
md5sum $(which gcc),"calculate the md5sum of the executable file of command ""gcc"""
find /usr -name *stat,find all *stat files/directories under /usr
which gradle,"print full path of command ""gradle"""
groups monit |grep www-data,checks that 'monit' user is in 'www-data' group.
find . -iname '*.pyc' -print0 | xargs -0 --no-run-if-empty  rm,recursively removes all files like any-cased '*.pyc' in a current folder.
"find / -type f|egrep ""/[^/]{0,24}$""",search the file system for regular files whose names are shorter than 25 characters
find . -iname .svn -print0 | xargs -0 rm -rf,"delete recursively, without prompting, any files or directories under the current directory that case insensitively match the filename "".svn"""
"chmod a+x $pathToShell""myShell.sh""","allow all users to execute '$pathtoshell""myshell.sh""'"
find . -type f -wholename \*.mbox | parallel mv {} {.},"find regular files under the current directory, whose name ends in .mbox, piping the output to the gnu parallel command that will rename each file to not have a file extension."
"nl -b a file | sort -k1,1nr | sed '1, 4 d' | sort -k1,1n | sed 's/^ *[0-9]*\t//'",print the content of the file 'file' deleting the last four lines
rsync -rvv *.txt user@remote.machine:/tmp/newdir/,"recursively copy all "".txt"" files to ""user@remote.machine:/tmp/newdir/"""
jobs -p | tail -n [number of jobs] | xargs kill,kill a number of background jobs
"find . -name '*.txt' -exec sh -c 'mv ""$0"" ""${0%.txt}.txt_bak""' {} \;",change the extension of all the text files from .txt to .txt_bak in current folder
"find . -iregex "".*packet.*"" ! -type d -size +1500c",find all files/directories that contain 'packet' (case insensitive) in their names excluding directories that are bigger than 1500 bytes in size
find ../[12][0-9][0-9][0-9] -type f -exec ln -s {} \;,"create a symbolic link in the current directory for each file under the directories matching ""../[12][0-9][0-9]"""
find . -type f -print | xargs /usr/bin/grep -il 'bin/ksh' | tee /tmp/allfiles,"find files containing string ""#!/bin/ksh"" and append their names and matching strings to /tmp/allfiles"
"find . -name ""*.rb"" -type f | xargs wc -l",find all *.rb (regular) files under current directory and count their line numbers
find ~ -size -100M,find all files in your home directory and below that are smaller than 100m.
"paste -d'¤' file1 file2 | sed 's,¤, ,g'","print each line in ""file1"" and file2"" separated by a space"
ln -s .bashrc test,"create a symbolic link named ""test"" to file "".bashrc"""
"tac file | sed -e '/./,$!d' | tac | sed -e '/./,$!d'",removes trailing and starting newlines from file
ifconfig eth0 | grep -oP '(?<= inet addr:)[^ ]+',gets ip address of 'eth0' network interface.
echo 798|rev,display 798 backwards
"find . -iname ""*.mov"" -printf ""%p %f\n""",find all *.mov (case insensitive) files under current directory and list their paths with their names
"THIS=`readlink -f ""${BASH_SOURCE[0]}"" 2>/dev/null||echo $0`","save the full path of the current script into variable ""this"""
"time find /usr/src -name ""*.html"" | xargs /usr/bin/grep -l ""foo"" | wc -l","count the total number of lines in all html files under /usr/src that contain string ""foo"""
tar -cvf - data/* | gzip > data.tar.gz,"archive and compress all files in ""data"" directory into ""data.tar.gz"""
yum install -y devtoolset-3,"installs package ""devtoolset-3"" answering 'yes' on all questions."
find $HOME -iname '*.ogg' -type f -size -100M,find all *.ogg (case insensitive) files under your home directory that are less than 100mb in size
find project -type f -print | egrep '(\.[ch]|[Mm]akefile)$' > Include,search for a file using name patterns from the list of all the regular files in the folder project and save the output to the file include.
"find . -type f -name ""*.txt"" -exec printf ""File: %s\n"" {} \;",search in the current folder for all the text files and display their names
"find . -regex-type posix-extended -regex "".*def/incoming.*|.*456/incoming.*"" -prune -o -print","find all files/directories under current directory excluding the paths that match the posix extended regex "".*def/incoming.*|.*456/incoming.*"""
"find . -name ""*.$1"" -exec rm {} \;",delete all files under current directory tree with '.$1' extension where $1 expands as the first positional parameter
"find . -name ""*.undo"" -ls | awk '{total += $7} END {print total}'",find all the files ending with undo in the current folder and calculate the total size of these files
ls -t *.log | tail -$tailCount | xargs rm -f,removes 5 oldest files in the current folder.
find / -size +1000k -exec ls -l {} \; -print,display a long listing of all files in the entire file system which are bigger than 1mb
find /path/to/dir -print0 | xargs -0 touch,update timestamps of all files and directories under directory /path/to/dir.
tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac,prints last part of a logfile since timestamp 423
"find . –iname ""error"" –print ( -i is for ignore )  find . –iname ""error"" –print ( -i is for ignore )",case insensitive search using find command in linux
which rails,"print the full path of command ""rails"""
diff -qr dir1 dir2,"print which files differ in ""dir1"" and ""dir2"" recursively"
find . -nouser | xargs rm,delete all the files in the current folder which do not belong to any user
"find /some/dir/ -maxdepth 0 -empty -exec echo ""huzzah"" \;","print ""huzzah"" if directory ""/some/dir"" is empty"
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tc %p\n',find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%tc %p\n'
find . -type d -name 'uploads',"find all the directories with the name ""uploads"" in current folder"
"find . -name ""sample*_1.txt"" | sed -n 's/_1\..*$//;h;s/$/_out/p;g;s/$/_1.txt/p;g;s/$/_2.txt/p' | xargs -L 3 echo program",find all sample*_1.txt files/directories under current directory and print 'program  sample*-out sample*_1.txt sample*_2.txt' for each of them
"find . \( -type f -exec sudo chmod 664 ""{}"" \; \) , \( -type d -exec sudo chmod 775 ""{}"" \; \)",change the permission of all the files in the current directory to 664 and change the permission of all the directories  in the current folder to 775.
find . -type f -exec dos2unix {} {} \;,convert all dos files under and below the current directory to the unix format
"find . -name ""*.jar"" -print -exec jar -tf {} \;|egrep  ""jar$|message_track.properties""",find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file
chgrp -R shared_group /git/our_repos,recursively changes group ownership of everything within '/git/our_repos' to 'shared_group'.
file -L `which gcc`,"print file type of command ""gcc"""
find /myDir -mindepth 1 -mtime 7 -delete,delete all files in the /mydir directory tree that were last modfied 7 days ago
find /var/www -maxdepth 4 -name 'restore.php' -exec rm -r {} \;,delete all 'restore.php' files in /var/www and 3 levels below
ssh -At gw ssh -A app1,"login to remote system ""app1"" through an ssh gateway system called ""gw"""
find . -name \*.c -print0 | xargs -0 grep wait_event_interruptible /dev/null,"find all *.c files under and below the current directory that contain ""wait_event_interruptible"""
diff -dbU0 a b,"print a minimal set of differences between files in directories ""a"" and ""b"", ignore differences in whitespace, and print 0 lines of unified context"
"find . -type f -name ""*.*"" | grep -o -E ""\.[^\.]+$"" | grep -o -E ""[[:alpha:]]{3,6}"" | awk '{print tolower($0)}' | sort | uniq -c | sort -rn",count the number of unique 3 to 6 character file extensions are in the current directory tree
"read -p ""Enter your choice: "" choice","read a line from standard input with prompt ""enter your choice: "" and save response to variable ""choice"""
od -t x1 -t a /dev/ttySomething,"dump ""/dev/ttysomething"" in both hex and text"
find / -size +900M,find and show all files on the system that are larger than 900 mb
find . -type d -exec mkdir -p -- /path/to/backup/{} \;,"copy directory hierarchy from the current working directory to ""/path/to/backup/"""
find . -type f -name '.*',get a list of all hidden files from the current directory tree
"find /var/www -cmin -10 -type f -printf ""%c %pn""",list all regular files in /var/www and below that have changed in the last 10 minutes
git grep ^ | wc -l,counts total number of lines in a git repository.
find -perm 777 | xargs -I@ sudo chmod 755 '@',change permission to 755 of all files/directories under current directory tree that have 777 permission
find . ! -name '*git*' | grep git,"display all files in current folder excluding those that have the word ""git"" in their name and display files that have git in their path names"
sudo cat /sys/kernel/debug/tracing/trace_pipe | tee tracelog.txt,"write contents of ""/sys/kernel/debug/tracing/trace_pipe"" to standard output and to ""tracelog.txt"" executing as a root user"
"diff current.log previous.log | grep "">\|<"" #comparring users lists","compare ""current.log"" and ""previous.log"" line by line and print lines containing regex pattern "">\|<"""
"find . -type d -print0 | xargs -0 -I {} sh -c ' echo ""{}: \c"" ; find {} -maxdepth 1 -type f | wc -l ; find {} -maxdepth 1 -type f -print | sed ""s#.*/##"" '",find all files inside all directories (non-recursive) in /tmp/test directory (recursive) and print the number of files in each directory and also print the file name and directory paths
find wordpress -maxdepth 1 -name '*js',find every javascript file in the wordpress directory
( cd /tmp; mycommand ),run mycommand in /tmp without changing the current shell's working directory
find . -size +10c -print,search  in current directory downwards all files whose size is greater than 10 bytes .
find . -name .snapshot -prune -o \( -type f -mtime 0 -print0 \),find all files under current directory without descending into .snapshot directory that were modified in last 24 hours with null character as the delimiter
"echo ""   wordA wordB wordC   "" | sed -e 's/^[ \t]*//' | sed -e 's/[ \t]*$//'","remove leading and trailing spaces or tabs from ""   worda wordb wordc   """
"find . -not -name ""*.exe"" -not -name ""*.dll""","search the current directory tree for files and directories whose names do not end in "".exe"" and "".dll"""
find . -name 'file*' -size 0 -print0 | xargs -0 rm,"find files in the current directory tree whose names begin with ""file"" and whose size is 0, and remove them"
set -o verbose,set the 'verbose' shell option causing bash to print shell input lines as they are read
"zcat file.gz | awk -F, '$1 ~ /F$/'","execute ""awk -f, '$1 ~ /f$/'"" on contents of ""file.gz"""
"find ""$@",run the find command with all positional parameters
alias dosetit='eval `setit-sh`',"set alias ""dosetit"" for command 'eval `setit-sh`'"
column -s: -t,"delimit standard input with "":"" and display as a table"
"find ""$ORIG_DIR"" -name ""*"" -type f","display all normal/regular files in the folder ""$orig_dir"""
"find /mnt/zip -name ""*prefs copy"" -print | xargs rm",remove all files that end with 'prefs copy' in their names under '/mnt/zip' directory tree
"find /home/vmail/ -type d -path ""*/*/Maildir/.LearnAsSpam/cur"" -exec sh -c '(cd {} && mv ./* ../../.Junk/cur)' ';'","find directories in /home/vmail that match pathname ""*/*/maildir/.learnasspam/cur"", and move them to folder .junk/cur"
sudo mount -t vboxsf D:\share_folder_vm \share_folder,"mount the ""vboxsf"" filesystem ""d:\share_folder_vm"" on ""\share_folder"""
find . -type d -maxdepth 1 -empty -print0 | xargs -0 /bin/rmdir,find all empty directories in the current one and delete them
"find . -type d -name "".svn"" -print | parallel rm -rf",clean the current directory from all subversion directories recursively
find /path/to/directory/* -maxdepth 0 -type d,print the paths of the directories from the paths expanded by the glob pattern /path/to/directory/*
"find /var/www/ -type f -name ""*.pl"" -print",find all the perl files in /var/www
find /usr -name java,find all files/directories named 'java' under /usr directory
sort -m *.txt | split -d -l 1000000 - output,"merge already sorted files ""*.txt"" and split the result into files of at most 1000000 lines each with a numeric suffix and a prefix ""output"""
find . | xargs perl -p -i -e ‘s/something/else/g’,find all the files in the current folder and replace old string with new string
alias ..='cd ..',"set alias "".."" for command ""cd .."""
find . -perm -100 -print,find executable files
split -b 1M -d  file.txt file,"split ""file.txt"" into files of at most 1 mib in size with a numeric suffix and prefix ""file"""
"find ./polkadots -type f -name ""image.pdf""",find all image.pdf files under ./polkadots
find /directory/ -maxdepth 1 -type d -print| wc -l,count the number of directories under directory '/directory/' non-recursively
"find . -type f -name '*.txt' | sed 's/'""'""'/\'""'""'/g' | sed 's/.*/""&""/'  | xargs -I{} cp -v {} ./tmp/",copies all files like '*.txt' under the current directory to the './tmp/' directory.
"ls | grep ""android"" | cat -n","print numbered list of all top-level files in the current directory, with name containing 'android'"
"find -name '*.php' -exec grep -li ""fincken"" {} + | xargs grep -l ""TODO""",find all the php files in current folder and search for multiple patterns in these files
find . -name \*.c -print,report all c language source code files under the current directory
"df '/some/directory' | awk '{print $1, $6}'",display source and mount point of the file system containing /some/path.
"find . -name ""*.txt"" -prune -o -print",display all files in the current folder expect text files
find /home/user/Maildir/.SPAM/cur -type f -exec rm -f '{}' '+',remove all files under /home/user/maildir/.spam/cur
"xargs -n 1 -I '{}' find ""$(pwd)"" -type f -inum '{}' -print",print the full path of a file under the current working directory with inode number specified on standard input
bar=$(cat foo.txt | { read bat;echo $bat;}),"save the first line of ""foo.txt"" to variable ""bar"""
find . -path ‘*/1/lang/en.css’ -print,find all files in the current directory tree whose pathnames match pattern '*/1/lang/en.css'
"find /home/you -iname ""*.c"" -atime -30 -type -f","find all the "".c"" files in the folder ""/home/you"" which have been accessed in the last 30*24 hours"
find / -user comp,find all files owned by user `comp'
"find -not -name ""query_to_avoid""",find all files/directories not with the name 'query_to_avoid' under current directory
dig @8.8.8.8 domain. ns,print ns record for domain 'domain.' from 8.8.8.8 nameserver
"DATECOMING=$(echo `date -d ""20131220"" +%j`)","save the day of the year from the time string ""20131220"" to variable 'datecoming'"
find . -type f \( -iname “*.c” \) |grep -i -r “keyword”,"search for a word in all the .c files( those having the extension ""c"") in current directory"
find $parentdir -name $tofind*,find all $tofind* files/directories under $parentdir
find ~/junk  -name 'cart[4-6]' -exec rm {}  \;,"remove files cart4, cart5, cart6 in directory ~/junk"
find ~ -size 100M,find all files in your home directory and below that are exactly 100m.
find /etc -size +100k,find all the files under /etc directory which are larger than 100k
ls -1t | head -1,prints latest modified file in a directory
find . -type f | xargs grep string,"search the current directory tree for regular files that contain ""string"""
"find -mindepth 3 -maxdepth 3 -type d -name ""*New Parts*"" -exec ln -s -t /cygdrive/c/Views {} \;","find the directories whose names contain ""new parts"" at level 3 of the current directory tree and create symlinks to them in /cygdrive/c/views"
tmux set-environment -t sessname -u RBENV_VERSION,unset rbenv_version variable in tmux session 'sessname' environment.
"find a -type f -name '4' -delete -printf ""%h\0"" | xargs -0 -r rmdir",recursively removes all files like '4' under folder './a' and removes folders with such files if they become empty.
find /tmp/ -type f -mtime +1 -print0 | xargs -0 -n1 rm,delete all the regular files in the temp folder which have not been modified in the last 24 hours
"find /var/www -cmin -10 -printf ""%c %pn""",list all files in /var/www and below that have changed in the last 10 minutes
"find /home -name foo.bar -type f -exec rm -f ""{}"" ';'",find file `foo.bar' and delete it
find /source_path -name *.data -exec cp {} /target_path \;,copy all *.data files under /source_path to /target_path
"ls -1 | tr '[A-Z]' '[a-z]' | sort | uniq -c | grep -v "" 1 """,print a count of case insensitive duplicate filenames in the current directory
"dir=""$(mktemp aws-sync-XXXXX)""",creates file by template 'aws-sync-xxxxx' in a current folder and stores file name in a 'dir' variable.
"killall -u ""$(whoami)"" dropbox","kill all instances of ""dropbox"" owned by the current user"
find / -newer /tmp/t1 -and -not -newer /tmp/t2,search for all files newer than file /tmp/t1 but not newer than file /tmp/t2
grep -e TEXT *.log | cut -d' ' --complement -s -f1,finds strings with 'text' from *.log files and prints all but first field from any space-delimited string.
find . -name '*.[ch]' -print0 | xargs -r -0 grep -l thing,"list all .c and .h files in the current directory tree that contain ""thing"""
find -maxdepth 1 -type f -perm /200,find regular files in the current directory that are writable by their owner
find -user root -o -user www-data,search for the files that are owned by user rooter or by user www-data
screen bash --rcfile yourfile.rc,run bash in screen and source a file before printing the prompt
sudo chmod 755 /dvtcolorconvert.rb,"change permissions of ""/dvtcolorconvert.rb"" to 755"
"find /the/path -depth -type f -name ""*.abc"" -exec sh -c 'mv ""$1"" ""$(dirname ""$1"")/$(basename ""$1"" .abc).edefg""' _ {} \;","change the extension of all the "".abc"" files in the folder ""/the/path"" to "".edefg"" and do not change in the sub directories"
"find ""$1"" -perm -u+x -print0 | xargs chmod g+x",find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories
df $PWD | awk '/[0-9]%/{print $(NF-2)}',print amount of space available on the file system containing path to the current working directory.
find . -name \*.php -type f -exec php -l {} \;,perform syntax check on all php files in the current directory tree
"ls -l ""$( which studio )""","print file information of command ""studio"""
bzip2 file | tee -a logfile,compress the file 'file' with 'bzip2' and append all output to the file 'logfile' and stdout
cd /home/www && find . -type f -print0 | xargs -0 perl -i.bak -pe 's/subdomainA\.example\.com/subdomainB.example.com/g',find all regular files under /home/www and replace every occurrences of 'subdomaina.example.com' with 'subdomainb.example.com' in those files
sed 's/^/./' | rev | cut -d. -f1  | rev,print the last file extension from standard input
"sed 's/.*/& Bytes/' ""$TEMPFILE"" | column -t","append ""& bytes"" to the end of every line in ""$tempfile"" and format the result as a table"
find /dev/shm/split/ -type f -exec split -l 1000 {} {} \;,"split all files in the directory tree ""/dev/shm/split/"" into files of at most 1000 lines each and use the filename as the prefix"
find / \( -nogroup -o -noname \) -ls,find all the files from root folder which have nogroup or noname and dispaly their details.
"find working -type f -name ""*.mp4"" | head -1",find all *.mp4 files under directory named 'working' and show the first one found
cd $(dirname `which oracle`),"change directory to the directory containing the ""oracle"" executable"
hostname=`hostname -s`,"save the short system host name to variable ""hostname"""
"join -j 1 -t : -o 2.1,2.2,2.4,1.3 <(sort empsal) <(sort empname)","for each line of colon-separated information in files 'empsal' and 'empname' whose first field matches in both files, output: first field of empname, second field of empname, fourth field of empname, and third field of empsal."
"find . -name ""*.xml"" -exec echo {} \;",search for all xml files in current folder and display them
yum list | grep subversion,finds if 'subversion' package is installed in system.
read -s password,"read a line from standard input into variable ""password"" without echoing the input"
"find /eserver6 -name ""orm.properties""",find all files/directories named orm.properties under  /eserver6 directory
find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu',"find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory"
find /usr -newer /usr/FirstFile -print,find files under /usr that are newer than the first file `firstfile'
"find -maxdepth 1 -type f -newermt ""Nov 22"" \! -newermt ""Nov 23"" -delete","remove the regular files from the current directory that were last modified on november, 22"
find dir/ -name '*.txt' | xargs cp -a --target-directory=dir_txt/ --parents,copy *.txt files from the dir/ directory tree along with their parent directories
history | sed 's/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//',"replace the leading spaces in the output of ""history"" with periods"
tree -F coreutils-8.9 | sed -r 's|── (.*)/$|── DIR: \1|',"recursively list all files and directories in ""coreutils-8.9"" with ""dir: "" prepending directory names"
read -a first,"read a line from standard input and save each word in the bash array variable ""first"""
"find / -type d -name ""needle"" 2>/dev/null","search the system for directories named ""needle"" suppressing error messages"
var=$(ls -l),saves listing of a current folder in 'var' variable.
find /proc -user myuser -maxdepth 1 -type d -mtime +7 -exec basename {} \; | xargs kill -9,kill the processes of user `myuser' that have been working more than 7 days
find / -type f -exec echo {} - ';' -o -exec echo {} + ';',"print all files with a '-' after their name if they are regular files, and a '+' otherwise"
find . -type f -exec chmod 644 {} \;,change permissions to 644 recursively only for files
"read -p ""Password: "" -s SSHPASS","read a line from standard input into variable ""sshpass"" with prompt ""password: "" and without echoing the input"
find /tmp -mtime +30 -print,find all the files older than 30 days
"history ""$@"" | tac | nl | tac","prepend the reverse history number to the output of the history command with arguments ""$@"""
"find ""${S}"" -name '*.data' -exec mv '{}' ""${S}/data/"" \;",move all *.data files/directories in $s directory to $s/data/ directory
find .git -type f -print0 | xargs -0 sed -i 's/subdomainB\.example\.com/subdomainA.example.com/g',find all regular files in .git and replace every occurrences of 'subdomainb.example.com'  with 'subdomaina.example.com' in those files
find /home -perm 1553,search for all the files in the folder /home which have sticky bit set and have the permissions 553
cd $(dirname $(readlink -f $0)),change directory to the parent of the real path of the current script
comm -13 a b,"print unique lines of sorted file ""b"" compared with sorted file ""a"""
"ls -l --color=always ""$@"" | grep --color=never '^d'",filters only directories from long file listing of the current directory
find /opt /usr /var -name foo.scala -type f,find a 'fool.scala' named regular file under /opt /usr /var those directories.
rsync -rtuv /path/to/dir_a/* /path/to/dir_b,"synchronize ""/path/to/dir_b"" with files in ""/path/to/dir_a/"" if the files are newer"
"find /dir/to/search/ -type f -iname "".*"" -ls","display list of all the hidden regular/normal files in the directory ""/dir/to/search/"""
find . -type f -exec fromdos {} \;,find all files under current directory and run the command fromdos for each of them with the file path as argument
rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO,"archive ""filetocopy"" to ""/some/nonexisting/dirtocopyto"" on host ""ssh.myhost.net"" via ssh"
find /home -maxdepth 1 -type d,find all the directories in the home folder do not search in sub directories
"find -type f -name ""* *""",display all regular files in current folder which have spaces in their name
find . -name \*.sql | xargs \ls -1rc | tail -7 | head -1,find the oldest *.sql file under current directory
"find . -name ""*.c"" -exec grep -i ""keyword"" {} "";""","search all .c files from the current directory tree for ""keyword"", ignoring the case"
"find . -perm -o+w,+s","print the names of all files in or below the current directory, with all of the file permission bits s_isuid, s_isgid, and s_iwoth set"
"find . -type f -name ""*.rm"" -exec ffmpeg -i {} -sameq {}.mp3 \; -exec rm {} \;",find .rm files in the current directory tree and convert them to the mp3 format
zcat Sample_51770BL1_R1.fastq.gz | wc -l,"count number of lines in ""sample_51770bl1_r1.fastq.gz"""
read,read a line from standard input
groups a b c d,gets the groups these users belong to.
grep foo * | nl,"search for ""foo"" in every file in the current directory and number the output"
/usr/bin/find $*,execute /usr/bin/find with $* arguments
find . -name '*.[ch]',find all *.[ch] files under current directory
OUTPUT=`top -b -n 1 | tail -n +8 | head -n 1`,set variable output to full process info of process currently taking the most cpu time.
seq 1 1000 | split -l 1 -a 3 -d - file,"create 1000 files each file having a number from 1 to 1000 named ""file000"" to ""file999"""
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -q ""{}"" \; -print0 | xargs -0 sed '/./d","find regular files under / that contain ""stringtofind"" and clear out their contents"
"find . | awk '{FS = ""/"" ; print """", NF, $F}' | sort -n  | awk '{print $2}' | xargs grep -d skip ""search term""","search for ""search term"" in a sorted list of all files under current directory"
find . -type f -exec ./truncate {} \;,execute script 'truncate.sh' on all regular files in the current directory tree
grep -e TEXT *.log | cut -d':' --complement -s -f1,print lines containing string text from all log files in the current directory.
tr -d '\n' < yourfile.txt,"remove newline characters from ""yourfile.txt"""
find . | xargs grep <string-to-find>,search for a pattern in all the files in the current folder
"find . -type f \( -iname ""*.c"" -or -iname ""*.asm"" \)","search the current directory tree for *.c and *.asm files, ignoring the case"
comm -2 -3 <(sort A.txt) <(sort B.txt),"print unique lines of sorted file ""a.txt"" compared to sorted file ""b.txt"""
mv new old -b && mv old~ new,"swap ""new"" and ""old"" files or directories"
dig -x 8.8.8.8 | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5,gets domain name from dig reverse lookup.
find . -type f -exec ls -s {} \; |sort -n -r |head,find command will display top 10 big files from current directory .
"find MyApp.app -name Headers -type d -exec rm -rf ""{}"" \; 2>/dev/null",search directory tree `myapp.app' for directories whose name is 'headers' and delete them suppressing error messages
find . -name '*.pl' | xargs    grep -L '^use strict',search for the pattern '^use strict' in all *.pl files under current directory
finger | cut -d ' ' -f1 | sort -u | grep -iv login,print the sorted unique column of usernames of users who are currently logged in without the header
find ./ -type f -exec sed -i 's/string1/string2/' {} \;,"replace the first occurrence of ""string1"" on each line with ""string2"" in all regular files in the current directory tree"
"find  / -type d -iname ""apt""",find not case sensitive all directories that names are 'apt'
cal $month $year | awk -v day=$day -f cal.awk,"prints calendar of $month, $year, and redirects all output to the awk script 'cal.awk', with predefined variable 'day=$day'."
"find ~/Library/ -iname ""com.apple.syncedpreferences.plist""",find all files/directories named 'com.apple.syncedpreferences.plist' (case insensitive) under ~/library directory tree
"zcat file.gz | awk -v RS=""-----------\n"" '/A=2[ ,\n]/ && /dummy=2[ ,\n]/{count++} END{print ""Final counter value="",count}'","count the number of times that a single ""-----------\n"" separated record contains both ""a=2"" and ""dummy=2"" in compressed file ""file.gz"""
gzip -dc path/to/test/file.gz | grep -P --regexp='my regex' | split -l1000000,"decompress ""path/to/test/file.gz"" to standard output and save all lines matching ""my regex"" to files with a 1000000 line limit"
find foo -path foo/bar -print,"find all files matching shell pattern ""foo/bar"" in the foo directory tree"
cal -3 12 2120,"displays calendar of a previous, current and next month for december of 2120 year."
"find . -type f -printf ""%f\n""",find all files under current directory and print only the filenames (not paths)
find $DBA/$ORACLE_SID/bdump/*.trc -mtime +7 -exec rm {} \;,"delete all the trace files ("".trc"") from the folder $dba/$oracle_sid/bdump/ which have not been accessed in the last 7*24 hours"
find ./* | cpio -o > arch.cpio,archive all non-hidden files in the current directory and its sub-directories in the file arch.cpio
cat fileName | grep -v ^$ | wc -l,counts non-empty lines in file filename.
hostname  -I | cut -f1 -d' ',print the ip addresses for the current host name
find . -mtime 0 -print,show the list of all the files in the current folder which have been modified within the 24 hours
dig -t A $domain,get a record for domain $domain
"seq 10 | tac | sed '1,3d' | tac","print all lines of ""seq 10"" except the last 3"
"sort < <(find -printf ""%T@ %p\n"")",find all files under current directory with their timestamp and paths and print a sorted list
"find . -name ""file?"" -exec rm -vf {} \;","remove files in the current directory tree whose names match pattern ""file?"""
find /usr/bin -type f -mtime -10,find all regular files in /usr/bin modified less than within the last 10 days
"find . -name '*.jpg' -exec sh -c 'mv ""$0"" ""${0%.JPG}$.jpg""' {} \;",rename all *.jpg files to *.jpg$.jpg files under current directory
ifconfig eth0 | grep -Eo ..\(\:..\){5},gets mac address of 'eth0' network interface.
"tree -dfi ""$(pwd)""",list the full path of each directory under the current working directory
"awk '{gsub(/-/,""0"",$4);gsub(/-/,""0"",$5)}1' test.in | column -t","replace ""-"" with ""0"" in columns 4 and 5 of file ""test.in"" and format as a table"
"find . -type f -name ""*.c"" -print -exec grep -s ""main("" {} \;","search for occurrences of string ""main("" in the .c files from the current directory tree"
"echo ""myname=\""Test\"""" | sudo tee --append $CONFIG","write '""myname=""test""' to the console and append to ""$config"" as root"
"find ${FOLDER} -type f ! -name \"".*\"" -mtime -${RETENTION} | egrep -vf ${SKIP_FILE}","find all regular files under $folder directory tree that start with '"".' and end with '""' in their names and were modified in less than $retention days excluding the files whose contents match one of the regular expressions defined per line in file $skip_file"
"dig -x ""$1"" | grep PTR | cut -d ' ' -f 2 | grep google | cut -f 5",get domain name with 'google' from address $1
find . -name  \*.java,find all *.java files in the current directory tree
comm -13 <(sort first.txt) <(sort second.txt),"print lines in the sorted contents of ""second.txt"" that are not in the sorted contents of ""first.txt"""
find . -name '*.php' | wc -l,counts number of *.php files in a current folder and subfolders.
chmod 444 .bash_logout .bashrc .profile,"change permissions of "".bash_logout"", "".bashrc"", and "".profile"" to 444"
"find /public/html/cosi -name ""wiki.phtml""","search /public/html/cosi for files whose name is ""wiki.phtml"""
find -name '*.p[lm]',find all *.p[lm] files/directories under current directory
find / -iname '*.txt' | xargs --replace=@ cp @ /tmp/txt,find all *.txt file (case insensitive) in the entire system and copy them to /tmp/txt
find / -name mysql -type d,"search for the directory ""mysql"" in the entire file system"
"full_f=""$(which f)""","save the full path of command ""f"" to variable ""full_f"""
"cat <(crontab -l) <(echo ""1 2 3 4 5 scripty.sh"") | crontab -","add a cron job to existing list, without removing existing ones, ro tun ""scripty.sh"" at 2:01 am, 3rd day of april (4th month), if that day happens to be a friday (5th day of the week starting with sunday=0)."
"find / -name whatever -not -path ""/10_Recommended*"" -not -path ""/export/repo/*""","search files  in the file system excluding those in the paths ""10_recommended"" and ""/export/repo"""
find . -type d -exec ls -ld {} \;,print the list of directories residing in the current directory tree
find $backup_path/*.sql -mtime +5 -exec rm -f {} \;,remove all *.sql files in the $backup_path directory that were last modified more than 5 days ago
"ssh someone@somehost 'cd /export/home/someone && find . -name ""*"" -print| (while read file; do curl -u someone:password ftp://somehost/tmp/ -vT ""$file""; sleep 10; done)'",find all files/directories under /export/home/someone directory in a remote host (somehost) and upload the files/directories to ftp://somehost/tmp/
find /some/dir -type d -exec find {} -type f -delete \;,find all the regular/normal files in all the directories in the /some/dir and delete them
"find . -type f -name ""*.php"" -exec grep --with-filename ""eval(\|exec(\|base64_decode("" {} \;",find suspicious php files
"find . -type f \( -name ""*.pas"" -o -name ""*.dfm"" \) -print0 | xargs --null grep --with-filename --line-number --no-messages --color --ignore-case ""searchtext""","recursively finds all ""*.pas"" and ""*.dfm"" files and prints strings with ""searchtext"" ignoring text distinctions, suppressing error messages, highlighting found patterns and preceding each found string with file name and string number."
kill -9 18581 18582 18583,"send sigkill signal to processes id 18581, 18582, and 18583, killing them instantly."
find . -type f -print0 | xargs -0 /bin/rm,delete all regular files under current directory
find . -type f -print0 | xargs -0 chown username,change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)
"zcat bigfile.z | sed -ne '500,1000 p'","view line 500 to line 1000 in gzipped file ""bigfile.z"""
"screen -list | awk '{print $1}' | grep -q ""$1$""",check if a named screen session already exists
find -type f | xargs -I {} mv {} {}.txt,"append "".txt"" to all filenames in the current directory tree"
cp `find -perm -111 -type f` /usr/local/bin,copy all files which do not have execute permission to another folder
find / -type f -print0 | xargs -0 grep -i pattern,search for the pattern in all the regular/normal files in the entire file system
find . -name \*\:\*,find recursively all files under current directory tree that contain a colon in the filename
"echo ""Hello, world"" | tee /tmp/outfile","write ""hello, world"" to standard output and to ""/tmp/outfile"""
find . -regex '.*myfile[0-9][0-9]?',search the current directory tree for files matching regular expression '.*myfile[0-9][0-9]?'
find . -maxdepth 1 -mindepth 1 -type d,print the list of all subdirectories of the current directory
find -type f -exec grep -Iq . {} \; -and -print,search the current directory recursively for text files containing at least one character
find . -size +5000k -type f,find files in the current directory tree which are larger than 5 mb in size
"TTY=$(tty) WHOLINE=$(who | grep ""${TTY#/dev/}"")","put the output of tty into a variable, then searches the output of ""who"" for tty with ""/dev/"" removed and saves it to ""wholine"""
"find . -type f -name '*.php' -exec wc -l {} \; | egrep ""^\s*1\s""",find all php files under current directory that contain only one line
find . -print0 | xargs -0,perform a white space safe search for all files/directories under current directory
apropos postscript | grep -i png,"searches manual pages which descriptions contain 'postscript', and prints name and description of only ones that contain any-cased 'png' pattern."
find . -maxdepth 1 -type d -exec ls -dlrt {} \; | wc --lines,count all directories in maximum 1 level down the current directory
find dir -not -path '.git' -iname '*.py' -print0 | xargs -0 sed --in-place=.bak 's/[[:space:]]*$//'.,remove trailing white spaces from all *.py files under dir directory (ignoring .git path) and keep backups of the originals
find /somePath -type d -name ‘someNamePrefix*’ -mtime +10 -print | xargs rm -rf ;,"find all the directories starting with the name ""somenameprefix"" which have not been modified in the last 10 days and force delete them"
fname=`basename $f`,"set variable ""fname"" to the basename of path specified in variable ""f"", that is remove everything up to the last slash if present."
find . -exec grep whatIWantToFind {} \;,search for 'whatiwanttofind' in all files under current directory
which gcc,"print the full path of command ""gcc"""
find /var/tmp/stuff -mtime +90 -print0 | xargs -0 /bin/rm,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
"find . -name ""string to be searched"" -exec grep ""text"" ""{}"" \;","finds strings with text ""text"" in all files named ""string to be searched"" recursively in a current folder."
"cd `echo -n ""~""`","go to directory named ""~"" (not home directory)"
"b=`echo ""$a"" | awk '{ print toupper($1) }'`","set variable ""b"" to the first word of ""a"" converted to uppercase."
"find . -type d -exec chmod ug=rwx,o= {} \;",find all directories under current directory and set read-write-execute permission for owner and group and no permission for other for those directories
find . -writable,find writable files in the current directory tree
find /opt -cmin -120,find all the files  in the folder /opt which have been changed in the last 120 minutes
"find . -name ""new*.sh"" -exec rm -f '{}' \+","remove all .sh files in the current directory tree whose names begin with ""new"""
"find . -name ""*.sh""",display all shell scripts in current folder
screen -dr 14313,reattach a session and if necessary detach it first
find $workspace_ts -mindepth 1 -maxdepth 1 -type d -mtime +30 -print,find directories that are directly under $workspace_ts directory (no-subdirectories) and were modified more than 30 days ago
"find . -type f -name ""*.csv""",locate all *.csv regular files under the current directory tree
find -type d -a ! -name '.?*' -o ! -prune,find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names
find . -regex './[0-9].*' -print,find any files in the current directory that begin with a number
diff -rq dir1 dir2 | grep 'Only in dir1/',print summary of files present only in dir1.
sudo cp mymodule.ko /lib/modules/$(uname -r)/kernel/drivers/,"copy loadable kernel module ""mymodule.ko"" to the drivers in modules directory matchig current kernel."
"find . -mtime 7 -name ""*.html"" -print",find *.html files in the current directory tree that were modified 7 days ago
find / -atime -1,find files that were accessed in less than a day ago
find . -newer /bin/sh,find files in the current directory and below that are newer than /bin/sh
"/bin/find -name ""core"" — exec rm {} \;",remove all the core files in the current directory
find / -group staff -print,"find all the files in the entire file system which belong to the group ""staff"""
df | tail -n +2 | tr -s ' ' | cut -d ' ' -f 2 | paste -s -d+ | bc,print total size of file systems in kilobytes.
bzip2 -d /tmp/itunes20140618.tbz,decompresses file.
cat *.txt | sort | sort -u -c,check if content of all top-level *.txt files in the current directory contain only unique lines
"find . -type f \( -name ""*.js"" ! -name ""*-min*"" ! -name ""*console*"" \)",find all files in the current directory excluding those that end with .js or have the words .min or console in their name
find . -lname \*foo.txt,find links to any file that happens to be named `foo.txt'
split --lines=75,split standard input into files with at most 75 lines each
find . -type f | xargs -d '\n' grep string,"search all regular files in the current directory tree for ""string"""
find . -name *.clj | xargs grep -r resources,"find all the files ending with ""clj"" in the current folder and search for a pattern"
ls | xargs rmdir,removes all top-level empty folders within the current folder.
"read -r -p ""Are you sure? [y/N] "" response","read a line from standard input into variable ""response"" ignoring backslash escapes and using the prompt ""are you sure? [y/n] """
nl -s prefix file.txt | cut -c7-,"add ""prefix"" to every non-blank line in ""file.txt"""
"mount -o remount,ro /path/to/chroot/jail/usr/bin","remount ""/path/to/chroot/jail/usr/bin"" as read only"
tree | tail -1,print a count of files and directories in the current directory tree
cat file | xclip,"save the contents of ""file"" in the clipboard"
find /home/user/Desktop -name '*.pdf',list *.pdf files under the /home/user/desktop directory.
find . -empty -exec ls {} \;,list all empty files in the current directory tree
find . -mmin -60 | xargs -r ls -ld,list all files from the current directory tree that were modified less than 60 minutes ago
find . -print0 | tr -cd '\0' | wc -c,count the number of total files and folders under current directory tree
pwd | xsel -i,copy current working directory to clipboard
find . -name '*.rpm',find all *.rpm files/directories under current directory
mv file001abc.txt abc1.txt,"rename ""file001abc.txt"" to ""abc1.txt"""
echo 0a.00.1 usb controller some text device 4dc9 | rev | cut -b1-4 | rev,print last four bytes of string '0a.00.1 usb controller some text device 4dc9'
find . -type f -name some_file_name.xml -exec grep -H PUT_YOUR_STRING_HERE {} \;,"recursively finds file some_file_name.xml file and prints strings with ""put_your_string_here"" preceding each found string with file name."
find -name '.?*' -prune -o \( -type f -print0 \),find all files under current directory excluding hidden directories
find /path/to/files -exec truncate.sh {} \;,execute script 'truncate.sh' on all files in the /path/to/files directory tree
"find -iname ""*.jpg""",display all jpg files in the current folder
find . -exec COMMAND {} +,execute command on all files and directories in the current directory tree
find $HOME -name '*.ogg' -type f -exec du -h '{}' \;,list all *.ogg files under your home directory along with their size
find . -follow -iname '*.htm' -print0 | xargs -i -0 mv '{}' ~/webhome,move all the html files from current folder to another folder and if a symbolic link is found copy the original referenced file and not the link
"alias cdl='cd -- ""$(ls -t | head -n 1)""'","set alias ""cdl"" for command 'cd -- ""$(ls -t | head -n 1)""'"
find /work -name 'memo*' -user ann -print,search for files starting with memo and which belong to the user ann in the folder /work
find master -type d | sort,display all the directories in the folder master-
"find . -iname ""$srch*"" -exec grep ""Processed Files"" {} \; -print| sed -r 'N;s/(.*)\n(.*)/\2 \1/'",search for 'processed files' in all $srch* (case insensitive) files under current directory run the sed script 'n;s/(.*)\n(.*)/\2 \1/' on the output
"mkdir -v ""$@"" | sed 's/mkdir: created directory /jar-jar: yea, weesa gotta /'","make directories ""$@"" verbosely and replace ""mkdir: created directory "" with ""jar-jar: yea, weesa gotta "" in the output"
pstree -p `pgrep pppd`,displays process tree of 'pppd' process.
"other=""$(mktemp --directory)""",creates temporary folder and saves path to it in 'other' variable.
rename -v 's/\.JPG/\.jpeg/' *.JPG,"change all ""jpg"" filename suffixes in current directory to ""jpeg""."
chmod 640 `find ./ -type f -print`,change the permissions of all regular/normal files in the file system
find . -size 6M,find all the files in current directory of size exactly 6mb.
ls /home/dreftymac/*,lists all files in a '/home/dreftymac/' folder and subfolders without recursion.
find . -type f -perm -u=x,find regular files in the current directory tree that have the user executable bit set
brew link --overwrite python,symlinks all of package`s installed files into the homebrew prefix with overwrite.
sed 's/^/./' | rev | cut -d. -f2- | rev | cut -c2-,remove the last file extension from standard input
"echo -e ""ALERT - Shell Access on:' `date` `who` '\n\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`""",print an alert message containing the ip address and information of the user connecting via ssh
cat ips | xargs -n1 ping -c 2,"ping all hosts in file ""ips"" twice"
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs -p rm","find ""*prefs copy"" files in the /mnt/zip directory tree and remove them with prompting"
set | more,"display all environment variables, functions, and aliases, pausing for user interaction after each page of output."
"find ./ -type f -print -exec grep -n -i ""stringYouWannaFind"" {} \;","recursively prints all files in a current folders, and searches ""stringyouwannafind"" in file content ignoring case differences, and preceding found string with its number in file."
find /home/luser -type f -name '*.mpg' -exec rm -f {} \;,remove all .mpg files in the /home/luser directory tree
find . -name Thumbs.db -exec rm {} \;,remove all thumbs.db files from the current directory tree
find ./ -mtime +31 -delete,delete files older than 31 days
rsync -rvz --chmod=ugo=rwX -e ssh source destination,"archive ""source"" to ""destination"" via ssh with ""rwx"" permissions"
find . -printf '%p ',display all file names in current folder
find / -path /usr/lib/important/*/file.txt,find files/directories named 'file.txt' in the path '/usr/lib/important/'
top -p $(ps aux | awk '/ProgramName/ && ! /awk/ { print $2; exit; }'),use 'top' to monitor the newest instance of programname.
find /home/family/Music -name '*.m4a' -print0 | xargs -0 -i ffmpeg -i {} -acodec libvorbis -aq 6 -vn -ac 2 {}.ogg,find all *.m4a files under /home/family/music directory and convert them to ogg
"find . -name ""*.csv"" -exec diff {} /some/other/path/{} "";"" -print",compare *.csv files in the current directory tree with their analogs stored in /some/other/path/
find . -type f -mtime -7 -print -exec cat {} \; | tar cf - | gzip -9,create compressed archive of all the files in the current directory tree that have been modified in the last 7 days
tail -f access.log | stdbuf -oL cut -d ' ' -f1 | uniq,immediately display unique entries from access.log
"echo -e ""1\n2\n3"" | sed 's/.*$/&<br\/>/'","append ""<br/>"" to the end of each line in ""1\n2\n3"""
sort -m <(zcat $part0 | sort) <(zcat $part1 | sort) ...,"merge content of decompressed files ""$part0"", ""$part1"", and so on"
find . -type f |xargs ls -lS |head -20,list first 20 files under current directory
"find ${FOLDER} -type f ! -name \"".*\"" -mtime -${RETENTION}","display all the regular files in the folder ""$(folder)"" which are modified in the last $(retention)*24 hours and excluding hidden files"
"basename -a ""${alpha[@]}""","for each item in array ""alpha"", display the basename, that is the part following the last slash, or the whole item if no slash is present."
find / -user 999 -exec chown NEWUSER {} \;,change the owner of all the files in the file system which belong to the user with the uid 999
find . -name '*-GHBAG-*' -exec bash -c 'echo mv $0 ${0/GHBAG/stream-agg}' {} \;,"search for all the files in the current folder which have the word ""-ghbag-"" and display the move command for replacing the word ""ghbag"" in the file names to ""stream-agg"""
env | grep NAME,"search all variables and their values for ""name"""
find data/ -name filepattern-*2009* -exec tar uf 2009.tar {} ;,archive all filepattern-*2009* files/directories under data/ into 2009.tar
find /etc -newer /tmp/foo,find all files in the folder /etc which have been modified after /tmp/foo
find ~jsmith -exec grep LOG '{}' /dev/null \; -print,"search for ""log"" in jsmith's home directory tree"
"find /path -name 'pattern' -exec bash -c 'somebashstatement ""$1""' -- {} \;","run somebashstatement with the filename as argument, for files recursively in /path that match 'pattern'"
tar cvf - `find . -mtime -1 -type f -print` > $archive.tar,create a tar archive of all regular files modified in the last 24 hours
"find . -type f -name ""*.php"" -exec php -l {} \;",check the syntax of all php files under the current directory
"echo "" ${arr[@]/%/$'\n'}"" | sed 's/^ //' | column","format bash array ""${arr}"" in columns"
yes Yes | ./ittp-update.sh,"continuously send ""yes"" plus newline to the program ""./ittp-update.sh"""
find /home/madhu/release/workspace -type d -name '.git',find '.git' directories in directory tree /home/madhu/release/workspace
find . -type f -print0 |   xargs -0 perl -i.bak -pe 's/subdomainA\.example\.com/subdomainB.example.com/g',"replace all occurrence of ""subdomaina.example.com"" with ""subdomainb.example.com"" in all files under the current directory and below"
find . -name foo.txt 1> tmpfile && mv `cat tmpfile` path/to/some/dir && rm tmpfile,"find all the instances of the file ""foo.txt"" in the current folder and move them to another folder"
find /home/user/demo -type f -perm 777 -print,find all regular files with permissions 777 under and below /home/user/demo/
watch -n1 dropbox-cli status,"execute ""dropbox-cli status"" every second"
find /nas -type d,find all directories under '/nas' directory tree
find /tmp -name core -type f -print0 | xargs -0 /bin/rm -i,remove all the core files in the temp file after user confirmation
"echo $var | awk '{gsub(/^ +| +$/,"""")}1'",display variable 'var' without leading and trailing whitespace.
STAMP=`date -r file_name`,save the last modified time of file 'file_name' to variable 'stamp'
rsync -rvv /path/to/data/myappdata/*.txt user@host:/remote/path/to/data/myappdata/,"recursively copy ""/path/to/data/myappdata/*.txt"" to ""user@host:/remote/path/to/data/myappdata/"""
find . -type f | sed -e 's/.*\.//' | sed -e 's/.*\///' | sort -u,print a sorted list of the extensions of the regular files from the current directory tree
"find . -name ""needle.txt""","locate all files ""needle.txt"""
cp -vi /boot/config-`uname -r` .config,"copies file '/boot/config-`uname -r`' to the  '.config', printing info message and prompting before owerwriting files."
find ~ -type f -mtime 0 -iname '*.mp3',find all mp3 files in the home directory tree that were modified in the last 24 hours
find . -type f -mtime +3,find all regular files that reside in the current directory tree and were last modified more than 3 days ago
kill -s WINCH $$,"send sigwinch process to current shell, causing it to update the lines and columns variables which describe the size of the screen/window in characters."
find . -name \*.php -type f -print0 | xargs -0 grep -Hn '$test',search for files only that end with .php and look for the string $test inside those files
"find . — name ""[A‑Z]*"" — print",find all files starting with capital letter in the current folder
find . -name .DS_Store -exec git rm --ignore-unmatch --cached {} +,remove .ds_store from the repository you happen to stage by mistake
"find / \( -path /export -o -path ""/*Recommended*"" \) -prune -o \   \( -name iceweasel -o -name thunderbird -type f \) -print 2>/dev/null",search for the regular/normal files iceweasel or thunderbird in the entire file system and exclude search in the paths /export and directories having the word recommeded in their name
find . -type f | wc -l,count the number of regular files in the current directory tree
find . -type f -exec test -x {} \; -print,find executable regular files in the current directory tree
"find . -name '*.js' -not \( -path ""./dir1"" -o -path ""./dir2/*"" -o -path ""./dir3/*""\)",find all js files which path neither ./dir1 nor ./dir2 nor  ./dir3
find /usr/src -name CVS -prune -o -mindepth 7 -print,find files and directories that are at least seven levels of nesting in the directory /usr/src
"find . -type f -iname \*.mov -printf '%h\n' | sort | uniq | xargs -n 1 -d '\n' -I '{}' mkdir -vp ""/TARGET_FOLDER_ROOT/{}""","make directories in ""/target_folder_root/"" for each "".mov"" file in the current directory tree"
sort file1 file2 | uniq -u,"print each line that is found only once in ""file1"" and ""file2"" combined"
find -L /target -type l,find all the links in the current folder and following it to the pointed path
sudo find /path/to/Dir -type d -print0 | xargs -0 sudo chmod 755,find all directories under /path/to/dir and set their permission to 755
mkdir a b c d e,"make directories ""a"", ""b"", ""c"", ""d"", and ""e"""
"find . -type f | paste -d, -s",print all files in the current directory tree as a comma separated list
"ssh user@server ""${SSH_COMMAND}""",ssh into user@server and run command ${ssh_command}
"su - joe -c ""/path/to/my_daemon 3>&- & echo \$! 1>&3"" 3>/tmp/su.joe.$$","run command ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$"" as user joe and redirect the output to file /tmp/su.joe.$$"
( find ./ -name '*.php' -print0 | xargs -0 cat ) | wc -l,finds total lines count of all *.php files in a current folder and subfolders.
"read -p ""Please Enter a Message: `echo $'\n> '`"" message","read a line from standard input into variable ""message"" with prompt ""please enter a message: "" followed by a newline"
find -newer /etc/passwd,find all files which  are accessed after modifying /etc/passwd files.
ls -ldt $(find .),"recursively lists all files in a current folder in long format, sorting by modification time."
"find . -name test -prune -o -regex "".*/my.*p.$""",search all the files in the current folder using regex excluding those that are present in the folder test
"find -L . -type f -perm -u=x,g=x  \! -perm -o=x",find regular files in the current directory tree that have executable bits set for the user and group but not for the other
"shopt ""$NGV"" nullglob",handles shell option 'nullglob' according with flags stored in $ngv variable.
"fullpath=`readlink -f ""$path""`","save the absolute path of ""$path"" to variable ""fullpath"""
find /data1/realtime -mmin -60 -type d,find all directories in the /data1/realtime directory tree that were modified within the last 60 minutes
"find /home -type f -printf ""%i@%p\n""",get a list of all files in the /home directory tree and their coressponding inode numbers
find . -name '*.php' -o -name '*.xml' -o -name '*.phtml',"display all php,xml and phtml files in current folder"
echo $(readlink -f /dev/disk/by-uuid/$1) is not mounted,"print the full real path of ""/dev/disk/by-uuid/$1"" followed by ""is not mounted"""
df . -B MB | tail -1 | awk {'print $4'} | grep  .[0-9]*,print amount of space available on the file system containing path to the current working directory in megabytes.
"find . -name ""*.txt"" -exec ls -la {} \;",display long listing of all the text files in the current folder
shopt -s -o nounset,sets shell option 'nounset'.
echo gzip. $( gzip | wc -c ),compress from standard input and print the byte count preceded with 'gzip.'
find ~/ -name '*.txt' -print0 | xargs -0 wc -w | awk 'END { print $1/(NR-1) }',compute the mean average of the word count of *.txt files in the home directory
chmod 777 /usr/bin/wget,"change permissions of ""/usr/bin/wget"" to 777"
diff -bur folder1/ folder2/,"print differences between files in directories folder1 and folder2 recursively, with unified context, ignoring changes in the amount of white space"
nohup xterm -e java -jar start.jar &,"run the java archive 'start.jar' in a xterm window, immune to sighup (hangup signals) sent to it. the xterm is sent to background, so control returns immediately to the prompt on the original terminal screen/window."
find /PROD -maxdepth 1 -type d,"display all directories in the folder ""prod"" and do not search in the sub directories"
find . -name myfile |& grep -v 'Permission denied',search the system for the file 'myfile' ignoring permission denied errors
mv ~/Linux/Old/^Tux.png ~/Linux/New/,"move all files not matching ""tux.png"" in ""~/linux/old"" to ""~/linux/new/"" using zsh with ""extended_glob"""
"find ""$GIVEN_DIR"" -type d -mindepth 1 -print0",find all directories under minimum 1 level down the  $given_dir directory with null character as the delimiter
fg `jobs | iselect -a | grep -o [0-9]*`,selects a job from list and get it back to the foreground (iselect package is required).
seq 1 10 | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )' | perl -ne 'print if ( !eof  )',"print all lines of ""seq 1 10"" except the last 3"
find . -size -24000c,find files in the current directory tree whose size is less than 24000 bytes
"find . -name ""*.mp3"" -exec mv {} ""/Users/sir/Music//iTunes/iTunes Media/Automatically Add to iTunes.localized/"" \;",find all the mp3 files in the current folder and move them to another folder
"find . -depth -name ""blabla*"" -type f | xargs rm -f",find blabla* files under current directory
"find -name ""*.htm"" | while read file; do sed ""s|<title>sometext</title>|<title>${file##*/}</title>|g"" -i $file; done",display all html files in current folder and replace some pattern in all these files
"find . -type f -exec grep ""text"" {} /dev/null \;",search for 'text' in all regular files under current directory tree
"find . -name ""*.htm"" -exec mv '{}' '{}l' \;","renames all "".htm"" files to "".html"" files"
head -c 1000 /dev/zero | tr '\0' '*',print 1000 astarisk ('*')
"find /raid -type d -name "".local_sd_customize"" -print",find all the directories in the folder /raid with the extension local_sd_customize.
screen -x title,run a shell in a named screen session
find . -size +10k -exec ls -lh {} \+,display a long listing of all the files in the current folder which are bigger than 10kb
find . -xdev -printf ‘%s %p\n’ |sort -nr|head -20,display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder
sudo ls -hal /root/ | sudo dd of=/root/test.out,"prints long listing of content in a root folder, including hidden files, with human-readable sizes, and stores output to '/root/test.out' file."
CAT=`which cat`,"save full path of command ""cat"" to variable ""cat"""
chown amzadm.root -R /usr/lib/python2.6/site-packages/awscli/,"recursively change owner to ""amzadm"" and group to ""root"" of all files in ""/usr/lib/python2.6/site-packages/awscli/"""
find /home/kibab -name file.ext -exec echo . ';',find all file.ext files/directories under /home/kibab directory and print . for each of them
"find /home/musicuser/Music/ -type f  -iname ""*$1*"" -iname ""*$2*"" -exec echo {} \;",list all files that matches both the case insensitive patterns *$1* and *$2* under /home/musicuser/music/ directory
find /path/subfolder -maxdepth 1 -type f -name '*' -exec mv -n {} /path \;,"move all files in ""/path/subfolder"" to ""/path"" without clobbering any destination files"
find / -name ssh|grep bin|xargs dirname,finds all folders that contain 'ssh' file and have 'bin' in path.
"find . -type f -iname ""*.txt"" -print0 | xargs -0 grep ""needle""","check all .txt files whose names may contain spaces whether they contain ""needle"""
finger | sort -u,"sort and remove duplicate lines in the output of ""finger"""
find /home/username/public_html/themes -type f -exec chmod 640 {} +,find all files under /home/username/public_html/themes and set their permission to 640
find /Users/Me/Desktop -user popo -perm 777,"display all the files in the folder ""/users/me/desktop"" which belong to the user ""popo"" and which have the permission 777"
"zcat ""$line"" | head -n5","print the first 5 decompressed lines of compressed file ""$line"""
zcat tarball.tar.gz | tar x,"unzip and untar ""tarball.tar.gz"""
absolute_path=$(readlink -m /home/nohsib/dvc/../bop),"save absolute path of ""/home/nohsib/dvc/../bop"" in variable ""absolute_path"""
chmod 644 `find /home/my/special/folder -type f`,set 644 permission to all regular files under /home/my/special/folder directory
"bind -m vi-insert '""{"" ""\C-v{}\ei""'","when using vi-insert keymap bind command ""\c-v{}\ei"" to key ""{"""
yes no | <command>,"always answer ""no"" to any prompt from ""<command>"""
"find . -ls -name ""*.ksh""","list all the "".ksh"" files in the current directory"
"find bla -name ""*.so""",search the bla directory recursively for *.so files
find / -maxdepth 1 -xdev -type f|xargs grep -l 'string'| xargs perl -pi -e 's/.//g',delete all contents form the files that contain the regex 'string' in maximum 1 level down the / directory excluding other partitions
ls -1 /tmp/hashmap.$1,lists '/tmp/hashmap.$1' file or folder '/tmp/hashmap.$1' content one file per line.
find . -type f -execdir echo '{}' ';',find all files under current directory and print only the filenames (not paths)
output=$(echo $input | fold -w4 | tac | tr -d \\n),reverse the text in $input by taking each 4 characters as each units and save the result in variable 'output'
find `pwd` -mtime -1 -type f -print,list all files under the current working directory last modified less than a day ago
find . -type d | tac | xargs rmdir 2>/dev/null,remove all empty sub-directories under current directory
sort -b -n -k2.4 table,"numerically sort file ""table"" by the fourth character of the second field, ignoring leading spaces"
"find /dir1 -type f -printf ""%f\n""",find all files in /dir1 and print only the filenames (not paths)
find /tmp/test/* -mtime -1,find all files/directories which have been modified within the last day in the drectories/files taken from the glob pattern '/tmp/test/*'
lsof -n -i:3000 | grep LISTEN | awk '{ print $2 }' | uniq | xargs kill -9,immediately kill all processes listening on tcp port 3000.
"find . -type f -name ""*.keep.$1"" -print0 | while IFS= read -r -d '' f; do mv -- ""$f"" ""${f%.keep.$1}""; done","find all files in the current directory tree whose names end with the suffix "".keep.$1"", where $1 is the first command line argument, and remove that suffix"
ssh -fNT -L8888:proxyhost:8888 -R22222:localhost:22 officefirewall,"set up ssh connection forwarding in the background with no terminal or command execution from localhost port 8888 to ""proxyhost"" port 8888 and a reverse connection from ""officefirewall"" port 22222 to ""localhost"" port 22"
"find . -iname ""*.txt"" -exec du -b {} +",print the file sizes along with their paths for all *.txt (case insensitive) files/directories under current directory tree
find . -type f -exec grep -o aaa {} \; | wc -l,search for aaa in all files under current directory and count the number of matches
find /home -iname tecmint.txt,find all the files whose name is tecmint.txt and contains both capital and small letters in /home directory
find / \( -name 10_Recommended* -o -name share \) -prune -o -type f \( -name firefox -0 -name thunderbird -0 -name seamonkey \) -print 2>/dev/null,search for the regular/normal file firefox or thunderbird or seamonkey in the entire file system excluding search in the directories share and those starting with 10_recommended and discard all the errors
tree -fi,print the full path prefix for all files in the current directory tree as a list
find . -name abc.xxx -exec rm {} \;,"remove all files in the current directory tree that have the name ""abc.xxx"""
find . -type d -name .svn -print0|xargs -0 rm -rf,delete all .svn directories under current directory
"tmux ""$tmux_command \; attach""","executes tmux commands that are stored in the '$tmux_command' variable, and then attaches to the tmux session."
"find . -name ""*.txt"" -print -exec awk '{if($9!=""""&&n<11){print;n++}}' {} \;",run an awk program on every txt file found in the current directory tree
"find /path/to/dir -name ""test"" -type d -delete","remove all directories called ""test"" from the /path/to/dir directory tree"
"find . — name ""[a‑z][a‑z][0—9][0—9].txt"" — print",find all the files in the current folder whose name starts with 2 alphabets and ends with 2 digits.
find . -inum [inode-number] -exec rm -i {} \;,delete files with inode number specified by [inode-number] under current directory
find . -xdev -print0,find all files and directories under current directory without crossing over to other partitions
find . -mtime -7 \( '*.jpg' -o -name '*.png' \),all .jpg or .png images modified in the past week
top –p $PID,use 'top' to monitor one process.
find / -type d -name 'httpdocs',find all directories by the name `httpdocs' on the system
find -mtime 0,find all files under current directory that were modified in the last 24 hours
find . -name not\* -print0 | xargs -0 rm,"remove all files in and below the current directory whose names begin with ""not"""
"find . -type d -mtime 14 | sed -e 's,^\./,,' > deploy.txt",save the list of directories modified a fortnight ago to `deploy.txt' removing the leading ./ from the file names
find . -name '*.txt' -print0|xargs -0 -n 1 echo,list all *.txt files/directories under current directory ensuring white space safety
TESTVAR=bbb env | fgrep TESTVAR,"add variable testvar with value ""bbb"" to a temporary environment, and search for testvar in all variables and their values in the resulting environment."
tmpdir=$(mktemp -d /tmp/tardir-XXXXXX),creates temporary folder like '/tmp/tardir-xxxxxx' with 6-letter suffix and saves its path in 'tmpdir' variable.
find / -user lal -exec chown ravi {} \;,find all files which belong to user lal and change their ownership to ravi
find /usr/share \! -type d wc -l,files all files which expect directories and display count of them
"cal 09 2009 | awk 'BEGIN{day=""9""}; NR==4 {col=index($0,day); print col }'","print position number of day '9' in fourth line of calendar output for september, 2009."
"awk '{printf ""%s "", $0}' inputfile",display inputfile all on one line (replace newlines by spaces)
find image-folder/ -type f,display all regular files in the folder image-folder
find /usr -name '*.sh',display all the .sh scripts in the folder /usr
find . -mtime 0 -not \( -name '*.swp' -o -regex '\./es.*' -o -regex '\./en.*' \),search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and paths ./es* and ./en*
"ssh-keygen -f ~/.ssh/id_rsa -P """"",remove the passphrase from ~/.ssh/id_rsa.
"finger | awk 'NR>1{print $2,$3}'",print each logged in user's full name
find /mydir1 /mydir2 -size +2000 -atime +30 -print,report all files in /mydir1 and /mydir2 larger than 2000 blocks and accessed in over 30 days
find -iname september,find all the files with the name september ( case insensitive )
find . -perm /g+s,find all the sgid files in the current directory tree
find /etc -type f -print | xargs grep -il old1\.old2\.co\.com,"list the files in the /etc directory tree containing text ""old1.old2.co.com"""
find . -type l,find all symlinks under current directory
"date -d ""-1 days"" +""%a %d/%m/%Y""","print yesterday's date information in ""%a %d/%m/%y"" format"
scp -p /home/reportuser/dailyReport.doc root@localhost:/root/dailyReports/20150105/,attempt to connect as root to localhost and copy /home/reportuser/dailyreport.doc to directory /root/dailyreports/20150105/ - this will normally fail because ssh won't accept root connections by default.
dig @8.8.8.8 domain. a,print a record for domain 'domain.' from 8.8.8.8 nameserver
jobs -p | xargs kill -9,kill all processes which were executed in background by the current shell.
find . -name *conf* -exec grep -Hni 'matching_text' {} \; > matching_text.conf.list,"find all *conf* files recursively under current directory, search for any lines matching the string 'matching_text' in those files and redirect the output to matching_text.conf.list"
find . -type f | xargs ls,list all files under current directory
b=`w|cut -d' ' -f1`;,saves list of logged in users in system together with 'user' header in the 'b' variable.
"find /root -type f -size +500M -printf ""The %p file is greater than 500MB\n""",display all the regular/normal files in the /root folder which are bigger than 500mb
find dir -name image\*.jpg -exec /bin/ksh script.ksh {} \;,apply script 'script.ksh' to all files matching pattern 'image\*.jpg' under the directory tree 'dir'
rm -f *.pdf,removes all top-level *.pdf files in a current folder.
find ./ -type d -print,print the list of all directories under the current directory and below
find path/to/folder -type f -print0  | sort -z | xargs -0 sha1sum; find path/to/folder \( -type f -o -type d \) -print0 | sort -z | xargs -0 stat -c '%n %a' | sha1sum,"calculate the sha1 sum for the contents of the path/to/folder directory tree, including permissions"
gzip -l archive.tar.gz,"list the files in ""archive.tar.gz"""
find / -name .profile -print,display all instances of the .profile file in the entire file system
source <(curl -s http://mywebsite.com/myscript.txt),"fetch a script from the web, and interpret it in the current shell."
comm -23 file1 file2,"print unique lines in sorted ""file1"" compared to sorted file ""file2"""
cal -h | cut -c 4-17,prints all business days in a current month.
"find /home -size +5000000b -name ""error_log"" -exec rm -rf {} \;","find all the ""error_log"" files in the folder ""/home"" which are bigger than 5mb and force delete them"
"rsync --iconv=UTF-8,UTF-8-MAC /home/username/path/on/server/ 'username@your.ip.address.here:/Users/username/path/on/machine/'","copy ""/home/username/path/on/server/"" to ""username@your.ip.address.here:/users/username/path/on/machine/"" and convert encoding from utf-8 to utf-8-mac"
find . -name “core” -exec rm -f {} \;,find the core files and  remove them
cat,receive input and print it to terminal
shopt -s nullglob,enables 'nullglob' shell option.
"find ! -path ""dir1"" ! -path ""dir2"" -iname ""*.mp3""",search for mp3 files in the current folder and subfolders exclude dir1 and dir2
"find . -name ""*.c"" -print0 | xargs -0 wc -l","display the number of lines in all the "".c"" files in the current folder"
cp -r dir1/ ~/Pictures/,make a copy of the entire contents of dir1 in the pictures directory located in the user's home directory.
"diff -q /dir1 /dir2 | grep /dir1 | grep -E ""^Only in*"" | sed -n 's/[^:]*: //p'",print list of files that are only in directory /dir1 and not their sub directories and only their file names.
find . -name '*.c' | xargs grep 'stdlib.h',find all the .c files in the current directory tree that contain the string ‘stdlib.h’
finger $USER |head -n1 |cut -d : -f3,"print the full name of ""$user"""
find DIR_NAME -type f | wc -l,counts all files in a dir_name folder and subfolders.
find . -maxdepth 1 -type f,find all the regular/normal files in the current folder and do not search in the sub directories
find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete,"find all normal/regular files in current folder which end with ""~"" or which begin and end with ""#"" and and and delete them"
find . -type f -inum 31467125 -exec /bin/mv {} new_name.html \;,rename file with inode number 31467125 to new_name.html
find -name *.sh,"display all the "".sh"" files in the current folder"
"scp -rp ""DAILY_TEST_FOLDER"" ""root@${IPADDRESS}:/home/root/""",attempt to connect as root via ssh to host whose ip address or hostname is specified by environment variable ipaddress - this will normally fail because ssh servers normally don't accept root logins.
find . -type f -size +10k,find all files under current directory that are larger than 10kb in size
find . \( -not -path './dir1/*' -and -not -path './dir2/*' -or -path './dir1/subdir1/*' \) -type f,find all regular files under current directory tree excluding files from './dir1' (except './dir1/subdir1/) and './dir2' directories
matlab -nodisplay,start matlab without the desktop
HOSTZ=$( hostname | cut -d. -f1 ),"save the first ""."" separated field of the system host name to variable ""hostz"""
find . ! — type d -print,display all files  expect directories in the current folder
unset -f ls /bin/ls,unsets shell functions 'ls' and '/bin/ls'.
find . -type f -name '*-*',find all *-* files under current directory
"find -name ""*.htm"" -print",display all html files  in  current folder
"awk '{print $NF}' file.txt | paste -sd, | sed 's/,/, /g'","print the last white space separated field of every line in ""file.txt"" as a "", "" separated list"
find /home/pankaj -maxdepth 1 -cmin -5 -type f,search the /home/pankaj directory for regular files whose status has changed within the last 5 minutes
find . -type d -name aa -prune -o -print,display all the directories in the current folder excluding those that are present in the aa directory tree
"find /path/to/folder -path ""*/ignored_directory"" -prune -o -name fileName.txt -print",search for files/directories named 'filename.txt' under '/path/to/folder' directory tree without traversing into directories that contain the string 'ignored_directory' in their paths
head -n 1 filename | od -c,"print the first line of ""filename"" as a hex dump of characters"
find /home/user/Maildir/.SPAM/cur -type f | xargs rm,remove all files under /home/user/maildir/.spam/cur
"find . -type d -name .git -exec sh -c ""cd \""{}\""/../ && pwd && git pull"" \;",run 'git pull' in every git repository in the current directory
find / -name httpd.conf -newer /etc/apache-perl/httpd.conf,find a more recent version of httpd.conf file than /etc/apache-perl/httpd.conf in entire file system
pstree -p [pid ...],prints process list with id numbers of a process having id 'pid'.
find / -perm /a+w,"find all files/directories in entire file system that have  ""write"" bit set for either the owner, the group, or others"
echo -n hi | md5,find md5sum of string 'hi'
gzip -d file.gz,decompress 'file.gz'
"ps aux | awk '{print $11}' | grep -x -e ""/.*"" | xargs -I file dirname ""file""",finds binaries names in a list of running processes and prints containing folder of each binary.
find . -type d,find all directories starting from the current directory
mkdir -p $(echo -e $1 |sed $'s/\r//'),"make directories and parent directories as needed of ""$1"" with ""\r"" removed"
find / -name grub.conf,find grub.conf files in entire file system
"find . -type f -user tommye -iname ""*.zip""",find all .zip files starting from the current directory which are owned by user tommye
"find . -name ""*.sh"" -print0 | xargs -0 -I {} mv {} ~/back.scripts",find all .sh files in or below the current directory and move them to folder ~/back.scripts
cat /dev/urandom | tr -dc 'a-zA-Z0-9',"print only alphanumeric values from ""/dev/urandom"""
"find ""your/dir"" -prune -empty",print your/dir if it's empty
diff -Naur dir1/ dir2/,"display differences between directories dir1 and dir2, treating absent files as empty."
find _CACHE_*,find all files/directories under _cache_* directories
"find . -name ""*js"" -o -name ""*rb""","search the current directory tree for files whose names end in ""rb"" or ""js"""
"find . | egrep -v ""\.tex|\.bib"" | xargs rm","remove all files from the current directory tree whose names do not end with "".tex"" or "".bib"""
find . -inum 968746 -exec ls -l {} \;,find files associated with an inode
groups $(who | cut -d' ' -f 1),print groups of all users logged in
"find ""Test Folder"" -type d -name .dummy -exec rm -rf \""{}\"" \;","search for the folder .dummy and remove it from the folder ""test folder"""
find /path -perm 777,"find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path"
find . -name 'kt[0-9] ',"search for the files in the current folder which begin with the word ""kt"" followed by a digit"
sudo mv /usr/bin/php /usr/bin/~php,"rename ""/usr/bin/php"" to ""/usr/bin/~php"""
find /etc -name mysql -type d,"search for the directory ""mysql"" in the /etc folder"
"find . -name ""sample*"" | parallel --dry-run program {}-out {}",find all sample* files/directories under current directory and print 'program {}-out {}' where {} will expand to file paths
"echo -e ""\n/usr/local/boost_1_54_0/stage/lib"" | sudo tee -a /etc/ld.so.conf","write ""\n/usr/local/boost_1_54_0/stage/lib"" to standard output and append to ""/etc/ld.so.conf"""
"bzip2 -dc input1.vcf.bz2 input2.vcf.bz2 | awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 "";"" array[$1,$2] }'",reads content of bzip2 compressed files and processes it with awk utility.
ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}',gets ip address of 'eth0' network interface.
"find . -name ""*.jar"" -print -exec jar -tf {} \; | awk '{if($1~/jar$/)jar=$1;else if($1~/message_track/)arr[jar]=$1;}END{for(i in arr){print i "" contains "" arr[i]}}'",find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file
"ln -s ""/cygdrive/c/Program Files"" /cygdrive/c/ProgramFiles","create a symbolic link with absolute path ""/cygdrive/c/program files"" to file ""/cygdrive/c/programfiles"""
find . -name \*.xml.bz2,find all *.xml.bz2 files under current directory
"find . -name ""*.txt"" -exec python myscript.py {} +",find all *.txt files/directories under current directory and execute the python script myscript.py with all their paths as arguments to the script
find . -print | xargs ls -gilds,list files and directories recursively
find -mtime +0,find all files under current directory that were modified in the last 24 hours and also include the files that were modified in less than 1 day ago
mkdir .hiddendir,"make hidden directory "".hiddendir"""
"tar -cvf file.tar `find var/log/ -iname ""anaconda.*""`",search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (somefile.tar) of all the files found
echo $PATH | tr ':' '\n' | xargs -I {} find {} -maxdepth 1 -type f -perm '++x',list all available commands in mac os
finger `whoami`,lookup information of the current user
"echo -e ""ONBOOT=\""YES\""\nIPADDR=10.42.84.168\nPREFIX=24"" | sudo tee -a /etc/sysconfig/network-scripts/ifcfg-eth4","print multiline text ""onboot=\""yes\""\nipaddr=10.42.84.168\nprefix=24"" to the terminal, replacing '\n' with newline symbol, and append that text to file /etc/sysconfig/network-scripts/ifcfg-eth4 as root user."
find . -maxdepth 1 -empty,list all empty files under the current directory
find / ! -newer /tmp/timestamp -exec touch {} \;,update timestamps of all files in entire filesystem which are not newer than /tmp/timestamp
find /home/ -maxdepth 1 -print | sudo cpio -pamVd /newhome,"copy all files and directories in ""/home/"" to ""/newhome"" preserving directory hierarchy and modification time"
"find /home -type f -name ""*.ext"" -exec sed -i -e 's/^M$//' {} \;","remove the ""^m"" characters from all *.ext files under /home directory"
"echo ""on"" | tee /sys/bus/usb/devices/usb*/power/level","print ""on"" to standard output and to files matching ""/sys/bus/usb/devices/usb*/power/level"""
"chown $FUID:$FGID ""$FILE2""","change owner to ""$fuid"" and group to ""$fgid"" of ""$file2"""
{ echo foo; cat bar; } | tee bar > /dev/null,"prepend ""foo"" to the file ""bar"""
cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1,print the number of 'processors' (both physical and virtual/hypethereading cores) less 1.
scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/,"recursively copy /path/to/foo on host ""your.server.example.com"" to local directory ""/home/user/desktop"", connecting as ssh username ""user""."
"chgrp ""${USER}"" myprogram",changes group ownership of 'myprogram' to ${user} (the current user)
"find /home/sdt5z/tmp -name ""accepted_hits.bam""","search the /home/sdt5z/tmp directory tree for files named ""accepted_hits.bam"""
"find ""$some_dir"" -prune -empty -type d | read && echo empty || echo ""not empty""",check if directory $some_dir is empty
kill -20 $PID; kill -18 $PID,"from another terminal, detach process $pid from its terminal and run it in the background."
"find ~ -name ""*.txt"" -print",find all *.txt files/directories under your home directory
set,list all environment variables
screen -xr 14313,attach to a not detached screen session. (multi display mode).
"find -name ""*.xml"" -exec sed -s --in-place=.bak -e 's/firstWord/newFirstWord/g;s/secondWord/newSecondWord/g;s/thirdWord/newThirdWord/g' {} \;","replace ""firstword"" with ""newfirstword"", ""secondword"" with ""newsecondword"", ""thirdword"" with ""newthirdword"" in all xml files in the current directory tree"
"find . -type f -regex "".+-[0-9]+x[0-9]+\.jpg""","search the current directory tree for regular files whose names match regular expression "".+-[0-9]+x[0-9]+\.jpg"""
"find ""$ORIG_DIR"" -name ""*"" -type d -o -name ""*"" -type f","display all normal/regular files or directories in the folder ""$orig_dir"""
"find ./ | grep ""sub""","find files in the current directory tree whose pathnames contain ""sub"""
"su -l $USR -s /bin/bash -c ""exec > >( logger -t $PRG ) 2>&1 ; cd $WKD; { $BIN $ARG & }; echo \$! > $PID ""","run command ""exec > >( logger -t $prg ) 2>&1 ; cd $wkd; { $bin $arg & }; echo \$! > $pid "" as user $usr"
listing=$(ls -l $(cat filenames.txt)),save long listing of all files listed in file 'filenames.txt' to 'listing' variable
split --lines=30000000 --numeric-suffixes --suffix-length=2 t.txt t,"split ""t.txt"" into files with at most 30000000 lines each and use a prefix ""t"" and numeric suffixes of length 2"
top -b -n1 -c,"display process information (batch mode, display once) with full command lines."
find -L,find all files/directories under current directory following symlinks if needed
"ifconfig eth0 | awk '/inet addr/{sub(/[^0-9]*/,""""); print $1}'",gets ip address of 'eth0' network interface.
me=$(readlink --canonicalize --no-newline $BASH_SOURCE),"save the canonical filename of ""$bash_source"" in variable ""me"""
find /dir/to/search -path '*/.*' -ls,"display list of all the hidden directories in the directory ""/dir/to/search/"""
"find lpi104-6 research/lpi104-6 -lname ""*file1""","find symbolic links in lpi104-6 and research/lpi104-6 to files whose pathnames end in ""file1"""
"nohup php -r 'while (true) { echo ""a"";}' &","use the php interpreter to output an endless stream of ""a"" characters to ""nohup.out"" in the current directory, or in the home directory if that is not possible. the php process will not receive or respond to sighup (signal 1) which are sent to it."
find . -mmin +5 -mmin -10,find files modified between 6 and 9 minutes ago
find /usr -maxdepth 1 -print,display all files in the folder /usr and its sub directory(do not search beyond the sub directory)
find /usr/share/man/ -regex .*/grep*,search for all the files in man pages and return the manual page for grep
"find . -type f -newermt ""$date_time""",find files under current directory that are newer than $date_time in regards of modification time
"find . -regextype sed -regex "".*/[a-f0-9\-]\{36\}\.jpg""","find all regex  "".*/[a-f0-9\-]\{36\}\.jpg"" files"
find . -inum $inum -exec rm {} \;,delete all files with indoe number $inum under current directory tree
"curl ""url"" | tac | tac | grep -qs foo",prevents curl from returning error (23) failed writing body when grepping for foo
find -regextype posix-egrep -regex '.*(php|js)$',find all files that have either a .php or a .js extension
"find | xargs -I {} bash -c '(([[ -f ""{}"" ]] && grep -l ""my key phrase"" ""{}"") || ([[ ""{}"" =~ ""my key phrase"" ]] && echo {}))'",list the files matching 'my key phrase' either in their names or contents
rsync -a --include='*/' --exclude='*' source/ destination/,"copy all directories recursively from ""source/"" to ""destination/"" excluding all files"
ab=`ps -ef | grep -v grep | grep -wc processname`,display an amount of processes running with a certain name
sort -u FILE,"sort lines in ""file"" to standard output preserving only unique lines"
find . \( -name . -o -prune \),"print the list of files and directories of the current directory including ""."""
find -name foo_bar,"find all files named ""foo_bar"" in the current directory recursively"
"mkdir -p -- ""$(dirname -- ""$f"")""","creates full path with parents, that matches to folder path extracted from $f variable."
local old_nullglob=$(shopt -p nullglob),saves state of shell option 'nullglob' in an 'old_nullglob' variable.
"find ./ -type f -name *"".html"" | xargs sed -i ""s/php/html/g""","find all files in the current directory tree with extension .html and replace all occurences of ""php"" with ""html"" inside them"
"find . -type d -name .git -exec sh -c ""cd \""{}\""/../ && pwd && git pull && git status"" \;","run 'git pull' and, if successful, 'git status' in every git repository in the current directory"
find . -name photoA.jpg photoB.jpg photoC.jpg,search for multiple files in the current folder
find -maxdepth 2 -name file1,find all files/directories named file1 in maximum 2 levels down the current directory
find . -mmin -60 -type f -exec ls -l {} \;,list all regular files from the current directory tree that were modified less than 60 minutes ago
"find /var/log -name ""*.log"" -print0","display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names"
find . -perm /u=s,find all the suid files in the current directory tree
find . -name '.?*' -prune,search for hidden files non-recursively
find . -name '*-GHBAG-*' -exec rename 's/GHBAG/stream-agg/' {} +,"change the word ""ghbag"" to ""stream-agg"" in all the file names in current folder which have the word ""-ghbag-"" in their name"
sleep $(($(date -f - +%s- <<< $'tomorrow 21:30\nnow')0)),sleep until tomorrow at 21:30
find . -inum 128128 | xargs rm,delete all files with 128128 inode number under current directory tree
"find $PWD | sed -e 's/^/""/g' -e 's/$/""/g' | tr '\n' ' '",find all the files in the current folder and display adding quotations to each file and replace spaces with new line
find . -exec myscript {} \;,find all files/directories in current directory and execute myscript for each of them
zcat input.gz | sed -n 's/.*\(userAgent=[^=]*\) [^ =]\+=.*/\1/p',"unzip and extract ""*\(useragent=[^=]*\) [^ =]\+=.*"" from ""input.gz"""
"find -type f -name ""*.wav"" | grep export","search the current directory tree for *.wav files that have ""export"" in their pathnames"
vim <(history),"view history using ""vim"""
find /ghi /jkl -type f -name abc.def 2> /dev/null -exec grep -H ^# {} \;,list the abc.def files under the directories /ghi and /jkl which have commented entries and display those entries
find $DIR -type f -mtime +60w -exec rm {} \;,delete all regular files that have not been modified in the last 60 weeks under $dir directory tree
NUMCPU=$(grep $'^processor\t*:' /proc/cpuinfo |wc -l),counts number of processors and saves in variable numcpu.
getent group | cut -d: -f1 | sort | cat -n,print enumerated sorted list of all group names known to the system.
yum update,updates all installed software.
chown -R user_name folder,"recursively change owner of all files in ""folder"" to ""user_name"""
"find . -name ""*.txt"" 2>>/dev/null","find all .txt files from current directory , redirecting errors to /dev/null"
"mv /source/path/{.[!.],}* /destination/path","move all files including hidden files and excluding "".."" in ""/path/subfolder/"" to ""/path/"""
find / -name 'program.c' 2>/dev/null,"discard all the errors and search for the file ""program.c"" in the entire file system"
more <( ls /usr/bin ),"list the commands in /usr/bin, pausing for user input after each page."
find . -type f -exec sed -i ‘s/.*abc.*/#&/’ {} \;,"find all regular files under current directory tree, prepend '#' at the beginning of the lines that contain 'abc' in those files and modify them in-place"
"find /path -perm -g+w,o+w",find all files under /path and below writable by `group' and `other'
ls -l /boot/grub/*.mod | wc -l,counts all *.mod files in a /boot/grub/ folder.
find / -iname '*.ogg',find all *.ogg files on the system ignoring the case
"find . -type f -ctime -3 -printf ""%C@ %p\n"" | sort | tail -n 5 | sed 's/[^ ]* \(.*\)/\1/'","find all files under current directory whose status was changed less than 3 days ago, sort them and show last 5 lines of output with only their paths"
split -b 1024k <file_name>,"split ""<file_name>"" into files of at most 1024 kib in size"
find . -type d -print0 | xargs -0 chmod go+rx,find all directories under current directory and set read & execute permission for group and other for these files
"yes a=\""20131202\"" | sed -e :a -e 's/...\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)./\1 \2 \3/'","continuously convert ""20131202"" into ""2013 12 02"" and print the result"
"find . -name ""-F"" -exec rm {} \;",delete all files named '-f' under current directory tree
find /home -name '*.jpg,find all the jpg files in a directory.
comm -23 <(command_which_generate_N|sort) <(command_which_generate_M|sort),"print the set difference of ""command_which_generate_n"" and ""command_which_generate_m"""
ssh-keygen -Hf ~/.ssh/known_hosts,hash hostnames in user's known hosts file.
"echo ""`pwd -P`""",print the physical current working directory
"find . -perm -g+w,u+w",search for files/directories which are writable by both their owner and their group
"find . -type d | xargs -I ""{x}"" mkdir ""{x}""/new-dir","make a new directory ""new-dir"" in every directory in the current directory tree"
find . -type f -exec mv '{}' '{}'.jpg \;,"recursively add "".jpg"" to all files in the current directory tree"
less -f <(php whatevz.php),page through the output of running the specified php file.
gunzip -c myarchive.tar.gz | tar -tvf -,"unzip and untar ""myarchive.tar.gz"" and check for corruption"
which python,"print full path of command ""python"""
"read -d ""$(echo -e '\004')"" stdin",save standard input to variable 'stdin' until the first character encoded as '\004' is read
df --total | tail -n 1,report total file systems disk usage.
"find /path -perm /g+w,o+w",find all files under /path and below writable by `group' or `other'
find /home/username/public_html/themes -type d -exec chmod 750 {} +,find all directories under /home/username/public_html/themes and set their permission to 750
find ./debian -type d | xargs chmod 755,change permissions of all directories residing under and below ./debian to 755
svn status |  grep '\!' | cut -d\  -f2-,print list of missing files in a subversion repository.
"find . -name ""$1"" > /tmp/safe_del.lst",find files under current directory with name (or glob pattern) expanded by $1 and save the list to /tmp/safe_del.lst
find $INTRANETDESTINATION/weekly -mtime +32 -exec rm {} \;,delete all files under $intranetdestination/weekly directory tree that were modified more than 32 days ago
"find /nas/projects -name ""*.h""",find all headers file *.h in /nas/projects directory
date -j -v-1d,print yesterday's date
"sudo find / -type d -name ""postgis-2.0.0""",find all directories named postgis-2.0.0 under / directory
find . -regextype posix-egrep -regex '.\*c([3-6][0-9]|70).\*',"find files in the current directory tree whose names are of the form ""cxx_data.txt"" where xx is a number from 30 to 70"
"find . -type f -name ""*.keep.$1"" -print0 | xargs -0 rename ""s/\.keep\.$1$//""","find all files in the current directory tree whose names end with the suffix "".keep.$1"", where $1 is the first command line argument, and remove that suffix"
stat -f 'File: %N Modified: %t%Sm' t* |column -t,format the filename and modification time of files starting with t as a table on osx
"cd ""$(dirname ""$1"")""","change directory to the directory containing file path ""$1"""
rgrep . | wc -l,prints total count all non-empty lines in files of a current folder.
rsync -av /home/user1 wobgalaxy02:/home/user1,"archive ""/home/user1"" to ""wobgalaxy02:/home/user1"" excluding hidden files"
find ~/junk  -name 'cart1' -exec mv {} ~/junk/A \;,rename file ~/junk/cart1 to ~/junk/a
find  | rename 's/\.jpg$/.jpeg/',rename all .jpg files to .jpeg under the current directory and below
tree -a .,recursively print all files and directories in the current directory tree including hidden files
pwd | cut -b2- | tr '/' '\n',list each subdirectory name composing the current working directory
find /path -type f,search the /path directory tree for regular files
find /path/to/your/directory -regex '.*\.\(avi\|flv\)' -exec cp {} /path/to/specific/folder \;,find *.avi and *.flv files in /path/to/your/directory and below and copy them to /path/to/specific/folder
find / -path /proc -prune -o -type f -perm +6000 -ls,search the entire system for suid or sgid files
"ln -s ""/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl"" ~/bin/subl","create a symbolic link named ""~/bin/subl"" to ""/applications/sublime text.app/contents/sharedsupport/bin/subl"""
cat file | fold -s -w29,"print 'file' content, formatting output as 29-symbol wide column, regarding space symbol as a word separator"
find . -print0|xargs -0 command,run `command' passing the files from the current directory tree as arguments
find . -type f -exec perl -i -pe 's/something/another/g' {} \;,replace a word in all the regular/normal files in the current folder
alias te='tail -f /var/log/apache2/error_log | perl -ne '\''...'\''',"set alias ""te"" for command 'tail -f /var/log/apache2/error_log | perl -ne '\''...'\'''"
find -type d ! -perm -111,find all directories in the current directory tree that are not accessible by all
/usr/bin/find $DIR -maxdepth 1 -ipath $TMP_DIR -print -quit,find the first file/directory under $dir which matches the $tmp_dir in its path
sort -o $file $file,"sort ""$file"" and output the result to ""$file"""
"df -m | awk '{ SUM += $2} END { print SUM/1024/1024""TB"" }'",report only total size of file systems in terabytes.
find dir -name '?????????????????????????????????',find all directories under dir whose names are 33 characters long
ifconfig eth0 up,turns on network interface eth0.
"fold -b -w 20 | cut --output-delimiter $'\t' -b 1-3,4-10,11-20","print every 20 bytes of standard input as tab separated groups of bytes 1-3, 4-10, and 11-20"
"result=""$(dig +short @""$server"" ""$domain"" | wc -l)""",count number of a records of domain '$domain' on nameserver '$server' and save value in 'result' variable
"find /home/*/public_html/ -type f -iwholename ""*/modules/system/system.info"" -exec grep -H ""version = \"""" {} \;",identify cms version/releases accross all your drupal websites
find . -type f -print0 | xargs -0 sed -i 's/Application/whatever/g',replace a word in all the regular/normal files in the current folder(doesn't actually modify the original file just displays the replaced text)
mv `ls` somewhere/,"move all files and directories in the current directory to ""somewhere/"""
screen -S main,create a named screen session
yes | pv --quiet --rate-limit 10,"continuously output ""y"" at a rate of 10 bytes per second"
rm -f /tmp/stored_exception /tmp/stored_exception_line /tmp/stored_exception_source,"forcibly removes files  '/tmp/stored_exception', '/tmp/stored_exception_line', '/tmp/stored_exception_source'"
echo 'string to be hashed' | md5,find md5sum of 'string to be hashed'
find .  -mtime +7 -print,serach in current directory downwards all files which  have not been modified since last 7 days
"find -depth ""Test Folder"" -type d -name .dummy -exec rm -rf \{\} \;","search for the folder .dummy in the entire directory structure of ""test folder"" and remove it."
"find /tmp/ -depth -name ""* *"" -execdir rename 's/ /_/g' ""{}"" \;",find all files/directories with space in their names under  /tmp/ directory and rename them by replacing all spaces with _
ln -sfn /other/dir new_dir,"force create a symbolc link named ""new_dir"" to ""/other/dir"" without dereferencing ""new_dir"""
find /home/you -iname “*.mp3” -atime 01 -type -f,search for all the mp3 files in the folder /home/you which have been accessed 24 ago
find .  -type f  -name '*.txt' -exec wc -l {} \; | awk '{total += $1} END{print total}',count total number of lines in all *.txt file in cuuent directory .
"find . -type f -maxdepth 2 -name ""*.tex""",find all *.tex regular files in maximum 2 levels down the current directory
find dir -name \*.jpg -print0 | xargs -0 -N1 ln -s,"create symbolic links in current directory to all files located in ""dir"" directory and have filename extension ""jpg"""
mv Tux.png .Tux.png,"rename ""tux.png"" to "".tux.png"""
"QUEUE_PIDS=$(comm -23 <(echo ""$NEW_PIDS"" | sort -u) <(echo ""$LIMITED_PIDS"" | sort -u) | grep -v '^$')",save in queue_pids variable only pid numbers that stored in $new_pids variable
find /usr -newer /tmp/stamp,search the /usr/ directory tree for files newer than file /tmp/stamp
find . -maxdepth 0,display all files in the current folder and do not search in the sub directories
"su - joe -c ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$""","run command ""/path/to/my_daemon & echo \$! > /tmp/su.joe.$$"" as user joe"
"join -t, <(sort file1) <(sort file2)","merge file1 and file2 by outputting all lines where the first comma-separated field of both files matches, followed by extra fields in file1 and those in file2"
... | paste -sd+ - | bc,"mathematically sum each line in the output of ""..."""
{ time ls -l >/dev/null; } |& grep real,redirects output of 'time' built-in function and prints only real-time statistic.
"find jcho -name *.data -exec sh -c 'f=""${0}""; d=$(echo ${f} | sed -re 's/0/2/' ); cp ${f} ${d} ' {} \;",copy all *.data files under jcho directory to files whose names are constructed by replacing the first '0' to '2' in their names
"pstree $(pgrep CID$client_id) -ap | sed -n 's/.*rsync,\([0-9]*\).*/\1/p'",get the pid of rsync for the user that owns the process matching the pattern expanded by cid$client_id
"find . -iname '*py' -exec grep ""text"" {} \;",search for the word text in all the python files in the current folder
df -k /tmp | tail -1 | tr -s ' ' | cut -d' ' -f4,report available space on the file system containing /tmp in kilobytes.
sudo chown el my_test_expect.exp     //make el the owner.,change owner of the file my_test_expect.exp to user el
find /var/tmp/stuff -mtime +90 -print,find files in /var/tmp/stuff and below that have not been modified in over 90 days
ssh tunneluser@111.222.333.444 <<\EOI,"ssh into ""111.222.333.444"" as user ""tunneluser"" without interpreting bash variables locally"
seq 10000 | parallel -j100 wget https://www.example.com/page{}.html,"download 10000 web pages ""https://www.example.com/page{}.html"" 100 at a time where ""{}"" ranges from 1 to 10000"
rsync -ravz /source/backup /destination,"archive ""/source/backup"" to ""/destination"" with compression during transfer"
sleep 500,sleep for 500 seconds
find /path/ -type f -daystart -mtime +0,"display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )"
cat file | fold -w29 | head -1,"print only first line of 'file' content, formatted as 29-symbol wide column"
"grep -insr ""pattern"" *","recursively findsfiles with text pattern in current folder, ingnoring case differences, prefixes each matched line with number in file and suppresses error messages about nonexistent or unreadable files."
"echo ""$(ifconfig)""",prints information about active network interfaces in system.
readlink -m /path/there/../../,"print canonical filename of ""/path/there/../../"" even if it does not exist"
"find . -type f | xargs grep -I ""needle text""","search the current directory recursively for files containing ""needle text"""
"find /volume1/uploads -name ""*.mkv""","search for all files ending with "".mkv"" in current folder"
find / -size +600M -print,find all files on the system that are larger than 600 mb
alias,list all aliases
"find ""/cygdrive/e/MyDocs/Downloads/work/OATS Domain related/"" -iname ""log4j*.xml"" | xargs -I % grep -ilr ""CONSOLE"" ""%"" | xargs -I % grep -H ""ASYNC"" %","find all files/directories with '.xml' extension that start with 'log4j' in their names under '/cygdrive/e/mydocs/downloads/work/oats domain related/' directory tree, search for files that contain the string 'console' in their contents, then search for the string 'async' in the matched files and display the matched lines along with their filenames"
hostname $(cat /etc/hostname),"set the host name to the contents of ""/etc/hostname"""
for i in `find . -type d`; do mkdir -p /tmp/tar_root/`echo $i|sed 's/\.\///'`; done,make a directory structure same as the current directory tree under /tmp/tar_root directory
chown --reference=oldfile newfile,"copy the owner and group of ""oldfile"" to ""newfile"""
find . -type l -exec ls -l {} \;,display long listing of all the symbolic links in the current folder
find / -type d -size +50k,find all directories in entire file system which are larger than 50kb
find / -print,list all files/directories in entire file system
yes n | gunzip file*.gz,"gunzip all files matching ""file*.gz"" and answer ""n"" to any prompts"
"basedir=$(cygpath -m ""$(dirname ""$0"")"")","takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable."
find . -type f | xargs -I{} chmod -v 644 {},change permissions to 644 for all files in the current directory tree
"find -E . -regex "".*ext1|.*ext2|.*ext3""","find all the files in the current folder which end with ""ext1"" or ""ext2"" or ""ext3"""
find /usr -name temp -print,"search for files with the name ""temp"" in the /usr folder"
find /home -xdev -samefile file1 | xargs rm,find and delete all hard links in the /home directory tree to file1
"git ls-files | sed 's/ /\\ /g' | grep -E ""\.*(swift$|mm$)"" | xargs wc -l","counts the number of lines in each *.swift or *.mm file in a git repository, escaping any space in filename."
"ssh ""$USER@$SERVER"" ""$cmd_str""","execute command ""$cmd_str"" on host ""$server"" as user ""$user"""
"tac infile | sed '/string match/,$d' | tac",print all lines after the last match of 'string match'
find . -size -9k,list files smaller than 9kb residing in the current directory and below
find root -type -d -empty -delete,delete all empty directories under root
tr -dc '1-65000' </dev/urandom | head -c N,prints a random n-digit number with leading zeroes
./myprogram | more,"run ""myprogram"" in the current directory, pausing for user input at each page."
"rm --force ""${temp}""",forcibly removes ${temp} file.
find /tmp -type f -name ‘*.txt*’ | sed -e ‘s/.*/\”&\”/’ |xargs -n 1 grep -l hello|sed -e ‘s/.*/\”&\”/’,find all the text files in the temp folder and search for the word hello in all these files and display the matched files
find ./ -executable,find all executables in the current directory tree
unset GIT_DIR,unsets git_dir variable.
"find /users/tom -name ""*.pl"" -name ""*.pm""","find files/directories under /users/tom that matches both the pattern ""*.pl"" and  ""*.pm"""
tar -xzvf backup.tar.gz,"extract ""backup.tar.gz"" with verbose output"
"find ./ -iname file_name ! -path ""./dirt to be Excluded/*""","find all files in the current directory tree whose names are ""file_name"", except for those with pathnames matching pattern ""./dirt to be excluded/*"""
diff -y file1 file2,display differences between file1 and file2 side-by-side.
comm -12 <(sort -u /home/xyz/a.csv1) <(sort -u /home/abc/tempfile) | wc -l,print number of lines that equal in files '/home/xyz/a.csv1' and '/home/abc/tempfile'
groups,finds out what groups a current user has.
"find $WHATEVER -printf ""%s %p\n""",print all files/directories with their sizes under $whatever directory tree
"find . -name status.c -exec stat --format ""%A %s %x %n"" {} \;",find all status.c files in the current directory tree and show stat's information on them
find images/ -type f,search the `images' directory tree for regular files
find -name test2 -prune,"find all files named ""test2"" in the current directory"
find . -maxdepth 1 -type d -exec ls -dlrt {} \;,list all directories in maximum 1 level down the current directory
echo dirname: $(dirname $mystring),prints folder path where $mystring file is located.
cat dax-weekly.csv | awk '1 { last = NR; line[last] = $0; } END { print line[1]; for (i = last; i > 1; i--) { print line[i]; } }',"reverse the order of lines in ""dax-weekly.csv"" keeping the first line the same"
find -print0 | xargs -0,find all files/directories under current directory
find / -mtime 1,find files that have a modification time of a day ago
tmux new-session -ds cf,creates detached tmux session named 'cf'.
find /home -size +200M -exec ls -sh {} \;,display a long listing of all the files in the home folder which are bigger than 200mb
"find /tmp/ -ctime -1 -name ""x*"" | xargs -I '{}' mv '{}' ~/play/",find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play
find . -perm -4000 -print,find all the files in the current folder which have a set uid set
find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec rm '{}' ;,"delete all the files in the current folder which end with "".bak"" or "".backup"" and which have not been accessed in the last 30 days"
ssh -t somehost ~/bashplay/f,"force pseudo tty allocation on connection to ""somehost"" and execute ""~/bashplay/f"""
find . -maxdepth 1 -type f | xargs -I ‘{}’ sudo mv {} /directory1/directory2,display all the files in the current folder and do not search in sub directories and move them to the directory /directory1/directory2.
"grep ""class foo"" **/*.c",recursively finds string 'class foo' in all *.c files from current folder.
"ls | perl -F'\n' -0777 -anE 'say join "","", @F'","lists all files in a current folder, separating names with comma."
ls -l /lib*/ld-linux*.so.2,lists all files that matches path pattern with wildcards.
"getent passwd | cut -d: -f1 | perl -e'while(<>){chomp;$l = `crontab -u $_ -l 2>/dev/null`;print ""$_\n$l\n"" if $l}'",for all users in the system who have their cron jobs display user name and crontab.
find . -name “*.old” -delete,delete all files/directories with '.old' extension under current directory tree
find /home -type f -name *.mp4 -size +10M -exec rm {} \;,delete all the mp4 files in the folder /home which are bigger than 10mb
"find /var -type f  | xargs grep ""param1""","find the ""param1"" string in regular files under and below /var"
COLUMN=`echo $1 | tr -d -`,delete all '-' character from $1 and save the resultant string to variable 'column'
diff -a --suppress-common-lines -y a.txt b.txt > c.txt,"write differences between files ""a.txt"" and ""b.txt"" side-by-side and not outputting common lines to file ""c.txt""."
ssh -D1080 root@localhost -g,open a local ssh port on 1080 for application-level port forwarding
find -name whatever -exec grep --with-filename you_search_for_it {} \;,"search all files in the current directory tree that are named ""whatever"" for ""you_search_for_it"""
"find . -type d -printf ""%A@ %p\n"" | sort -n | tail -n 1 | cut -d "" "" -f 2-",get the directory with least access time under current directory
"echo ""groups: [ $(groups myuser | sed -e 's/.\+\s\+:\s\+\(.\+\)/\1/g' -e 's/\(\s\+\)/, /g') ]""",prints list of user 'myuser' groups in a format: 'groups: [comma-separated groups list]'.
"find . -name ""*.log"" -exec grep -l ""The SAS System"" {} \; > sas_log_list.txt","search the current directory tree for .log files containing the string ""the sas system"", and save their names to sas_log_list.txt"
"find . -name ""file2015-0*"" -exec mv {} .. \;","search for all the files in current folder which start with ""file2015-0"" and move them to another folder"
<files.txt  xargs stat -c %s | paste -sd+ - | bc,"calculate the number of bytes of all the files listed in ""files.txt"""
check_script_call=$(history |tail -1|grep myscript.sh ),"saves invoked command 'check_script_call=$(history |tail -1|grep myscript.sh )' in variable 'check_script_call', preceeding by its number in history."
find bla -name *.so -print0 | sort -rz,print a sorted list of *.so files in the bla directory tree
sed '/^\s*$/d' foo.c | wc -l,count non-blank lines in a file 'foo.c'
"echo ""a,b,c"" | tr '\n' ',' | tac -s "","" | sed 's/,$/\n/'",reverse input with comma deliminators
kill $(lsof -t -i:8080),"send sigterm signal to all processes using tcp port 8080, requesting them to terminate."
find /var/www/html/zip/data/*/*/*/*/* -type f -mtime +90  | sed 's|/[^/]*$||',find all files in /var/www/html/zip/data/*/*/*/*/* that are older than 90 days and print their parent directory paths
cd `ls -d */ | grep 1670`,go into the first directory whose name contains 1670
find / -maxdepth 2 -name testfile.txt,"look for ""testfile.txt"" in the ""/"" directory and 1 level below"
"find /public/html/cosi -name ""wiki.phtml -exec echo ""<a href=\""{}\"">{}</a>"" \;","generate html <a> links to files under the /public/html/cosi directory tree whose name is ""wiki.phtml"""
tail -n `tac biglogfile | grep -vnm1 2012 | sed 's/:.*//' | xargs expr -1 +` biglogfile,"beginning at the end of the file, prints lines matching /2012/ and exits after first non-matching line"
find src/ -type d -exec mkdir -p dest/{} \;,"make directories as needed in ""dest"" for every directory found under ""src/"""
find sourceDir -mindepth 1 -maxdepth 1,find all files in the `sourcedir' directory
grep ERROR $(find . -type f -name 'btree*.c'),search for error in all btree*.c files under current directory
find . -name '*.java' -exec vim {} +,open all .java files in the current directory tree in the vim editor
find $dir -type f -name $name -print,display all the normal/regular files in a directory
"find . -name ""file_*"" -follow -type f -print0 | xargs -0 zcat | agrep -dEOE 'grep'","unzip all files matching ""file_*"" and pipe into ""agrep -deoe 'grep'"""
find / -name 'my*',look for all files whose names match pattern 'my*'
"find ./ -name ""somename.txt""",find files/directories named 'somename.txt' under current directory tree
"find /usr/include -type f -mtime -400 -name ""*.h""",find all the header files in /usr/include which have been modified in the last 400 days
find /mnt/naspath -mtime 0  -name .snapshot -prune -o \( \! -name *~ -print0 \) | du --files0-from=- -hc | tail -n1 >> /tmp/size.log,"find all files/directories under mnt/naspath without descending into .snapshot directory, calculate the total size and redirect the result to /tmp/size.log file"
"find . -mtime -1 -type f -exec tar rvf ""$archive.tar"" '{}' \;","append all regular files modified in the last 24 hours to the ""$archive.tar"" tar archive"
find . -print,find and print the names of all files found in the current directory and all of its sub-directories
find . | sort -f | uniq -i -d,print a list of all duplicate case insensitive file paths in the current directory tree
"find /mydir -type f -name ""*.txt"" -execdir chown root {} ';'","change the owner of all "".txt"" files in directory tree ""/mydir"" to ""root"""
"find . -type l -exec sh -c ""file -b {} | grep -q ^broken"" \; -print",find all broken symlinks under current directory
"find /home/username/public_html/images -name ""articles.jpg""",find all files/directories named 'articles.jpg' under '/home/username/public_html/images' directory tree
find . -type f | xargs ls -ltr | tail -n 1,find recursively the latest modified file in the current directory
rsync -aqz _vim/ ~/.vim,"archive ""_vim/"" to ""~/.vim"" suppressing non-error messages and compressing data during transmission"
watch -n 0.1,modify interval to 0.1 seconds for the watch command
find . -type f -perm 755,find all 755 permission regular files under current directory tree
rsync -rvz -e 'ssh -p 2222' --progress --remove-sent-files ./dir user@host:/path,"recursively move ""./dir"" to ""user@host:/path"" via ssh on port 2222 compressing data and displaying progress during transmission"
cd /nfs//office/ && find . -name '.user.log' | xargs -I{} dirname {} | xargs -I{} dirname {},"search for the file "".user.log"" and display its parent directory"
find ./ -size +1000k,find all files in current folder which are bigger than 1mb
"find ""${DIR_TO_CLEAN?}"" -type f -mtime +${DAYS_TO_SAVE?} -print0",find files in $dir_to_clean that are older than $days_to_save days and print them with null character appended to their paths
find / -print0 -type d | xargs -0 ls -al,display a long listing of all the directories in the entire file system
find . -name test.txt,find all test.txt files/directories under current directory
find . -name *.py,find all *.py files/directories under current directory
ps | grep `echo $$` | awk '{ print $4 }',get the current shell's executable name from the output of 'ps'.
find /etc/sysconfig -amin -30,find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes
find ~ -daystart -type f -mtime 1,search the home directory tree for regular files modified yesterday
find local /tmp -name mydir -type d -print,find all directories named 'mydir' under 'local' and '/tmp' directory tree
find jcho -name *.data,find all *.data files under jcho directory
ls -d -1 $PWD/**,prints full path to files in a current folder.
seq 1 10 | sed $': loop; n; n; a insert\nn; b loop',"insert ""insert"" every 3 lines for the output of ""seq 1 10"""
find /myprojects -type f -name *.cpp -print0 | xargs -0 sed -i 's/previousword/newword/g',replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place
find . -type f -print0 | xargs -0 ls -ltr | head -n 1,find the oldest normal file in the current directory
export value=$(uname -r),"set variable value to current kernel release name, making this variable visible by subprocesses of current shell."
find . -type f -mtime +5,find all regular files that reside in the current directory tree and were last modified more than 5 days ago
"find . -type f -iname ""*.png"" -print0 | xargs -I {} -0 optipng -o5 -quiet -keep -preserve -log optipng.log ""{}""",optimize all the png images in the current folder to level 5 and save the log to the file optipng.log
"find . -name ""*.gz"" -execdir gunzip '{}' \;","unzip all "".gz"" files in the current directory tree to their respective directories"
"find ""$absolute_dir_path"" -type f -print0",search the path given as the $absolute_dir_path variable for regular files
find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l,count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%d'
find ~/tmp -mtime 0 -exec du -ks {} \; | cut -f1,calculate the disk usage for all the files which have been modified in the last 24 hours in ~/tmp folder and display the file sizes
cat file | fold -s -w29 | head -1,"print only first line of 'file' content, formatted as 29-symbol wide column, regarding space symbol as a word separator"
yes 0 | sed '1~2s/0/1/',"infinitely print ""1"" then ""0"""
ifconfig eth0 | awk '/HWaddr/ {print $5}',gets mac address of eth0 network interface.
sudo su elasticsearch -c './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch',run command './bin/elasticsearch -d --default.path.conf=/etc/elasticsearch' as user elasticsearch
find ~/ -mtime -2 -o newer filename,"search the home directory tree for files last modified less than 2 days ago or newer than file ""filename"""
gunzip *.gz,"unzip every "".gz"" file in the current directory"
"find . -type f |xargs ls -lS |head -20 | awk '{print $9, $5}'",list all files under current directory with their paths and sizes
"find . -mindepth 1 -print0|xargs -0 -I, mv , /tmp",move all the files in the current folder  to temp folder and search atleast in one subfolder
screen -x 2073 -p 0 -X title h,create a named screen session
"find . | grep ""FooBar"" | tr \\n \\0 | xargs -0 -I{} cp ""{}"" ~/foo/bar",copy all files that match 'foobar' in their paths under current directory tree to the '~/foo/bar' directory
find -name filename,"look for ""filename"" in the current directory and below"
"find . -maxdepth 1 -iname ""*.jpg"" | xargs tar -czvf jpeg.tgz",find all files with '.jpg' extension in the current directory ignoring sub-directories and archive them to a file named jpeg.tgz
find . -name \? -daystart -mtime +0 -mtime -3,find all the files in the current folder that have a single letter in their name which have been modified in the last 3 days but not today
find / -type f -perm 777 -print -exec chmod 644 {} \;,filnd all files in root directory with 777 permission and change permision 644  with chmod commad .
find sourceDir -mindepth 1,find all files in the `sourcedir' directory tree
find . -type f -exec du -Sh {} + | sort -rh | head -n 15,find the biggest files only (but not directories)
find / -perm +2000,find sgid files
mv original.filename new.original.filename,"rename ""original.filename"" to ""new.original.filename"""
seq -w 1 10,print numbers from 1 to 10 with padded leading zeros
find . -name filename.txt,"search for the file, filename.txt in the current folder"
"find . -type f -iname ""*.flac"" -o -print0 -iname ""*.mp3"" -print0 -o -iname ""*.wav"" -print0 -o -iname ""*.aac"" -print0 -o -iname ""*.wma"" -print0 | while read -d $'\0' file; do cp -ruv ""$file"" ""/media/wd/network_sync/music/$file""; done",copy all files/directories excluding *.flac files under current directory to /media/wd/network_sync/music directory
scp user@server_b:/my_folder/my_file.xml user@server_b:/my_new_folder/,"on host ""server_b"", connect as ssh user ""user"" and copy ""/my_folder/my_file.xml"" to directory ""/my_new_folder/""."
find dir/ -name '*.txt' | tar -c --files-from=- | bzip2 > dir_txt.tar.bz2,create a bzip2 archive `dir_txt.tar.bz2' of all .txt files in the dir/ directory tree
echo $(( $(... | paste -sd+ -) )),"mathematically sum each line in the output of ""..."""
"find . -maxdepth 2 -name ""test"" -exec rm -rf {} \;",delete all files/directories named test under maximum 2 level down the current directory
find -name met*,display all files in the current folder which start with met
"find . -name ""*.txt"" -print | grep -v 'Permission denied'",find all *.txt files/directories under current directory discarding 'permission denied' errors
find . -type f -size 0b,find all files in the current folder which are of size 0 bytes.
"zegrep ""xception"" `find . -name '*auth*application*'` | wc -l",search for xception in all *auth*application* files under current directory and count the number of matches
cut -d' ' -f1 file2 | comm -13 - file1,"print unique lines of sorted file ""file1"" when compared with the list of first space separated fields of all sorted strings of file ""file2"""
find ./ -type f -name \*.php -exec sed -i ’s/^.*iframe bla bla bla.*$//g’ {} \;,delete all matches to the regex '^.*iframe bla bla bla.*$' in all the php files under current directory tree and modify the files in-place
split -b 1M -d  file.txt file --additional-suffix=.txt,"split ""file.txt"" into files of at most 1 mib in size with a numeric suffix, prefix ""file"", and additional suffix "".txt"""
cd -,go back to last directory.
find /home/kos -name *.tmp -print,"find all files in /home/kos and below whose names end in "".tmp"""
"find . -type f -iname ""*.jpg"" -ls | awk 'BEGIN {print ""0""}; {print $7, ""+""}; END {print ""p""}' | dc",calculate the total size of all *.jpg files in the directory tree
"alias memu=""ps -u $(whoami) -o pid,rss,command | awk '{print \$0}{sum+=\$2} END {print \""Total\"", sum/1024, \""MB\""}'""",calculate the total amount of memory usage of the current user
"find ""$DIR_TO_CLEAN"" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf ""count=0; for f; do rm ""$f"" && (( count++ )); done; printf ""Total: %d\n"" $count' _ {} +",delete and count files in $dir_to_clean that are older than $days_to_save days
find . -type f -name '*.zip' -print0 | xargs -0 tar -xzf,find all the zip files in the current folder and create a tar ball of these zip files
"b=`echo ""$a"" | sed 's/./\L&/g'`","convert all characters in ""$a"" to lower case and save to variable ""b"""
"rsync --iconv=UTF-8-MAC,UTF-8 /Users/username/path/on/machine/ 'username@server.ip.address.here:/home/username/path/on/server/'","copy ""/users/username/path/on/machine/"" to ""username@server.ip.address.here:/home/username/path/on/server/"" and convert encoding from utf-8-mac to utf-8"
touch -h somesymlink,"change the timestamp of symbolic link ""somesymlink"" to current date/time"
find . ... -print -quit,find the first file/directory under current directory and quit
"find . -name ""*.so"" -printf ""mv '%h/%f' '%h/lib%f'\n"" | less -S","show the mv commands that would rename the *.so files in the current directory tree prepending their names with ""lib"""
find /path/you/need -type f -exec md5sum {} \; > checksums.md5,"find all files under /path/you/need, calculate their md5sums and redirect the results to checksums.md5"
"find $DIR -type f -printf ""%T@ %p\n"" | sort -n | cut -d' ' -f 2 | tail -n 1","list the last modified file under ""$dir"""
rsync -aP --include=*/ --include=*.txt --exclude=* . /path/to/dest,"archive all "".txt"" files in the current directory to ""/path/to/dest"" keeping partially transferred files"
find . -mmin -60 -type f -exec ls -l {} +,list all regular files in the current directory tree that were modified less than 60 minutes ago
groups el                                     //see that el is part of www-data,prints groups list that user 'el' belongs to.
file $(readlink -f $(type -p rename)),"normalize the path to command ""rename"" resolving any symlinks, and display what type of file it is."
"find  . -type f -name ""*.txt"" -exec sed 's/TZ/MALAWI/g' {} \;",find all *.txt file and replace old word to new word with sed command
find / -type f -size +20000k,find all files in entire file system which are larger than 20000kb
"find /       \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \              \( -size +100M -fprintf /root/big.txt  '%-10s %p\n' \)","traverse the filesystem just once, listing setuid files and directories into /root/suid.txt and large files into /root/big.txt."
"find . -type d -exec chmod u=rwx,g=rx,o=x {} \;","find all directories under current directory and set read-write-execute permission for owner, read-execute permission for group and execute permission for other for those directories"
find / -type l -print0 | xargs -0 file | grep broken,find broken links
"ssh REMOTE ""sh -c \""(nohup sleep 30; touch nohup-exit) > /dev/null &\""""","execute ""sleep 30; touch nohup-exit"" in the background on target machine ""remote"""
find -name file -printf 'Since -printf is an action the implicit -print is not applied\n',print 'since -printf is an action the implicit -print is not applied\n' for every file named 'file' found under current directory tree
find . -name config -type d,"search for the directory ""config"" in the current folder"
"find . -path ""./dirtoexclude"" -prune \     -o -exec java -jar config/yuicompressor-2.4.2.jar --type js '{}' -o '{}' \;","exclude ./dirtoexclude, using yui compress all file under currect folder"
find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n',list the names of the directories in current directory without going into sub-directories
"find /mnt/zip -name ""*prefs copy"" -print0 | xargs -0 -p /bin/rm","remove files under /mnt/zip matching ""*prets copy"" with confirmation"
who |grep -i admin |cut -c10-20,"print the terminal file of the users who are logged in with ""admin"" in their name"
su git,get the git user access
find -inum 804180 -exec rm {} \,delete all files with inode number 804180
"find ~/bin/FilesDvorak/.* -maxdepth 0 | awk -F""/"" '{ print $6 }'",print the 6th field (delimited by '/') from the paths specified by ~/bin/filesdvorak/.* files/directories
find -type d -printf '%d\t%P\n' | sort -r -nk1 | cut -f2-,search for all the files in the current folder and sort them in the order of their depth and display the file names
"find . -type f -print0 | xargs -0 grep -I ""needle text""","search the current directory recursively for files containing ""needle text"""
"tac -s "","" parse.txt > newparse.txt",reverse a file with comma deliminators instead of newline deliminators
"grep -R ""texthere"" *","finds strings like ""texthere"" recursively in all files of a current folder regarding all symlinks."
"find `pwd` -name ""accepted_hits.bam""","search the current directory tree for files named ""accepted_hits.bam"""
"find -path ""*/test/*"" -delete","remove all directories called ""test"" from the current directory tree"
"echo ""The script you are running has basename `basename $0`, dirname `dirname $0`""",prints message info about filename and location of the current script
crontab,"prompt user to type a list of cron jobs directly at the terminal, then use these replacing previously existing cron jobs."
find . -type d -print0 | xargs -0 du | sort -n | tail -10 | cut -f2 | xargs -I{} du -sh {},find the largest 10 directories under current directory
find . -printf 'Name: %f Owner: %u %s bytes\n',"display table of files with their name, owner, and size in bytes."
find . -exec chmod 775 {} \;,find all the files in the current directory and change the permissions to 775.
find . -print | grep '.*Message.*\.java',"find all .java files whose name contains ""message"""
"cal | awk 'NR>2 && NF>4 {printf ""%02d\n"",$(NF-4);exit}'",prints day of first tuesday in a month.
find /path/to/dir/ -mindepth 1 -maxdepth 1 -type d -print0,find all directories in /path/to/dir/ without going into sub-directories and append a null character at the end of each paths
"alias foo=""printf""","set alias ""foo"" for command ""printf"""
"find . -type f \( -name ""*.htm*"" -o -name ""*.js*"" -o -name ""*.txt"" \) -exec sh -c 'echo ""$0""' {} \;","display the html, javascript and text files in the current folder"
rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy,"removes empty folder, and hides error message if one is not empty."
find . -type f -exec ls -s {} \; | sort -n  | head -5,display the 5 smallest files in the current directory and its sub-directories.
diff -Nar /tmp/dir1 /tmp/dir2/,"compare files in ""/tmp/dir1"" and ""/tmp/dir2"", treating absent files as empty and all files as text"
ls -1p | grep '/$' | sed 's/\/$//',"list directories in the current working directory and remove the trailing ""/"""
diff <(zcat file1.gz) <(zcat file2.gz),"compare the contents of gzip-ompressed files ""file1"" and ""file2"""
dig -f /path/to/host-list.txt,make dns lookup requests for domain list in file '/path/to/host-list.txt'
env | grep -i shell,"case-insensitive search all existing environment variables and their values for ""shell""."
"find . -iname ""*linkin park*"" > temp;rsync -arhv --files-from=temp  /Users/tommye/Desktop/LP;rm temp","find all files and directories in the current directory with ""linkin park"" in their names and copy them to /users/tommye/desktop/lp, preserving path hierarchy"
rsync -rvv /path/to/data/myappdata user@host:/remote/path/to/data/myappdata,"recursively copy directory ""/path/to/data/myappdata"" to ""user@host:/remote/path/to/data/myappdata"""
history | more,"show all previously typed shell commands, waiting for user interaction after each page of output."
"yes ""Hidden"" | paste -d' ' -s - | dd of=/dev/sdb","continuously write ""hidden"" separated by spaces over the entire ""/dev/sdb"" disk"
find /path -type f -print | xargs rm,remove all regular files found in and below /path
fold -w30 longline,"wrap each line in ""longline"" to a maximum of 30 characters"
find . -mtime 0 -type f,display all the regular/normal files in the current folder which have been modified in the last 24 hours
tmux ls,lists all running tmux sessions.
find /your/webdir -type f | xargs chmod 644,correct permissions for files in the web directory
ifconfig en0 | grep -Eo ..\(\:..\){5},gets mac address of en0 network interface.
cat www-backup.tar.*|gunzip -c |tar xvf -,"ungzip and untar all files matching ""www-backup.tar.*"""
"find ./ -type f -name ""$2"" -exec sed -i ""s/$3/$4/g"" {} \;",find files whose names match the pattern given by the 2nd argument $2 of the bash script and replace string $3 with $4 in them
"tree -P ""*foo""","display all files in the current directory tree that match ""*foo"""
find ~ Music -name '*.mp3',search the ~ and `music' directory trees for .mp3 files
find . -name '*.js',find all javascript files under the current folder
find /media/New\ Volume/bhajans -maxdepth 1 -type d | xargs -0 mkdir -p,find all the directories in the different folders excluding search in the sub directories and create these folders in the current directory
find . -print -name dir -prune,"list the current directory recursively ignoring the ""dir1"" subdirectory's content"
find . -name '*.pdf' -exec rm {} +,recursively finds all '*.pdf' files in a current folder and removes them.
rsync -a --stats --progress --delete /home/path server:path,"archive ""/home/path"" to ""path"" on host ""server"" showing progress and statistics and remove files in the destination not found in the source"
set -a,mark variables and function which are modified or created for export to the environment of subsequent commands
./a.out 2>&1 | tee output,"write standard output and error of ""./a.out"" to standard output and to file ""output"""
"nl -w 8 ""$infile"" | sort -k2 -u | sort -n | cut -f2","remove duplicate phrases and keep the original order of lines in ""$infile"""
find /etc/ -type f -mtime -1,search for all the regular/normal files  in the /etc folder which have been modified in the last 24 hours
find . -iname test,find all the files with the name test in the current folder ( case insensitive )
"OUTPUT=""$(ls -1)""",saves listing of a current folder in 'output' variable.
ps -o pid --no-headers --ppid $PARENT_PID,list pids of children processes
"find . -depth -name ""* *"" -execdir rename ""s/ /_/g"" ""{}"" \;",find all files/directories with space in their names under current directory and rename them by replacing all spaces with _
kill -9 $(lsof -t -u daniel),"send sigkill to all processes owned by user 'daniel', terminating them instantly."
echo $path | rev | cut -d'/' -f-3 | rev,keep the last 3 components (directories) of $path
sudo find /path/to/someDirectory -type f -print0 | xargs -0 sudo chmod 644,"change the permissions of all the regular/normal files in the folder ""/path/to/somedirectory"" to 644"
find ~ -newer /tmp/timestamp,find all files in home folder which have been modified after a timestamp
rsync -aq --rsync-path='mkdir -p /tmp/imaginary/ && rsync' file user@remote:/tmp/imaginary/,"make directory ""/tmp/imaginary/"" on remote host before archiving ""file"" to ""user@remote:/tmp/imaginary/"""
comm -3 <(sort file1) <(sort file2),"extract any line in ""file1"" or ""file2"" which does not appear in the other"
top -u abc -d 30 -b -n 10,monitor all processes belonging to user 'abc' in batch mode (not accepting user input) and displaying info each 30 seconds up to 10 times.
find /  \( -perm -2000 -o -perm -4000 \) -ls,find files with sgid (2000) and suid(4000) permssions set in the file system
find . -type f -name filename.txt -exec vi {} +,find file `filename.txt' in the current directory tree and edit it with `vi'
rm `find tmp -maxdepth 1 -name '*.mp3'`,remove all *.mp3 files in tmp directory but not in it's subdirectories
command_that_writes_to_stdout | tee >(command_that_reads_from_stdin),"write output of ""command_that_writes_to_stdout"" to standard output and as input to ""command_that_reads_from_stdin"""
find . -type f | egrep '\.(shtml|css)$',"search the current directory tree for regular files whose names end in "".shtml"" or "".css"""
tmux set -g history-limit 10000,globally sets the maximum number of lines to held in window history as 10000.
"cd ""$(find . -name config -type d | sed 1q)""","search current directory for any directory named ""config"" and go to first match found."
find /myprojects -type f -name '*.cpp' -print0 | xargs -0 -n 1 sed -i 's/previousword/newword/g',replace all occurrences of 'previousword' with 'newword' in all regular files with '.cpp' extension under '/myprojects' directory tree and modify them in-place
( find . \( -name '*.h' -o -name '*.cpp' \) -print0 | xargs -0 cat ) | wc -l,finds total lines count of few types of files (*.h and *.cpp) in a current folder and subfolders.
chmod 644 img/* js/* html/*,"set permission of all files in ""img"", ""js"", and ""html"" to 644"
"cmdstr=$(alias $aliascmd | cut -d""'"" -f2 | xargs)","set value of the variable ""cmdstr"" to the value of the alias  ""$aliascmd"""
find . -size +10k,display all the files in current folder which are bigger than 10kb
"find . -type f -name ""*.txt"" -exec gzip {} \;","compress all "".txt"" files in the current directory tree with gzip"
find / -newerct '1	minute ago' -print,find all the files in the file system which have been changed 1 minute ago.
"find / -maxdepth 1 -xdev -type f -exec grep -i ""stringtofind"" -q ""{}"" \; -print0 | xargs -0 sed '/./d'",delete all contents form the files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory excluding other partitions
find . -name '*foo',find all *foo files/directories under current directory
"find . -name ""*.undo"" -ls | perl -lane '$t += $F[6]; END{print $t}'",find all the files ending with undo in the current folder and calculate the total size of these files
"find /usr /home  /tmp -name ""*.jar""","list all *.jar files/directories under /usr, /home and /tmp directory"
"find . -iname ""Thumbs.db"" -print0 | xargs -0 rm -rf","removes resursively all files and folders named ""thumbs.db"", ignoring case distincts."
find . -type d -links 2,list all leaf directories (directories which don't contain any sub-directory) under current directory
find folder* -name '*.a' -print | cpio -pvd /path/to/dest,"copy all files ending in "".a"" in directory trees matching ""folder*"" to ""/path/to/dest"" preserving directory hierarchy"
paste <(cal 6 2009) <(cal 6 2010),"prints calendars of july, 2009 and july, 2010 side-by-side."
find -exec command {} +,find all files/directories in current directory and run the command 'command' on each of them invoking the command as few times as possible
"find ""$musicdir"" -type f -print",find all files under $musicdir directory
"find -type f  -exec readlink -m {} \; | gawk 'BEGIN{FS=""/"";OFS=""/""}{$NF=tolower($NF);print}' | uniq -c",count case insensitive absolute paths recursively from the current directory
yum --disablerepo=sublime2 install firefox,installs 'firefox' package without using 'sublime2' repository.
ping -b 10.10.0.255,"ping the broadcast address ""10.10.0.255"""
"find . -name ""*.txt"" | xargs vim",find all .txt files in the current directory tree and edit them with `vim'
find /TBD -mtime +1 -type d | xargs rm -f -r,delete all directories in the tbd directory that were modified more than 1 day ago
view /boot/config-$(uname -r),"use midnight commander's ""view"" mode to interactively display the current kernel's compile-time config file."
mv fghfilea jklfilea,"rename ""fghfilea"" to ""jklfilea"""
find . 2>/dev/null >files_and_folders,display all files in the current folder while discarding the errors save the output to a file
find ~/ -name *.png -exec cp {} imagesdir \;,copy all .png files from the home directory tree to imagesdir/
"ifconfig | grep -E ""([0-9]{1,3}\.){3}[0-9]{1,3}"" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:",gets ip address of first listed network interface in system.
"echo `echo ""Ho ho ho""` | od -c","dump the character output of 'echo `echo ""ho ho ho""`'"
"find ./ -name ""*.img"" -exec bzip2 -v {} \;",compress all *.img files using bzip2
comm -13 <(sort file1) <(sort file2),"print lines in the sorted contents of ""file2"" that are not in the sorted contents of ""file1"""
chown -R www-data /var/www/.gnome2 /var/www/.config /var/www/.config/inkscape,"recursively change owner to ""www-data"" of ""/var/www/.gnome2"", ""/var/www/.config"", and ""/var/www/.config/inkscape"""
find -type d -a -name test,find all 'test' directories in the current directory tree
"find . \( -name en -o -name es \) -prune , -mtime 0 ! -name ""*.swp""","search the current directory recursively for files last modified within the past 24 hours ignoring .swp files and ""en"" and ""es"" directories"
find $HOME/. -name *.txt -exec head -n 1 -v {} \; > report.txt,find all .txt  files list & list the first lines of text files
chown -R :daemon /tmp/php_session,"recursively change the group of all files in ""/tmp/php_session"" to ""daemon"""
readlink `pwd`,print true directory name of the current directory
false,returns exit code 1.
"git status | grep ""On branch"" | cut -c 11-",print git branch currently checked out in a working directory.
find ./polkadots -name 'image.pdf',find all image.pdf files/directories under ./polkadots
find . -perm /a=x,find all executable files under the current directory and below
find . -type f -iname “*.mp3″ -exec rename “s/ /_/g” {} \;,rename all the spaces in mp3 files to underscore
date -u -Iseconds,print current utc date in iso format with precision to seconds
find /foo/bar -type d -depth -exec rmdir -p {} +,removes all empty folders under path '/foo/bar' and the path itself.
gzip -dc /usr/src/redhat/SOURCES/source-one.tar.gz | tar -xvvf -,decompress and extract '/usr/src/redhat/sources/source-one.tar.gz'
tree -p -d,print permissions of every directory in the current directory tree
"echo -e ""test1\ntest2\ntest3"" |tr -d '\n' |grep ""test1.*test3""","remove ""\n"" from ""test1\ntest2\ntest3"" and search for ""test1.*test3"""
"cal | awk -v date=31 -v FIELDWIDTHS=""3 3 3 3 3 3 3 3"" 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}'",prints week day of a 31 day in a current month.
find / -name vimrc,find all files/directories named 'vimrc' in the entire filesystem
sudo chmod 755 $(which node),"set permissions of command ""node"" to 755"
find . -type d -maxdepth 1 -exec ls -dlrt {} \;,list all directories in maximum 1 level down the current directory
nl -ba long-file \,"add a line number to every line in ""long-file"""
read -rn1,read a single character from standard input and do not allow backslash to escape characters
find -name '*.ISOLATE.quantifier.txt' -maxdepth 1 -exec mv {} ISOLATE/ +,find the files in the current directory that match pattern '*.isolate.quantifier.txt' and move them to folder isolate/
sudo yum install glibc,installs 'glibc' package.
diff -a --suppress-common-lines -y a.txt b.txt,"display differences between files ""a.txt"" and ""b.txt"" side-by-side and do not output common lines."
find . -name 'FooBar' -print0 | xargs -0,list all files/directories under current directory with 'foobar' in their names ensuring white space safety
my_program | split -d -b 100000 -,"split the output of ""my_program"" into files of at most 100000 bytes each and use numeric suffixes"
"history -r ""$HISTFILE""     #Alternative: exec bash",read the history file $histfile and append the contents to the history list
sort | uniq -c,displays the count of of each unique line read from standard input
sed -n 's;\(http://[^/]*/\).*;\1;p',"cut all remote paths from http urls received from standard input (one per line) keeping only the protocol identifier, host name, and trailing slash, of the form http://example.com/"
"rsync -avz -e ""ssh -p $portNumber"" user@remoteip:/path/to/files/ /local/path/","archive ""user@remoteip:/path/to/files/"" to ""/local/path"" via ssh on port ""$portnumber"" and compressing data during transmission"
"curl -L -C - -b ""oraclelicense=accept-securebackup-cookie"" -O http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip","download a file ""http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip"" using cookies ""oraclelicense=accept-securebackup-cookie"""
ls `which g++` -al,"print file information of the executable file of command ""g++"""
"source ""`brew --prefix`/etc/grc.bashrc""",sources a script ./etc/grc.bashrc that is located in a homebrew folder.
ls /empty_dir/ | xargs -L10 chown root,"change the owner of all files in ""/empty_dir/"" to ""root"" using at most 10 files at a time"
ln --force --target-directory=~/staging ~/mirror/*,"forcibly create symbolic links in target directory ""~/staging"" for all files located in directory ""~/mirror"""
MERGE=$(cat $COMMIT_EDITMSG|grep -i 'merge'|wc -l),save number of lines with any-cased 'merge' from $commit_editmsg file in 'merge' variable
find -x . -type f -print0,find files under current directory without descending into other file systems and append a null character at the end of each paths
ls -d */,lists all directories in a current folder.
read -s ENTERED_PASSWORD,"read a line from standard input into variable ""entered_password"" without echoing the input"
chmod -R a+rX *,recursively add read and directory access to all permissions of all files and directories
"find -type f -printf '""%p""",display all the regular/normal files in current directory
find / -name *.c | wc,find all *.c files on the system and feed the output to wc
"find / -user pat -iname ""Dateiname""","find all the files in the file system which belong to the user ""pat"" and with the name ""dateiname"""
find . -type d | grep -v '/\.',find all directories under current directory excluding those which match the regex /\. in their names
find . -depth \( -wholename \./\.\* \) -prune -o -print| cpio -aov > /media/caca/extract/full$date.cpio,find all files in current directory that were modified less than 1 day ago excluding hidden files  and archive them to /media/caca/extract/full$date.cpio
find . -name .svn -exec rm -v {} \;,delete all .svn files/directories under current directory
"find ""$front_element"" -maxdepth 1 -type d -not -path ""$front_element"" -printf '%T@ %p\n' | sort | awk '{print $2}'","find all directories in maximum 1 level down the $front_element directory, sort them according to modification time and list them excluding the $front_element path from the list"
find . -name '*.txt' -print0,find all *.txt files/directories under current directory terminating their names/paths with null character
"find /store/01 -name ""*.fits"" -exec chmod -x+r {} \; -exec ls -l {} \; | tee ALL_FILES.LOG","change the permissions of all the files ending with ""fits"" in the folder ""/store/01"" and save the output file names to a log file"
"echo ""error"" | tee","write ""error"" to standard output"
find . -name '*`$VERSION`*',find all files/directories that contain the string literal '`$version`' in their names under current directory tree
comm -23 <(find dir1 -type f | sed 's/dir1/\//'| sort) <(find dir2 -type f | sed 's/dir2/\//'| sort) | sed 's/^\//dir1/',"print all unique file paths under ""dir1"" compared to ""dir2"""
echo 12345 | rev,display 12345 backwards
find . -exec utility \;,"execute ""utility"" for each file in the current directory tree passing the pathname as a command line argument"
"find / -maxdepth 1 -xdev -type f -print -exec grep -i ""stringtofind"" -q {} \;",find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions
"/bin/true ""$(seq 1 100000)""","pass a single argument containing a string of numbers from 1 to 100000 to ""/bin/true"""
diff -q dir1 dir2,"print summary of new/missing files, and which files differ between dir1 and dir2."
find . -cmin $minutes -print,find all files in the current directory tree that were last changed $minutes minutes ago
ssh -S my-ctrl-socket -O check jm@sampledomain.com,"check that the master ssh control socket ""my-ctrl-socket"" to ""jm@sampledomain.com"" is running"
find Symfony -iname '*config*';,"find all the files starting with ""config"" in the folder symfony ( case insensitive search)"
"echo 'echo ""Bash version: ${BASH_VERSION}""' | ssh -q localhost bash",login to a bash shell on localhost via ssh and print the bash version
find . -type f -size +10000 -exec ls -al {} \;,list all files bigger than 10000 blocks
find / -user username -group groupname -name filename,find all files/directories named 'filename' that belong to user 'username' and group 'groupname' in the entire filesystem
pstree --show-parents -p $$ | head -n 1 | sed 's/\(.*\)+.*/\1/' | less,prints process tree of a current process with parents processes and id numbers.
find $HOME -iname '*.ogg' -o -iname '*.mp3',find all *.ogg and *.mp3 (case insensitive) files/directories under your home directory
find . -name '[mM][yY][fF][iI][lL][eE]*',search the current directory tree for filenames matching the pattern '[mm][yy][ff][ii][ll][ee]*'
touch -t `date +%m%d0000` /tmp/$$,update the timestamp of '/tmp/$$' to the current month and day
grep ^Q File1.txt | cut -d= -f2- | sort | comm -23 - <(sort File2.txt),"get from file 'file1.txt' strings starting with 'q', extract only part of them following after '=' sign, and print which ones are not found in 'file2.txt'"
"find . -type f -name ""*.txt"" -exec rm {} \; -print",remove all files with a txt extension under current directory
"output=$(echo ""$output"" | tr -d '\' | tr -d '\n')",strip all '\' and newlines from $output and save the result to variable 'output'
find . -name “*.[php|PHP]” -print | xargs grep -HnT “specified string”,"search for ""specified string"" in all the php files in the current folder"
find . -regex '\./[a-f0-9\-]\{36\}\.jpg',find all regex  '\./[a-f0-9\-]\{36\}\.jpg' files
diff <(sort file1 -u) <(sort file2 -u),sort file1 and file2 then display differences between them.
find /var/tmp/stuff -mtime +90 -delete,delete files in /var/tmp/stuff and below that have not been modified in over 90 days
find / -mtime -5 -print,find all the files in the entire file system which have been modified in the last 120 hours
find . -perm -444 -perm /222 ! -perm /111,"search for files/directories that are readable for everybody, have at least one write bit set but are not executable for anybody"
find . \( -name AAA -o -name BBB \) -print,search the current directory tree for files aaa and bbb
find / -path /proc -prune -o -user <account> -ls,dispaly a list of all the files in the file system which belong to a specific user  and exclude searching in the folder proc
find . -name libGLE* | xargs rm -f,remove all libgle* files from the current directory tree
"find $DIR -type f -iname ""*.$TYPE""","find all regular files under $dir directory tree with "".$type"" extension (case insensitive) where $type expands in the current shell"
"HISTTIMEFORMAT=""%s "" history 2","set the history time format variable ""histtimeformat"" to ""%s "" and display up to event 2"
find . -size -26c -size +23c -print,find all files in the current directory whose size is 24 or 25 bytes.
"find /home/mywebsite -type f -name ""*.php"" -ctime -30","search for all the php files in the folder ""/home/mywebsite"" which have been changed in the last 30*24 hours"
find -name '*~' -print0 | xargs -0 rm,"delete all the files ending with ""~"" in current folder"
yes ' ' | head -7 | tr -d '\n',print 7 spaces in a row
find . -type f -iname '*.cpp' -exec mv {} ./test/ \;,find all the cpp files in the current folder and move them to another folder
cat $file | wc -c,print number of bytes in $file.
find ./var/log,find all files/directories under ./var/log directory
readlink /dev/disk/by-uuid/b928a862-6b3c-45a8-82fe-8f1db2863be3,"print relative path of device of disk with uuid ""b928a862-6b3c-45a8-82fe-8f1db2863be3"""
find / -size +10M -printf “%12s %t %h/%fn”,get a detailed list of all files on the system larger than 10mb
"find ! -path ""dir1"" ! -path ""dir2"" -name ""*foo*""",find all files which name contain 'foo' and path is not dir1 or dir2
find full_path_to_your_directory -type f -printf '%p %s\n',print the file paths and their sizes for all files under full_path_to_your_directory
find /path/to/folders/ -name \*.emlx -print0 | xargs -0 -I {} mv {} ./Messages/,move all *.emlx files/directories under /path/to/folders/ to ./messages/ directory
find -iname example.com | grep -v beta,exclude directory from find . command
find . -size 0c -type f,find all empty regular files in the current directory tree
"alias logspace=""find /apps/ /opt/ -type f -size +100M -exec ls -lh {} \; | awk '{print $5, $9 }'""","set alias ""logspace"" for command ""find /apps/ /opt/ -type f -size +100m -exec ls -lh {} \; | awk '{print $5, $9 }'"""
find . –type f -mmin -10,find all regular files in the current directory tree that have been modified within the last 10 minutes
ls -d ./*/,lists all directories in the current folder.
find -type f -perm -110,see what files are executable by the file's owner and group
mv -T www_new www,"rename ""www_new"" to ""www"" even if ""www"" directory exists"
find -maxdepth 1 -type d | while read dir; do echo $dir; echo cmd2; done,"find all subdirectories of the current directory and run comand ""cmd2"" for each of them"
"find / -name ""*"" — print",display all the files in the entire file system
"find ""${INPUT_LOCATION}"" -name '*.pdf.marker' | xargs -i bash -cx 'pdf=`dirname {}`/`basename {} .marker`;[ -e ""$pdf"" ]&&{ mv {} ""$pdf"" ""$0"";}' ""${OUTPUT_LOCATION}""",move all *.pdf.marker files and their corresponding *.pdf files under ${input_location} to ${output_location}
find . -type f -exec chmod 0644 {} +,change the permission to 0644 for all files under current directory
"find . | grep "".xml$"" | parallel bzip2",find all xml files under current directory and archive them to .bz2 archives
"ps aux | grep 'python csp_build.py' | head -1 | cut -d "" "" -f 2 | xargs kill","send sigterm signal to the first process whose command matches ""csp_build"""
find . -print | xargs grep something,find all files under current directory and search for 'something' in those files
ssh-keygen -f ~/.ssh/apache-rsync,create a ssh key and store it in the file ~/.ssh/apache-rsync
yum repolist | tail -n +3 | grep -v 'repolist:' | cut -f1 -d' ',prints names of all configured software repositories.
find /etc -size +5M -exec ls -sh {} +,find all files/directories under '/etc' directory tree that are greater than 5mb and print their sizes and names
"find . -name "".txt"" -exec rm ""{}"" \;",find all text files in current folder and delete them
"result=$(groups ""$line"" | sed 's/ /\n/g' | egrep -v ""_unknown|sciences|everyone|netaccounts"")","saves in 'result' variable list of groups which user $line belongs to, and not matching pattern ""_unknown|sciences|everyone|netaccounts"""
find /tmp -user me -ls,display long listing of all the files/directories owned by the user 'me' under '/tmp' directory tree
find /basedir/ -iname '*company*' -print0,find all *company* (case-insensitive) files/directories under /basedir with null character as the delimiter
who | awk -F' ' '{print $1}' | sort -u | wc -l,count number of users logged in
"mv ""$2"" ""`dirname $1`""",moves file '$2' to the folder where '$1' file is located.
find . -name RAID -prune -o -print,find files and directories with the name raid but don't traverse a particular directory
su username,switch to user username
ifconfig eth0 | grep addr: | awk '{ print $2 }' | cut -d: -f2,gets ip address of eth0 network interface.
"find . -name ""S1A*1S*SAFE"" | rev | awk -F '/' '{print $1}' | rev | sort -t _ -k 5",find files in current folder using name patterns and sort the display the file names in the sorted order
"find -name ""123*.txt"" -exec rename 's/^123_//' {} "";""","remove the ""123_"" prefix from all filenames of .txt files in current directory."
dir=$(dirname $(readlink -m $BASH_SOURCE)),"save the directory of the full path to the current script in variable ""dir"""
"find -f \( -exec sed -i s/foo/bar/g \; , -name \*foo\* -exec rename 's/foo/bar/ {} \; \)","recursively search for all files whose name contains 'foo', and change the 'foo' in the filenames to 'bar'."
"wc -l $(find . -name ""*.php"")",counts lines in each *.php file.
find $dir -mtime +3,find all files/directoires that were modified more than 3 days ago under $dir directory tree
chmod 751 `find ./ -type d -print`,change permissions for directories in the entire file system
find / -iname passwd,"find all the ""passwd"" files in the entire file system"
find /home/username/public_html/sites/default/files -type d -exec chmod 770 {} +,find all directories under /home/username/public_html/sites/default/files and set their permission to 770
"find /home/you -iname ""*.txt"" -mtime -60 -print",display all text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search)
"zcat Input.txt.gz | cut -d , -f 1 | sort | uniq -c","extract the contents of ""input.txt.gz"", list the unique first comma separated field prefixed by the number of occurrences"
mv tobecopied/tobeexclude tobeexclude;,"move ""tobecopied/tobeexclude"" to ""tobeexclude"""
split -b 1024m file.tar.gz,"split ""file.tar.gz"" into files of size 1024 mb"
"find ""${searchpath}"" -type f -print0 | xargs -0 grep -l -E ""${string1}.*${string2}.*${string3}""",find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded
ping google.com | xargs -L 1 -I '{}' date '+%c: {}',"add a date time stamp to every line of output in ""ping google.com"""
find /home -xdev -samefile file1 -exec rm {} +,find and delete all hard links in the /home directory to file1
find . -type d -print0 | xargs -0 chmod 755,assign permissions 755 to directories in the current directory tree
sudo chown -R www-data:www-data /var/www,"recursively change the owner group of ""/var/www"" of to ""www-data"""
find . type -f -mtime 2,search the current directory recursively for regular files modified 2 days ago
"find . -name ""photo*.jpg""",find for a filename with multiple patterns in the current folder
echo ${filename%.*},"output the variable ""filename"" without the last dot-separated section."
alias py='python2.5 -O',"set alias ""py"" for command ""python2.5 -o"""
sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-,"print the first 5 characters followed by the next 5 characters on a new line for each line in ""input_file"" and split the result into files of at most 2000000 lines each with a filename prefix ""out-prefix-"""
echo t1_t2_t3_tn1_tn2.sh | rev | cut -d_ -f3- | rev,"remove last two underscore-delimited fields and following characters in ""t1_t2_t3_tn1_tn2.sh"" keeping only ""t1_t2_t3"""
finger | colrm 34 39,"remove characters in columns 34 through 39 in the output of ""finger"""
"find . -type f -name ""*.py""",find all *.py files under current directory
find /path -name '*.foo',search the /path directory tree for files matching pattern '*.foo'
python -u client.py | tee logfile,"write unbuffered output of ""python -u client.py"" to standard output and to ""logfile"""
file `which c++`,"print file type of the command ""c++"""
"ifconfig p2p0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'",gets mac address of p2p0 network interface.
find /usr/ports/ -name pkg-plist\* -exec grep dirrmtry '{}' '+' | wc -l,count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'dirrmtry'
"find ""/proc/$pid/fd""",display all files in a folder
grep '^core id' /proc/cpuinfo |sort -u|wc -l,reports count of processors in system.
tail -f /var/log/syslog,"print appended data in ""/var/log/syslog"" as the file grows"
"find /etc -name ""*.txt"" | xargs ls -l",list all *.txt files/directories under /etc
brew outdated | wc -l,finds number of available updates.
find . -type f -wholename \*.mbox -print0 | \     while read I ; do         mv $I $(echo $I | sed 's/\.mbox//') ;     done ;,"find regular files under the current directory, whose name ends in .mbox, piping the output to a while loop that renames each file, to the same name without .mbox at the end"
"find . -name ""*.h"" -print | xargs wc -l",display the number of lines in all the header files in the current folder
find . | xargs wc -l,find all files in current folder and display the total lines in them
git ls-files -z | xargs -0 wc -l,"counts the number of lines in each file in a git repository, if file names may contain spaces."
tar c dir | md5sum,"calculate the md5 sum of the tar archive of ""dir"""
find . -type d -atime $FTIME,find all directories that have been accessed $ftime days ago under current directory tree
"find -iname ""*TESTFILE*""","locate all files in the current directory and below that have ""testfile"" in their names regardless of the case"
export user=`env|grep -i SSH_CLIENT|cut -d' ' -f1|cut -d'.' -f4`,"in a ssh session, set the variable 'user' to the last dot-separated number of the client's ip address."
find .  -type f -print|xargs file|grep -i text|cut -fl -d:    | xargs grep regexp,look for `regexp' in binary files
find /path/to/dir -type f -mtime -7 -print0,find all files under /path/to/dir that were modified less than 7 days ago with null character as the delimiter
find . -name heapdump* -exec rm {} \ ;,"delete all the files found in the current directory tree whose names begin with ""heapdump"""
find . -type f -print | xargs grep -il '^Subject:.*unique subject',list the files from the current directory tree that contain lines matching regular expression  '^subject:.*unique subject'
curl -L https://get.scoop.sh,"download contents of a website ""https://get.scoop.sh"""
find . -type f -exec grep -l 'needle' {} \;,search for a word in all the files in the current directory and display the list of matched files.
sudo find . -name test2.h,find all test2.h files under current directory
find /usr/ports/ -name Makefile -exec grep ^USE_RC_SUBR '{}' '+' | wc -l,find all files named 'makefile' in the /usr/ports directory tree and count the number of lines in them beginning with use_rc_subr
find lpi104-6 -samefile lpi104-6/file1,find hard links to the same file lpi104-6/file1 in the directory tree lpi104-6
"find /var/log -name ""*.log"" -print0 2>/dev/null","display all the log files in the folder /var/log, print0 is used to handle files with only spaces in their names or which have newlines in their names and discard all the errors"
"grep -n """" myfile.txt | sort -r -n | gawk -F : ""{ print $2 }""",prints reversed content of a file 'myfile.txt' with string numbers.
rsync -av --copy-dirlinks --delete ../htmlguide ~/src/,"archive ""./htmlguide"" to ""~/src/"" with resolved symbolic links and delete any extraneous files from ""~/src/"" not found in ""./htmlguide"""
"find / -type f -name ""*"" -newermt ""$newerthan"" ! -newermt ""$olderthan"" -ls",list all files in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time
"find . -name ""*.txt"" -exec $SHELL -c 'echo ""$0""' {} \;",list all *.txt files/directories under current directory
find . -type f -mtime -14 | cut -b 3- > deploy.txt,find regular files modified less than 14 days ago stripping ./ from each file name
find /root/of/where/files/are -name *company*,find all *company* files/directories under /root/of/where/files/are directory
"read -p "" Again? Y/n "" i","read a line from standard input into variable ""i"" with the prompt "" again? y/n """
"find /home/folder1/*.txt -type f | awk -F '.txt' '{printf ""ln -s %s %s_CUSTOM_TEXT.txt\n"", $0, $1}' | sh",find all /home/folder1/*.txt files and create symlinks appending '_custom_text.txt' in their names
"find /mp3-collection -size +10000k ! -name ""Metallica*""","find all the files in the folder ""/mp3-collection"" which are bigger than 10mb excluding those that start with the word metallica"
find home/magie/d2 -type f -perm -u+rx | wc -l,display the count of regular files for which the owner has read and execute permission under 'home/magie/d2' directory tree
hnd=$(hostname -f),"save the fqdn host name of the system in variable ""hnd"""
"find /tmp/test/ -maxdepth 2 -mindepth 1 -type d | while read dir; do printf ""%s : "" ""$dir""; find ""$dir"" -maxdepth 1 -type f | wc -l; find ""$dir"" -maxdepth 1 -type f ; done;",find all files inside all directories (non-recursive) in maximum 2 levels down the /tmp/test directory and print the number of files in each directory and also print the file/directory paths
"find -name ""query""",find all files/directories named 'query' under current directory
find dir -depth,find all files/directories under current directory with a depth-first search
find $root -type d -printf '%p:',print a colon-separated list of all directories from the $root directory tree
find /home -type f -name *.log -size +100M -exec rm -f {} \;,find all log files larger then 100mb  in /home directory and delete them .
sort -m _tmp* -o data.tsv.sorted,"merge already sorted files in the current directory starting with ""_tmp"" and write the output to ""data.tsv.sorted"""
"mount -o rw,remount -t rootfs /",remount the root file system with read and write permission
yum update | tee mylogfile,"updates all software in system, prints update log on terminal and saves to 'mylogfile'."
find . -name \*.pdf -print,"search the current directory and all of its sub-directory for any pdf files being careful to prevent the shell from expanding ""*""  before it's passed to find."
find . -mtime -5,search the current directory tree for files modified less than 5 days ago
find . -type d -exec chmod 755 {} \;,change permissions to 755 recursively only for directories
find /target -type l -xtype l,find all the links in the current folder which are broken
"cat new.txt  | nl | sed  ""/2/d""","print ""new.txt"" with line numbers prepended and line 2 or any line containing ""2"" deleted"
"find /my/source/directory -ctime -2 -type f -printf ""%P\n"" | xargs -IFILE rsync -avR /my/./source/directory/FILE /my/dest/directory/",search for all the regular files that have been changed in the last 48 hours and sync these to another folder
"ssh $(vagrant ssh-config HOST | sed '/^[[:space:]]*$/d' |  awk 'NR>1 {print "" -o ""$1""=""$2}') localhost","ssh into desired vagrant host ""host"" without running ""vagrant ssh"""
"find ""/tmp/2/"" -iname ""$j.sh"" -exec cp {} ""$i"" \;",copy all files with name pattern $j.sh (case insensitive) under '/tmp/2' directory tree to $i directory
"find . | paste -sd "" """,search for all the files in current folder and display all the file names separated by space
"find -name ""*.php"" –exec cp {} {}.bak \;",backup all php files under the current directory tree
"date --date yesterday ""+%a %d/%m/%Y""",prints yesterday's date information
finger |  sed 's/\(.\{35\}\)...../\1/',"delete characters in columns 36 through 40 from the output of ""finger"""
find / -name httpd.conf,find all httpd.conf files in entire file system
grep -w -v -f blacklist file,print lines in file 'file' that do not match any word specified in file 'blacklist' (one word per line)
find . -mindepth 1 -maxdepth 1 -type d | wc -l,count the number of all directories under current directory non-recursively
find . -mmin -60 |xargs ls -l,list all files in the current directory tree that were modified less than 60 minutes ago
find -L /home/peter -name *~ -exec rm '{}' \;,"find all files whose names end with ""~"" in the /home/peter directory tree, following symlinks, and delete them"
find /TBD -mtime +1 -type d,find directories starting from /tbd that were modified more than 1 day ago
"wc -l `find . -type f \( -name ""*.cpp"" -o -name ""*.c"" -o -name ""*.h"" \) -print`","counts lines in each *.cpp, *.c, *.h file."
rsync -avlzp /path/to/sfolder name@remote.server:/path/to/remote/dfolder,"archive ""/path/to/sfolder"" to ""name@remote.server:/path/to/remote/dfolder"" compressing the data during transmission"
exec 1 | tee ${LOG_FILE},"execute ""1"" and write output to standard output and file ""${log_file}"""
find . -name '*.py' | tee output.txt | xargs grep 'something',"find all python files under current directory tree, save the list to 'output.txt' and search for 'something' in those files"
echo foo | readlink /proc/self/fd/1,"write ""foo"" to the real path of the current command's standard input"
export FOO_BACKWARDS=$(echo 'foo' | rev),"create a variable foo_backwards containing ""oof""."
find /usr/local -type d -name '*[0-9]',search /usr/local recursively for directories whose names end with a number 0-9
"find . | xargs grep -PL ""\x00"" | xargs grep -Pl ""\x0c""",display all the files in the current folder which contains form feed (^l) and does not contain null
"find . -type f -name ""*keep.${SUFFIX}""","search the current directory tree for regular files whose names end with ""keep.${suffix}"", where $suffix is a shell variable"
"find -type d | ssh server-B 'xargs -I% mkdir -p ""/path/to/dir/%""'",find all the directories in the current folder and create the same directory structure in a remote machine using ssh
find -type f -printf '\n' | wc -l,counts all files in a current folder and subfolders.
find /home -user sam,search the home directory tree for files owned by sam
pv file1 | wc -l,counts lines in file 'file1' and shows progress bar while doing.
chgrp -R fancyhomepage /home/secondacc/public_html/community/,recursively changes group ownership of everything in '/home/secondacc/public_html/community/' to 'fancyhomepage'.
find ~ -size +2000000c -regex '.*[^gz]' -exec gzip '{}' ';',find all the files in the home folder which are bigger than 2mb and zip them
"alias m=""mplayer -novideo -loop 0""","set alias ""m"" for command ""mplayer -novideo -loop 0"""
which c++,"print full path of command ""c++"""
sudo ln -s /usr/include/oracle/11.2/client $ORACLE_HOME/include,"create a symbolic link named ""$oracle_home/include"" to file ""/usr/include/oracle/11.2/client"""
find . -type f -exec file {} \; | awk -F: '{ if ($2 ~/[Ii]mage|EPS/) print $1}',"find all files under current directory whose file type description contains ""image"", display only path to each file."
find /dir -newer yesterday.ref -a \! -newer today.ref -print,find files/directories under '/dir' directory tree that are newer than 'yesterday.ref' file and older than 'today.ref' file by modification time
"find . -name ""*.andnav"" -exec rename -v 's/\.andnav$/\.tile/i' {} \;",rename file extension '.andnav' (case insensitive) to '.tile' for all files/directories under current directory tree
diff -dbU0 a b | tail -n +4 | grep ^- | cut -c2-,"print a minimal set of differences between files in directories ""a"" and ""b"", ignore the first 3 lines of output, and print any line starting with ""-"" with the first character removed"
find $STORAGEFOLDER -name .todo  -exec ls -l {} \;,"display a long list of all the files/directories named "".todo"" under $storagefolder directory tree"
"IFS=';' read -a myArray <<< ""$myArray""","convert the string ""$myarray"" into a bash array using "";"" delimiters"
{ time find / 2>/dev/null; } 2>time.txt,redirects time output to file.
shopt -s failglob,enables shell option 'failglob'.
find ./ -daystart -mtime -3 -type f  ! -mtime -1  -printf '%Tm %p\n',find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using format '%tm %p\n'
"find . -name ""._*"" -print0 | xargs -0 rm -rf",recursively removes all files like '._*' from current folder.
"find / -iname ""filename""","search all directories starting from the root directory for ""filename"""
"find `pwd` -name ""accepted_hits.bam"" | xargs -i echo somecommand {}","list files named ""accepted_hits.bam"" in the current directory tree prefixing their names with ""somecommand"""
find . -iname '*.cgi' | xargs chmod 755,find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755
curl https://raw.github.com/creationix/nvm/master/install.sh | sh,"download contents from ""https://raw.github.com/creationix/nvm/master/install.sh"" and execute"
find . -type d -name CVS -exec rm -r {} \;,"find all directories named cvs, and deletes them and their contents."
"find $HOME/. -name ""*.txt"" -ok rm {} \;",delete all text files in the home folder after user confirmation
"find . -name ""*.java"" | xargs grep ""Stock""","search for ""stock"" in all *.java files from the current directory tree"
"ln -s ""$wh"" wh","create a symbolic link named ""wh"" to ""$wh"""
"find $FOLDER -name "".*"" -delete",delete all hidden files in the directory tree given as variable $folder
find /var/www -group root -o -nogroup -print0 | xargs -0 chown :apache,find files/directories that is under group 'root' or have no group and set their group to 'apache'
"find $sourcePath -type f -name ""*.log"" | xargs zip $zipFile -@",create a zip file ($zipfile) of all *.log files under $sourcepath
find sourceDir -mindepth 1 -type d  -print0 | xargs -0 mv --target-directory=destDir,move all directories from the `sourcedir' directory tree to the `destdir' directory
"paste -d"" "" - - < file | column -t","format contents of ""file"" as a table"
"find . -type f -printf ""%C@ %p\n"" | sort -rn | head -n 10",find 10 most recently changed files in the current directory tree
ps -u $(whoami) | grep firefox | awk '{printf $1}',"print the pids of the current user's instances of ""firefox"""
ssh -p 4444 localhost,ssh into localhost on port 4444
find . ! -newer some_file,find all files in the current directory tree that are not newer than some_file
"me=`basename ""$0""`","set the variable ""me"" to the name of the running script."
find /path/to/look/in/ -type d | grep .texturedata,find all directories matching the regex '.texturedata' in their names under '/path/to/look/in/' directory tree
find . -name \*.coffee -exec grep -m1 -i 're' {} \;,search for first match of the case insensitive regex 're' in all *.coffee files under current directory
find sort_test/ -type f | env -i LC_COLLATE=C sort,print a list of regular files from directory tree sort_test/ sorted with lc_collate=c
"find . -name ""*.bz2"" -print0 | xargs -I{} -0 bzip2 -dc {} | cut -f, -d4","decompresses each of ""*bz2"" files under the current folder, redirecting output to the standard out, and prints only fourth of comma-separated fields."
find ... -print -quit,find the first file/directory in ... directory and quit
stat -c 'File: %n Modified: %y' t* | column -t,format the filename and modification time of files starting with t as a table
"find . \( -name '*.pdf' -or -name '*.PDF' \) -execdir sh -c 'mv -v ""$1"" ""$(echo ""$1"" | tr "" "" ""_"" | tr -d ""{()},\!'\''"" | tr ""A-Z"" ""a-z"" | sed ""s/_-_/_/g"")""' _ {} \;",find all pdf files in current folder and rename all these files
ping -c 4 www.stackoverflow.com | tail -1| awk '{print $4}' | cut -d '/' -f 2,"print the average time of 4 ping requests to ""www.stackoverflow.com"""
(chromium --user-data-dir=$(mktemp -d) &),"starts 'chromium', storing user data in a newly created temporary folder."
fg 2,gets back to the foreground a job with number 2.
find . -name '*.png' | grep -f search.txt,find all the png files in the current folder which are present in the pattern list search .txt
find . -name '*foo*',find all files/directories containing 'foo' in their names under current directory tree
"find ${INPUT_LOCATION}/ -name ""*.pdf.marker"" | xargs -I file mv file $(basename file .marker) ${OUTPUT_LOCATION}/.",find all *.pdf.marker files under ${input_location} and move them to ${output_location} also move any *.pdf files with the same name under current directory to ${output_location}
find . -print0 | xargs -0 rm,delete all the files in the current folder
"echo ""a b c d e"" | tr ' ' '\n' | tail -1","print the last space separated word from ""a b c d e"""
find / \( -type f -or -type d \) -name \*fink\* -ls,list all *fink* files/directories in entire file system
"cal 01 2015 | sed -n '1,2b;/^.\{6\} \{0,1\}\([0-9]\{1,2\}\) .*/ {s//0\1/;s/.*\([0-9]\{2\}\)$/\1/p;q;}'","prints date of first tuesday in january, 2015"
"find -iname ""*.c""","find all filenames ending with .c in the current directory tree, case insensitive"
"find . -name ""*sh*""","search the current directory tree for files containing ""sh"" in their names"
find . -type f -exec grep -li '/bin/ksh' {} \;,"list all regular files residing in the current directory tree and containing string ""/bin/ksh"""
"echo -e ""Test\rTesting\r\nTester\rTested"" | awk '{ print $0; }' | od -a","display the named characters in ""test\rtesting\r\ntester\rtested"""
perl -ne 'print ($l = $_) if (length > length($l));' filename | tail -1,"print the longest line in ""filename"""
find . -type f -name '*.txt' -exec egrep -l pattern {} \;,list all *.txt files under current directory that contains the regex 'pattern'
cat file1.txt | grep -Fvf file2.txt | grep '^Q',print only lines from 'file1.txt' that not present in 'file2.txt' and beginning with 'q'
"awk '{s+=$1} END {printf ""%.0f"", s}' mydatafile","file 'mydatafile' has a number on each line, display the sum of these numbers rounded to lowest integer."
bzip2 -c file | tee -a logfile,"archive file 'file' with bzip2 tool, store compressed data to a file 'logfile' and also print to screen"
"printf ""a\0b"" | od -tx1","dump ""a\0b"" as hexadecimal bytes"
"find . -name ""*.pl""",find all perl source code files
"find . -name ""file-containing-can't"" -exec grep ""can't"" '{}' \; -print","search files ""file-containing-can't"" in the current directory tree for the string ""can't"""
touch `cat files_to_find.txt`,"the file ""files_to_find.txt"" contains a list of filenames, create each file or update its timestamp if it exists."
echo -n 'exampleString' | md5sum,"calculate the md5 sum of ""examplestring"""
"find . -type f -iname '*.un~' | while read UNDOFILE ; do FILE=$( echo ""$UNDOFILE"" | sed -r -e 's/.un~$//' -e 's&/\.([^/]*)&/\1&' ) ; [[ -e ""$FILE"" ]] || rm ""$UNDOFILE"" ; done",delete orphan vim undo files in the current directory tree
find . -name '*.foo' -print0 | xargs -0 -n 1 somecommand,"find all files under the current directory that end in ""foo"" and, using xargs, execute somecommand once for each filename found"
find /path/to/base/dir -type f -exec chmod 644 {} +,find all files under /path/to/base/dir and change their permission to 644
"/bin/sh -c ""/bin/true $(seq 1 100000)""",run /bin/true with 1 to 100000 as arguments
tar -c -C /path/on/local/machine . | docker cp - dvc:/path/on/container,copy the file foo.sh into /path/to/cotainer of the docker container
"find . -name ""*.txt"" -newer /tmp/newerthan",find all text files in the current folder which have been modified after the file /tmp/newerthan
"find /home/jul/here -type f -iname ""*.php"" ! -path ""/home/jul/here/exclude/*"" -o -iname ""*.js"" ! -path ""/home/jul/here/exclude/*""",find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding /home/jul/here/exclude/* paths
find ~/container  -mindepth 3 -type f -exec mv {} . \;,find all regular files starting from level 3 of directory tree ~/container and move them to the current directory
find . -mtime -1 -prin,find all files in the current directory and its sub-directories that have been modified sometime in the last 24 hours.
"ipcs -a | nawk -v u=`whoami` '$5==u &&(($1==""m"" && $9==0)||($1==""s"")){print ""ipcrm -""$1,$2,"";""}' | /bin/sh",delete all shared memory and semaphores for the current user on linux
find -name *.undo -exec stat -c%s {} \; | awk '{total += $1} END {print total}',find all the files ending with undo in the current folder and calculate the total size of these files
"find . -name ""*.pdf"" -print | grep -v ""^\./pdfs/""",find all files/directories with '.pdf' extension excluding 'pdfs' directory and all of its contents
"find . -type d -execdir sh -c 'printf ""%s/%s\n"" ""$PWD"" ""$0""' {} \;",search for all the directories in the current folder and run the print command in the searched folder
find ~/ -name *.tar.gz -newer filename,search the current user's home directory and its sub-directories for any file that ends in .tar-gz and was modified after filename was last modified.
find -ipath './projects/insanewebproject'| head -n1,find files/directories under current directory that matches './projects/insanewebproject' in their paths and show the first one
find . -name 'fileA_*' -o -name 'fileB_*',"search the current working directory tree for files whose names start with ""filea_"" or ""fileb_"""
"PS4='+ $(date ""+%s.%N"")\011 '",set trace prompt to print seconds.nanoseconds
"if find /some/dir/ -maxdepth 0 -empty | read v; then echo ""Empty dir""; fi",print 'empty dir' if $some_dir is empty
"find . -regextype posix-egrep -regex "".+\.(c|cpp|h)$""","find files/directories under current directory matching the posix-egrep type regex "".+\.(c|cpp|h)$"" in their names"
"find /directory/whatever -name '*.tar.gz' -mtime +$DAYS | grep 'tar.gz' || echo ""You don't have files older than $DAYS days""",find all *.tar.gz files/directories under /directory/whatever which were modified more than $days ago and show a message if no files were found
find . -exec grep -H string-to-find {} \;,search for 'string-to-find' in all files under current directory tree and show the matched lines with their filenames
echo `date -v-1d +%F`,print full date of yesterday
"w | tr -s "" "" | cut -d"" "" -f1,5 | tail -n+3",show logged in users with idle time of each one
"basename ""some/unknown/amount/of/sub/folder/file.txt""","output ""file.txt"", omitting all containing directories ""some/unknown/amoutn/of/sub/folder/"""
git log --pretty=format: --name-only | grep .cs$ | sort | uniq -c | sort -rg | head -20,"print the first 20 of the most changed "".cs"" files in git"
basename /path/to/dir/filename.txt .txt,"output the specified path removing all containing directories and the .txt suffix, in this case ""filename""."
"find . -name ""*c"" -print0 | xargs -0 -n1 cp xyz.c",copy a file xyz.c to all directories or over all files matching the letter 'c' at the end of their names under current directory tree
pwd | xargs basename,print the base name of the current working directory
diff -x '*.foo' -x '*.bar' -x '*.baz' /destination/dir/1 /destination/dir/2,"display differences between /destination/dir/1 and /destination/dir/2 excluding files with names ending with extensions '.foo', '.bar' and '.baz'"
"date --date yesterday ""+%a %d/%m/%Y"" | read dt","read yesterday's date with format ""%a %d/%m/%y"" into variable ""dt"" in a subshell"
rsync -nvraL test/a test/dest --exclude=a/b/c/d,"perform a dry run to recursively copy ""test/a"" to ""test/dest"" excluding ""test/a/b/c/d"""
"find . -prune -name ""*.dat""  -type f -cmin +60 |xargs -i basename {} \;",display the names without extensions of all the data files in current folder which have not been changed in the last 60 mins
diff -y -W 150 file1.cf file2.cf,"display the differences between ""file1.cf"" and ""file2.cf"" side-by-side with a width of 150 characters"
"find ./ -name ""*.php"" -type f | xargs sed -i '/./,$!d' 2>&1",find all php files under current directory and delete empty lines from the beginning in those files
less -f <(php -i),page through the information of the system's php setup.
tmp=$(w | awk '{print $1}'),saves logged in users names in 'tmp' variable.
find . -size 2000k,find and show all files in the current directory tree that are exactly 2000 kb
find /home -atime +100,find all files that were not accessed in the past 100 days
"find . -type f -print0 | xargs -0 sed -i.bak -e ""s/HOGE/MOGA/""","replace the occurrences of ""hoge"" with ""moga"" once per each line of the files from the current directory tree, keeping a backup copy of every touched file"
ls -l ${0},prints long listing of ${0} file.
find . -name *.txt | egrep mystring,list *.txt files under current directory that have 'mystring' in their name
"sshpass -p ""YOUR_PASSWORD"" ssh -o StrictHostKeyChecking=no YOUR_USERNAME@SOME_SITE.COM:2400","automatically log into ""some_site.com"" on port 2400 as user ""your_username"" using password ""your_password"""
find . -name '*.bak' -type f -atime +30 -exec csh -c 'test -s $1:r && rm $1' '{}' ;,"search for all the files ending with "".bak"" in current folder which have not been accessed in the last 30 days and delete the file it it exists"
find . -type f -path '*/.svn*' -prune -o -print | perl -ne 'print $1 if m/\.([^.\/]+)$/' | sort -u,"print a sorted list of the extensions of the regular files from the current directory tree, skipping svn directories"
"cat blah | perl -en '/\xCA\xFE\xBA\xBE/ && print ""found""'","print ""found"" if ""blah"" contains the hex byte string ""\xca\xfe\xba\xbe"""
tempd=`mktemp -d`,creates temporary folder and saves path to it in a 'tempd' variable.
"find . -name ""*.fq"" | xargs -n 1 fastqc",run `fastqc' on all the fastqc files in the current directory tree
"find . -iname ""*$@*"" -or -iname "".*$@*""",display all files in the current folder ($@ contains the variables passed as argument to the function)
find -maxdepth 1 -type d,print the list of the current directory's subdirectories
tac file | rev,"print lines of 'file' reverted order, and reverted characterwise"
find . -regex '.*\.\(cpp\|h\)',display all the header files  and cpp files in the current folder
"find -maxdepth 1 -name '*.sql' -exec sed -e 's/ , );/1,1);/g' '{}' | mysql -D ootp","find all *.sql files in maximum 1 level down the current directory, process it with sed and then send the output to a mysql command"
"find . -name ""*.html"" -print | zip all-html-files.zip -@",search for all html files in current folder folder and create a zip file of all these files
read -rsp $'Press escape to continue...\n' -d $'\e',silently read standard input until the escape key is pressed ignoring backslash escapes and using the prompt $'press escape to continue...\n'
bunzip2 file.bz2,extracts a bz2 file.
"find . -type f -print -exec grep --color=auto --no-messages -nH ""search string"" ""{}"" \;","search all the regular files from the current directory tree for ""search string"""
NET_IP=`ifconfig ${NET_IF} | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'`,gets ip address of ${net_if} network interface.
find /var/log/ -mmin -60 -mmin +10,find files in the /var/log folder which were modified between 60 minutes and 10 minutes ago
find -iname '*weservice*'|xargs -I {} service {} restart,find all *weservice* (case insensitive) files under current directory and restart the services provided by them
find /usr -print,"find all files under ""/usr"""
find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' |xargs gunzip -c | grep 1234567890,"search for ""1234567890"" in every gzip file modified between 8:00 and 9:00 on 2014-04-30"
find $HOME -mtime -1,search the home directory tree for files modified less than a day ago
"find . -type f -name ""Foo*"" -exec rm {} \;",delete all files beneath the current directory that begin with the letters 'foo'.
grep YOURSTRING `find .`,"search for ""yourstring"" in all files under current directory"
"crontab -l | sed '/anm\.sh/s,^\*/5,*/10,' | crontab -","change all cron jobs running ""anm.sh"" to be run every 10 minutes instead of 5 minutes."
MKTEMP=`which mktemp`,"save full path of command ""mktemp"" to variable ""mktemp"""
sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`,error - will overwrite the executable if it's not a symlink.
find * -prune -type f -size +0c -print,show all regular/normal the files in the current folder whose size is bigger than 0 bytes excluding everything
go=$(dig -x 8.8.8.8| awk '/PTR[[:space:]]/{print $NF}'),gets domain name from dig reverse lookup and save in variable 'go'.
find ./randfiles/ -type f | wc -l,count the number of the regular files residing under and below ./randfiles/
find /mnt/raid -type d -print,show the list of directories in the /mnt/raid directory tree
"find . -type d -name ""0"" -execdir tar -cvf ~/home/directoryForTransfer/filename.tar RS* \;","find all directories named ""0"" in the current directory tree and create a single tar archive of their rs* subdirectories"
find www -name \*.html -type f -exec basename {} \;,"search for all .html files in directory ""www"" and output only the basename (without containing path) of each."
find -user takuya,find all files/directories that are owned by user 'takuya' under current directory tree
chgrp -R admin *,recursively changes group ownership of everything within a current folder to 'admin'.
unset DISPLAY,unset the display variable
find . -name '*.PNG' -exec bash -c 'git mv {} $(dirname {})/$(basename {} .PNG)48.png' \;,rename all *.png files/directories to *48.png files/directories under current directory
find -L .,display all files in current folder and follow the symbolic links and display the pointed file
find . -type d -ls,display a long listing of all the directories in current directory
find . -type d -a ! -name '.?*' -o -name '.?*' -a ! -prune,find all directories under current directory excluding  directories (along with their contents) that start with a . (dot) in their names
"find /home/ -type f -regextype posix-extended -regex "".*(string1|string2|$(hostname)).*""","find all files in ""/home/"" which contain ""string1"", ""string2"" or the host name in its filename"
"find -name '*spaces*' | while read text; do cat ""$text""; done","print out the contents of all files in the current directory tree that contain ""spaces"" in their names"
find /path/to/dir -type d -exec chmod 755 {} +,find all directories under /path/to/dir and change their permission to 755
"echo ""He likes cats, really?"" | fold -w1 | sort -u","print all distinct characters in input ""he likes cats, really?"""
"sudo ln -sTfv ""$default_java_dir"" ""/usr/lib/jvm/default-java""","force create a symbolic link as a file named ""/usr/lib/jvm/default-java"" to ""$default_java_dir"" with verbose output"
find . -name something -exec ls -l {} \;,"find all files named ""something"" in the current folder and below and run them through the ls -l command, one by one."
read -u 4 -N $char -r -s line,"silently read $char number of symbols from file descriptor 4, without backslash escaping, and store received input in 'line' variable"
"watch --interval 0.1 ""nc remote.machine CLOSED_PORT""","send a lot of packets to ""remote.machine"" on port ""closed_port"" at 0.1 second intervals"
"find /home -type f -name ""*.ext"" -print0 | while read -r -d ""$(printf ""\000"")"" -r path; do dos2unix $path $path""_new""; done","remove the ""^m"" characters from all *.ext files under /home directory and save the results to new files with _new appended in their names"
find / -user syslog,"find all files/directories in entire file system that are owned by ""syslog"" user"
rsync -a -v src dst,"archive ""src"" to ""dst"" updating files existing in ""dst"""
"rm -rf ""$(pwd -P)""/*",force remove all files and folders in the physical current working directory
/usr/bin/find ./ $*,execute /usr/bin/find with $* arguments where current directory is the first argument
find . -mtime +1,find all the files that were modified more than one day ago
find -L / -samefile path/to/foo.txt,find links to file path/to/foo.txt
find /DIR -type f -print0 | tr -dc '\0' | wc -c,"count all files under ""/dir"""
apropos disk,searches the manual page names and descriptions by 'disk' keyword.
/usr/sbin/host `hostname`,look up ip address of the current host
kill `cat /var/run/DataBaseSynchronizerClient.pid`,send term signal to process with id listed in '/var/run/databasesynchronizerclient.pid' file
"tmpfile=$(mktemp $(dirname ""$1"")/XXXXXX)","create 6-letter named temporary file in a folder path that is provided as the first positional parameter, and save the path to it in a variable 'tmpfile'"
rsync -vuar --delete-after path/subfolder/ path/,"archive ""path/subfolder"" to ""path"", skipping files that are newer at the destination."
"find downloads  -iname ""*.gif""",perform case insensitive search for *.gif files/directories under downloads directory
find /proc/$1/exe -printf '%l\n',"list complete path name to process associated with pid ""$1"""
"find /opt/chromium/src -wholename '*/.svn' -prune -o -type f -regex "".*\.\(c\|cc\|h\|js\)"" -print > CSRC.LST","search for all c, c++, header, javascript files in the folder /opt/chromium/src and exclude the search in the path ""/.svn"" and save the output list to csrc.lst"
env - scriptname,start program 'scriptname' with an empty environment.
"grep -r ""texthere"" .","prints strings with text ""texthere"" in all files recursively in a current folder."
"find . -type f -name ""*.php"" -exec grep --with-filename -c ""^abstract class "" {} \; | grep "":[^0]""",find php files with abstract classes
zcat bigfile.z | tail -n +500 | head -501,"view line 500 to line 500 + 501 in gzipped file ""bigfile.z"""
find / -perm -u+s -print,find all files in the file system with the suid bit
"find . -regextype posix-extended -regex ""[a-f0-9\-]\{36\}\.jpg""","find all posix-extended regex  ""[a-f0-9\-]\{36\}\.jpg"" files"
seq 1 10 | sort -R | tee /tmp/lst |cat <(cat /tmp/lst) <(echo '-------') | tac,"print a randomly sorted list of numbers from 1 to 10 to file ""/tmp/lst"" and outputs ""-------"" followed by the reverse list to the screen"
find / -name filename -print,find files/directories named 'filename' in the entire filesystem
"find ./ -not -path ""*/node_modules/*"" -name ""*.js"" | xargs grep keyword",search for 'keyword' in all javascript files under current directory tree excluding all paths that includes the directory 'node_modules'
find /usr/ports/ -name '*patch-*' -exec grep `printf '\15'` -l '{}' '+' | wc -l,find all files whose names contain 'patch-' in the /usr/ports directory tree and count the number of lines with ^m in them
git branch  --no-color  | grep -E '^\*' | cut -d ' ' -f 2,print git branch currently checked out in a working directory.
find . -name '*.deb' | xargs -n1 basename,"find all the files which end with "".deb"" and display their base name (strip the extension)"
find ./ -inum 1316256 -delete,find and delete the file with inode number 1316256
find /path -perm ugo+rwx,"find files/directories with exactly read,write and execute permission for all (owner, group and others) under /path"
find -maxdepth 3 -mindepth 3 -type f -iname '*.jpg' -exec rename -n 's/jpg$/jpeg/i' {} +,rename .jpg files to .jpeg in all level 2 subdirectories of the current directory
find {} -name 'upvoter-*' \( -type f -or -type l \) -maxdepth 1 -perm +111,find all executable upvoter-* files/symlinks under maximum 1 level down the {} directory
find . -type f -print0 | xargs -0 awk '/^\xEF\xBB\xBF/ {print FILENAME} {nextfile}',find utf-8 files with bom
pgrep -u `whoami` mpirun,"search for ""mpirun"" in all processes owned by the current user"
find . -perm -070 -print,look for files in the current directory tree to which the group users have full access
find /var/www/vhosts/*/httpdocs -type f -iwholename “*/wp-includes/version.php” -exec grep -H “\$wp_version =” {} \;,perform a default plesk configuration
mkdir aaa/bbb,"make directory ""aaa/bbb"""
"find ""${S}"" -name '*.so*' -exec doexe '{}' +",find all *.so files under $s directory and run doexe command with minimal invocation for those files
inotifywait -e attrib target-directory,"wait for a change in ""target-directory"" before returning"
sudo find / -name file.txt,"as root, find from / all files called ""file.txt"""
"echo -ne ""Welcome `whoami`!\n""",print a welcome message with the current user's user name
find . -path ./vendor -prune -o \( -name '*.java' -o -name '*.xml' -o -name '*.css' \)  -exec gsed -i -E 's/\t/    /' \{} \; -exec gsed -i -E 's/[[:space:]]*$//' \{} \; -exec gsed -i -E 's/\r\n/\n/' \{} \;,"remove trailing spaces, replace tabs with spaces, replace windows crlf with unix lf  in all *.java, *.xml and *.css files under current directory excluding ./vendor directory and its contents"
find /tmp -type f -name ‘*.txt*’ | sed -e ‘s/.*/\”&\”/’ |xargs -n 1 grep -l hello|sed -e ‘s/.*/\”&\”/’|xargs -n 1 rm -f,search for the word hello in all the text files in the temp folder and delete them
find . -maxdepth 1 -type f -exec ls -l {} \; | less,display a long listing of all the normal/regular files in the current folder and do not search in the sub folders
cat report.txt | grep -i error,print all lines from file 'report.txt' containing any-cased 'error' pattern
"find ./ -type f -name '*.html' | xargs sed -i '1,/sblmtitle/d'",find all the html files in the current folder and delete a line
WORKSTATION=`who -m|awk '{print $5}'|sed 's/[()]//g'`,"save ip address of your ssh session in variable ""workstation"""
find 'my key phrase' > mylist.txt,find all files/directories under 'my key phrase' directory and redirect the output to mylist.txt
find /var/www/ -name wp-config.php,find all files called wp-config.php in the /var/www directory and below
bzip2 *,compresses all files in a current folder (not recursively).
find . -type f -iname *.m4a -print,search the current directory recursively for .m4a files
"FOO=$(echo ""Hello world"" | gzip | base64)","compress ""hello world"", base64 encode, and save to variable ""foo"""
find / -name '*.tif ' –print,"search for all ""tif"" images in the entire file system"
find . -maxdepth 1 -type f -perm -uga=x,"find all regular files under current directory non-recursively that have execute permission set for all (user, group and other)"
"find . -type f -exec chmod u=rw,g=r,o=r {} \; - that's 644","find all files under current directory and set read-write permission for owner, read permission for group and other for those directories"
"source ""$( dirname ""$( which ""$0"" )"" )/lib/B""","read and execute file 'lib/b' that located in the same directory as the current script, will fail if currently running script is not in path."
shopt -s expand_aliases,enables shell option 'expand_aliases'.
"find . -path ""*.git"" -prune -o -type f -print","display all the regular files in the current folder excluding those that are present in the path ""git"""
"find . -type d -name files -exec chmod ug+rwx,o-rwx {} \;","find all directories under current directory and make them read, write, and executable for owner & group and remove read-write-execute permission for other"
"yes '' | ruby -e ""$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)""","bypass all prompts by sending return to the install script downloaded from ""https://raw.github.com/homebrew/homebrew/go/install"""
"find ""$musicdir"" -type f -print | egrep -i '\.(mp3|aif*|m4p|wav|flac)$'","find all *.mp3, *.aif*, *.m4p, *.wav, *.flac files under $musicdir directory"
df --total -BT | tail -n 1,print the grand total file system disk space usage with block sizes in units of tib
$ ls -Fltr *,"prints long listing of the current directory and top-level directories within, sorted from oldest to newest, with appended indicators."
find / -type f ! -perm 777,find all the files without permission 777
"grep ^$GROUP /etc/group | grep -o '[^:]*$' | tr ',' '\n'",search for $group at the beginning of each line in /etc/group and print the last colon (':') separated entry with comma replaced with newlines
"echo ""a"" | md5sum","calculate the md5 sum of ""a"""
tree -s,print the current directory tree with file sizes
curl -s 'http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz' | gunzip -dc | less,"download ""http://archive.ubuntu.com/ubuntu/pool/universe/s/splint/splint_3.1.2.dfsg1-2.diff.gz"", unzip it, and view the output in ""less"""
find . -size +100000 -ls,dispaly a long listig of all the files in the current folder which are bigger than 100kb
"find /foo/ -name ""*.txt"" -exec rm -v {} \;",search for all the text files in the folder /foo and delete them
find . -type f -daystart -mtime -2,find all the files that have been modified in the last 2 days
scp -qv $USER@$HOST:$SRC $DEST,"connect as ssh user specified by variable user to host whose ip address or host name is specified by host, and copy remote file specified by variable src to location on local host specified by variable dest, disabling progress info but enabling debug info."
"crontab -l | grep -v ""^#"" | awk '{print $6}'","list all active cron jobs, displaying only the command."
"find . -type f -exec sed -i ""s/1\.2\.3\.4/5.6.7.8/g"" {} \",find all regular files under current directory tree and replace all '1.2.3.4' with '5.6.7.8' in these files modiying the files in-place
find /usr/share/man/ -type f -exec ls -S {} + 2>/dev/null | head,display long listing of top ten biggest regular/normal files in the folder /usr/share/man (discard errors during search)
echo `uname -a | awk '{print $2}'`,display compter's hostname
find /basedir/ \( -iname '*company*' -and \( -iname '*.txt' -or -iname '*.html' \) \) -print0,"find all *.txt, *.html files under /basedir that match the case insensitive pattern *company* in their names"
find . -type d -exec ls -dlrt {} \; | wc --lines,count all directories under current directory
alias -s ps='screen -d -m okular',"set alias ""ps"" for command 'screen -d -m okular'"
"find . -name ""*.jar"" -exec unzip -l {} \;|grep -E ""Archive:|message_track.properties""",find all jar files in current folder and search for a file in all these jar's and display the jar names along with searched file
"find . -name ""*.log"" -exec echo {} \;",list .log files from the current directory tree
find . -name \*.c -exec grep hogehoge {} \;,"search all *.c files from the current directory tree for ""hogehoge"""
find $HOME \( -name \*txt -o -name \*html \) -print0 | xargs -0 grep -li vpn,"find files in $home ending in ""txt"" or ""html"" and case insensitive search for the word ""vpn"""
scp -vp me@server:/location/files\*,"pass a wildcard to scp by escaping it: copy all files with names starting with ""files"" in directory ""/location"" on host ""server"" to current directory on local machine, displaying debug info and preserving timestamps and permissions on copied files."
dig -x 72.51.34.34,print reverse lookup for ip address 72.51.34.34
du -B1 --apparent-size /tmp/foo.txt,print apparent size rather than disk usage
find . ! -size 0k,search for non-empty files
od -xc filename,"dump ""filename"" as 2 byte wide hexadecimal and printable characters"
find . | grep favicon\.ico | xargs -n 1 cp -f /root/favicon.ico,replaces any occurences of '*favicon.ico*' in any subfolder with file '/root/favicon.ico'.
"cat numbers.txt | php -r ""echo array_sum(explode(PHP_EOL, stream_get_contents(STDIN)));""","mathematically sum all numbers in ""numbers.txt"""
find . -type f -exec curl --user user:pass --ftp-create-dirs -T {} https://PATH_TO_NEXUS/{} \;,find all files under current directory and upload them to https://path_to_nexus/
find data/ -print0 | tar -T - --null --create -f archive.tar,archive all files/directories under data/ into archive.tar
find . -name aaa -print,search file aaa from current direcoty downwards and print it .
grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n,"from the list of words (one per line) in list1.txt, display the number of occurrences of this word in list2.txt and sort the results from highest to lowest count."
"find . -name ""*.txt"" -printf ""%T@ %p\n"" | sort | tail -1",print the newest *.txt file under current directory with timestamp and path
chown amzadm.root -R /usr/lib/python2.6/site-packages/,"recursively change owner to ""amzadm"" and group to ""root"" of all files in ""/usr/lib/python2.6/site-packages/"""
sort file1.txt file2.txt file2.txt | uniq -u,"print each line in ""file1.txt"" that is not found in ""file2.txt"""
kill -15 $( lsof -i:6000 -t ),send sigterm (signal 15) to all processes using tcp port 6000 on the system.
"basedir=$(dirname ""$(echo ""$0"" | sed -e 's,\\,/,g')"")","takes folder name of file $0, changes backslashes to forward ones and saves result in $basedir variable."
find . -maxdepth 1 -name '[!.]*' -printf 'Name: %16f Size: %6s\n',display non-hidden files in the current directory with the given output format
find . -path './media' -prune -o -path './images' -prune -o -path './backups' -prune -o -print,"show all directories in the current folder excluding those that are present only in the paths ./media, ./images and ./backups"
find . -name 'cache*' -depth -exec rm {} \;,find all the files in the current folder which have the word cache in them and do not search in the sub directories of the folder.
yes | sudo rpm -Uvh https://mirror.webtatic.com/yum/el6/latest.rpm,"automatically send ""y"" to ""sudo rpm -uvh https://mirror.webtatic.com/yum/el6/latest.rpm"" to automate installation"
sudo chown root:wheel bin,"change owner to ""root"" and group to ""wheel"" of ""bin"""
find /path/to/directory/* -maxdepth 0 -type d -exec basename -a {} +,print the names of the directories from the paths expanded by the glob pattern /path/to/directory/*
find . -name omit-directory -prune -o -type f  -print,search the current directory tree for regular files omitting directory `omit-directory'
find /data -type f -perm 400 -print,find all 400 permission files under /data directory
find . -type f -not -name “.*” -print | xargs sed -i ‘s/foo/bar/g’,"replace ""foo"" with ""bar"" in all files in the current directory tree except hidden ones"
find . -type d -exec ./script.sh {} \;,find all directories under current directory and run ./script.sh for each of them
"mkdir -p ""$FINALPATH""","make directory and parents as needed to ""$finalpath"""
mkdir bravo_dir alpha_dir,"make directories ""bravo_dir"" and ""alpha_dir"""
"find . -maxdepth 1 -type d \( ! -name . \) -exec bash -c ""cd '{}' && pwd"" \;","search for all the directories in the current folder, do not search in sub folders and run the 'pwd' command in all these directories"
"ping -c1 1199092913 | head -n1 | grep -Eow ""[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+""","convert ""1199092913"" to dotted decimal ipv4 address"
find . | grep -vf file.lst,"find all the files in the current folder and display those that are not present in the list ""file.lst"""
"FOLDERS=$(find $PWD -type d | paste -d, -s)","save all directories under the current directory as a comma separated list in variable ""folders"""
find . -name something | xargs -0 ls,"find all files named ""something"" in the current folder and below and run them through the ls -l command in a one batch."
"find . -name ""articles.jpg""",find all files/directories named 'articles.jpg' under current directory tree
gunzip -c -d $ip | pax -r,"unzip ""$ip"" as input to ""pax -r"""
tar -c foo.sh | docker exec -i theDockerContainer /bin/tar -C /tmp -x,copy the file foo.sh into /tmp of the docker container
"find . -name ""*.mov""",find all *.mov files under current directory
"echo ""dirname/readlink: $(dirname $(readlink -f $0))""",print the directory name of the full real path to the current script
find . -name '*.zip' -exec unzip '{}' ';',unzip all *.zip files under current directory
"find . -name ""file*"" -print0 | xargs -0 perl -ple ''",print the contents of all file* files under current directory with white space safety in file names
find . -mtime -3 -exec rm -rf {} \;,force delete all the files that have been modified in the last 3 days
"find . -iname ""*filename*""",perform a case insensitive search for *filename* files/directories under current directory tree
grep -rnw '/path/' -e 'pattern',"finds recursively all files in '/path/' that contain 'pattern', and prints matched strings with string number and file name."
tar -zcvf compressFileName.tar.gz folderToCompress,"create a compressed archive ""compressfilename.tar.gz"" with verbose output"
find . ( -name '*.bak' -o -name *.backup ) -type f -atime +30 -exec csh -c 'if ( -f $1:r ) rm $1' '{}' ;,"find all the files in current folder which end with "".bak"" or "".backup"" which have not been accessed in the last 30 days and delete the files if they exist"
rsync -R src/prog.js images/icon.jpg /tmp/package,"copy ""src/prog.js"" and ""images/icon.jpg"" to ""/tmp/package"" keeping relative path names"
find -mmin -60 -exec ls -l {} \;,"find all the files in the current directory and sub-directories, that were edited within the last 1 hour and execute the list command with long listing format"
"find /users/tom -name ""*.pl""",find *.pl files/directories under /users/tom
"find . -type f -name ""*.pl"" -print0","find all the perl files in the current folder, print0 is used to handle files with new lines in their names or only spaces"
find /path/to/dir/ -type f -print0 | xargs -0 chmod 644,change permissions to 644 for all regular files under the /path/to/dir/ tree
git ls-files | xargs cat | wc -l,count the number of lines in the current git repository
find ./ -type f -print | xargs    -l56 -I {} mv -f {} ./newdir,move all regular files under current directory to ./newdir
"find . -name ""*.py"" -type f -exec sh -c 'grep ""something"" <""$0"" >""$0.txt""' {} \;",search for a pattern in all the python files in the current folder. and save the output to a txt file
rsync -avR foo/bar/baz.c remote:/tmp/,"archive ""foo/bar/baz.c"" to ""remote:/tmp/"" preserving the relative path of ""foo/bar/baz.c"""
"script -c ""./a"" /dev/null | tee output.txt","print output of 'script -c ""./a"" /dev/null' to standard output and ""output.txt"""
"find . -name ""*.txt"" | xargs bash -c '</dev/tty vim ""$@""' ignoreme",find all .txt files in the current directory tree and edit them with `vim'
find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\+$//' {} \+,remove trailing whitespaces in .txt files from the current directory tree
find /mail -type f | cpio -pvdmB /home/username,"copy all files in ""/mail"" to ""/home/username"" preserving the directory hierarchy and modification times"
find ~/ -maxdepth 3 -name teste.tex,search the current directory and two levels below for file `teste.tex'
find . |xargs grep abc | sed 's/abc/xyz/g',"print the paths of all files in the current directory tree that contain ""abc"" replacing ""abc"" with ""xyz"""
"find . -name ""*.sh"" -print0 | xargs -0 -I file mv file ~/back.scripts",find all .sh files in or below the current directory and move them to folder ~/back.scripts
find . -maxdepth 1 -type d -print0 | xargs -0 ls -d,list subdirectories in the current directory
find . -exec ls -ld {} \;,"find list of all files with file permission , link , owner , group , reation time , size , file name"
find . -type f -printf '%p %s\n'  | awk '{sum+=$NF}END{print sum}',get the total sizes of all files under current directory
df,print file system disk space usage
find . -name *conf*,find all *conf* files recursively under current directory
screen -r 'name',assign a name when starting a screen session
dig +short -f - | uniq,request ip address for each domain name received on the command input
find /path/to/directory -type f -mtime +30 -exec chmod 644 {} +,change permissions of files older than 30 days
"diff -rq /dir1 /dir2 | grep -E ""^Only in /dir1.*"" | sed -n 's/://p' | awk '{print $3""/""$4}' xargs -I {} rm -r {}",remove all the files and directories that are in /dir1 but not in /dir2.
"find MyApp.app -name Headers -type d -exec rm -rf ""{}"" \;",search directory tree `myapp.app' for directories whose name is 'headers' and delete them
"while read line ; do cp ""$line"" ~/bar ; done < <(find . | grep foo)",find all files/directories under current directory with 'foo' in their paths and copy them to ~/bar
sudo mv edited_blah.tmp /etc/blah,"rename file ""edited_blah.tmp"" to ""/etc/blah"""
"echo ""1\n2\n3\n4\n5"" | paste -s -d, /dev/stdin","replace each newline in input ""1\n2\n3\n4\n5"" with a comma"
dig @ns2.newnameserver domain. a,print a record for domain 'domain.' from 'ns2.newnameserver' nameserver
su -c dnf install glibc.i686,"run command ""dnf install glibc.i686"" as user root"
mv tobecopied/tobeexcluded .,"move ""tobecopied/tobeexcluded"" to the current directory"
find / -mmin -30 -ls,find all files recursively starting from / that have been modified in the past 30 minutes and list them
zcat input.txt.gz | command -,"send contents of ""input.txt.gz"" to ""command"" on stdin"
ls -d -1 $PWD/**/*/* | nl,print the absolute path of third-level files under the current directory tree and number the output
"find . -name ""*.java""",find all *.java files under current directory
"grep --exclude=*.o -rnw '/path/to/somewhere/' -e ""pattern""","finds recursively all files not having extension .o in '/path/' that contain 'pattern', and prints matched strings with string number and file name."
"echo ""$PATH"" | rev | cut -d""/"" -f1 | rev",print onlt last slash-separated field from $path value
"grep -Ri ""pattern"" * | awk '{if($1 != ""Binary"") print $0}'","recursively search through all files in all directories for any lines containing ""pattern"" and whose second word is not ""binary""."
find .. -exec cp -t ~/foo/bar -- {} +,find all files/directories under .. directory and copy them to ~/foo/bar
"find temp/images/ -type f -iname Thumbs.db | while read FILE ; do rm ""${FILE}"" ; done",remove all thumbs.db (case insensitive)  files under temp/images directory
"find / -name ""*.txt""",find all *.txt files/directories in entire file system
tar -N '2014-02-01 18:00:00' -jcvf archive.tar.bz2 files,"create a compressed archive with files newer than 1st of january 2014, 18:00:00."
find . -name '*.rb' | xargs -I{} sed -i '' 's/[[:space:]]*$//g' {},remove trailing white spaces from all *.rb files under current directory
diff -rq /path/to/folder1 /path/to/folder2,"print summary of new/missing files, and which files differ between /path/to/folder1 and /path/to/folder2, sorted alphabetically."
"cat `find . -name ""*.php""` | wc -l",prints total number of lines of all *.php files in a current folder and subfolders.
echo 'ee' | tee >(foo),"write ""ee"" to standard output and as input to command ""foo"""
"echo ""`hostname -i` file.txt"" | xargs myscript.rb","execute ""myscript.rb"" with the first argument as the current host name and the second ""file.txt"""
find /path/* -maxdepth 0 -type d -exec sudo tar -zcpvf {}.tar.gz {} \;,"archive all directories in /path/to/directory/* (only command line arguments, no sub-directories) to files with .tar.gz extension transforming the full paths to relative paths"
find . -type d -print|sed 's@^@/usr/project/@'|xargs mkdir,"create a copy of the current working directory structure in the usr/project directory,"
find . -perm -664,find all 664 permission files/drectories under current directory tree
find /path/to/look/in/ -type d -name '.texturedata' -exec chmod 000 {} \; -prune,change permission to 000 of all directories named '.texturedata' under '/path/to/look/in/' directory tree
mkdir /etc/cron.15sec,"make directory ""/etc/cron.15sec"""
yes | cat | more,"continuously send ""y"" as input to ""cat"" which outputs to ""more"""
"find `pwd` -iname "".*"" -type f > all-hidden-files.txt",list all hidden files under present working directory and redirect the list to all-hidden-files.txt
find /tmp -size +10k -size -20k,find files under /tmp that are larger than 10kb and smaller than 20kb
find ${userdir}/${i}/incoming -mtime +2 -type f -ls,find files which are more than 2 days old under  ${userdir}/${i}/incoming directory
find . -type f -exec file {} \; | grep -o -P '^.+: \w+ image',"find all files under current directory whose file type description contains ""image"", display only path to each file."
find /var -regex '.*/tmp/.*[0-9]*.file',search /var for files matching regular expression '.*/tmp/.*[0-9]*.file'
find folder1 folder2 -iname '*.txt' -print0 | du --files0-from - -c -s | tail -1,get the disk space used by all *.txt (case insensitive) files/directories under folder 1 and folder2
find -mmin 2 -print,find all files in the current folder that are modified exactly 2 minutes ago
"echo -e ""a\nb\ncccccccccccc\nd"" | paste - - | column -t","print ""a\nb\ncccccccccccc\nd"" as two columns and neatly format into a table"
find . -perm 777 -print,find all files/directories with 777 permission under current directory tree
find $FULFILLMENT -ls,list all files under and below the directory given as variable $fulfillment
alias mkdir=¨mkdir -p¨,"set alias ""mkdir"" for command ¨mkdir -p¨"
"ping google.com | awk '{ sent=NR-1; received+=/^.*(time=.+ ms).*$/; loss=0; } { if (sent>0) loss=100-((received/sent)*100) } { printf ""sent:%d received:%d loss:%d%%\n"", sent, received, loss }'","print the number of packets sent, received, and the percentage lost for each ping request to ""google.com"""
seq 10 | sed 'N;s/\n/ /',print numbers from 1 to 10 with 2 values per line
rsync --partial --progress --rsh=ssh local_file user@host:remote_file,"copy ""local_file"" to ""user@host:remote_file"" via ssh protocol, saving partially transferred files, and showing progress"
"echo `basename ""$filename""`","grab the output of ""basename"" (the last slash-separated section of variable ""filename"") and echo it to stdout, which basename would do by default anyway."
find / -size -50c,find all files that are less than 50 bytes
"find ./ -name ""foo.mp4"" -printf ""%h\n""",find all foo.mp4 files in the current directory tree and print the pathnames of their parent directories
"find ""$source_dir"" -name *.$input_file_type",find all *.$input_file_type files/directories under $source_dir
find /tmp /var/tmp -size +30M -mtime 31 -print0 | xargs -0 ls -l,list files larger than 10mb under /var/log /tmp that haven't changed in a month
"find . -type f -fprintf /tmp/files.txt ""%i,%b,%M,%n,%u,%g,%s,%CY-%Cm-%Cd %CT,%p\n""","list all files/directories under current directory with their inode numbers, disk space, permission, number of hard links, user name, group name, size, status change time in y-m-d format and name filed,  then write the outptut to /tmp/files.txt"
find /home/myhome/data/ARCHIVE/. -name . -o -type d -prune -o -name '*201512*' -print | xargs -i mv {} /home/myhome/ARCHIVE/TempFolder/.,"find ""*201512*"" regular files in /home/myhome/data/archive/ and move them to /home/myhome/archive/tempfolder/"
set | grep HIST,"search for environmental variables with ""hist"" in their name or contents"
ssh -x user@server,ssh in server 'server' as user 'user' with x11 forwarding disabled
dig +short -f list,print short dns lookup for each domain name in a file 'list'
"find /dir/path/look/up -name ""dir-name-here"" -print",find files in /dir/path/look/up directory that names are dir-name-here
"find . -maxdepth 1 -type d | xargs -I ""{x}"" mkdir ""{x}""/new-dir","make a new directory ""new-dir"" in every directory in the current working directory non-recursively"
cd $(find . -name Subscription.java -printf '%h\n'),find all subscription.java files/directories under current directory and enter into the parent directory of the first one found
find / -type d -name httpdocs 2> /dev/null,find all directories by the name `httpdocs' on the system
"join -t, file1 file2 | awk -F, 'BEGIN{OFS="",""} {if ($3==$8 && $6==$9 && $7==$10) print $1,$2,$3,$4,$6,$7}'","file1 and file2 contain lines of comma-separated information, for each line whose first field matches, and where 3rd field of file1 matches 2nd field of file2, 6th field of file1 matches 3rd field of file2, and 7th field of file1 matches 4th field of file2, output: fields 1, 2, 3, 4, 6, and 7 of file1."
find . -type f -name YourProgramName -execdir pwd \;,"find all ""yourprogramname"" regular files in the current directory tree and print the full paths to the directories containing them"
find . -name *.jpg | uniq -u,find all *.jpg files under current directory and print only unique names
find . -regextype posix-egrep -regex '\./[a-f0-9\-]{36}\.jpg',use regex with find command
SUM=$(tree | md5sum),calculate the md5 checksum of the current directory structure and save it in variable sum
find /path/to/files* -mtime +2 -delete,delete all files/directories older than 48 hours in /path/to/files* paths
find /home/calvin/ -mmin -45,find all the files in the folder .home/calvin which have been modified in th last 45 minutes
"find . -type f | grep -P ""\.dll$|\.exe$""",find recursively all regular files in the current directory tree ending in .dll or .exe
find . -maxdepth 1 -type d -name '__temp__*' -print0 | xargs -0 rm -rf,delete all __temp__* directories under maximum 1 level down the current directory tree
find . -iname '*something*',find all files/directories containing the case insensitive string something' in their names under current directory tree
"find . -name ""*.pl"" | xargs tar -zcf pl.tar.gz",find and compress all .pl files in the current directory tree
find ~/ [опция_поиска] [значение] [опция_действия],"find all files in the current user's home directory and its sub-directories with the optional constraints of опция_поиска, значение and/or опция_действия."
"date -j -f ""%a %b %d %H:%M:%S %Y %z"" ""Sat Aug 09 13:37:14 2014 +1100""","reformat date ""sat aug 09 13:37:14 2014 +1100"" according to format string ""%a %b %d %h:%m:%s %y %z"""
"wc -l `find . -name ""*.php""`",counts lines in each *.php file.
find . -amin -1,find all files under current directory that are read less than 1 minute ago
read -r -d $'\0' f2,"read standard input until a null character is found and save the result in variable ""f2"""
find . -name 'm?' -type d -exec ./fixmbox {} +,find all m? directories under current directory and run ./fixmbox with all of the directory paths as its arguments
"find . -type f -name ""*.java"" | xargs>    tar cvf myfile.tar",find *.java files under current directory and compress them to myfile.tar
find . \( -name '*.svn*' -prune  -o ! -name '*.html' \) | xargs -d '\n' grep -Hd skip 'SearchString',"search all files in the current directory tree for ""searchstring"", ignoring .html files and skipping .svn directories"
chgrp Workers shared,changes group ownership of 'shared' to 'workers'.
find . -type f -name Makefile -print -exec sed -n '235p' {} \;,find all makefile's in the current directory tree and print the line 235 of each of them
find -name 'index.*',find all index.* files/directories under current directory
yum info zsh,displays details about package 'zsh'.
rm `find . -name \*.pyc`,recursively removes all files like '*.pyc' in a current folder.
"find . -type f -exec bash -c 'myfile ""{}""'  \;","execute ""myfile"" on all regular files from the current directory tree"
"git whatchanged --all | \grep ""\.\.\."" | cut -d' ' -f5- | cut -f2- | sort | uniq -c | sort",print a list of most often changed files in git
find . -name \*.php -type f -exec grep -Hn '$test' {} \;,search for files only that end with .php and look for the string $test inside those files
find /path/to/someDirectory -type d -print0 | xargs -0 sudo chmod 755,change permissions to 644 for all directories under and below /path/to/somedirectory/
"find . -type f -exec sh -c 'printf ""%s %s \n"" ""$(ls -l $1)"" ""$(md5sum  $1)""' '' '{}' '{}' \; | awk '{$8=""""; print $0}'",display a long listing of all the regular/normal files in the current folder along with their md5sum
"find /store/01 -name ""*.fits""","search for all the files ending with ""fits"" in the folder ""/store/01"""
find /tmp -name core -type f -print0 | xargs -0 /bin/rm -f,find files named 'core' in or below the directory /tmp and delete them
"find . -regextype posix-ergep -regex "".*(rb|js)$"" -exec grep -l matchNameHere {} \;","search the current directory tree for files whose names end in ""rb"" or ""js"" and which contain string ""matchnamehere"""
"echo ""bla@some.com;john@home.com"" | awk -F';' '{print $1,$2}'","extract two semicolon-separated fields from specified strings, output them separated by a space."
"echo ""$b"" | grep -o ""[$a]"" | tr -d '\n'",print the characters in $b that match with any character in $a without printing any newline
comm -23 <(sort set1) <(sort set2),"extract any line in ""set1"" which does not appear in ""set2"""
find . -name test -delete,"remove all files and directories called ""test"" from the current directory tree"
ls | read var,"pipe the output of ls into ""read var"" in its separate process"
find . -name '*.code' -print0 | xargs -0 grep -H 'pattern',search the *.code files from the current directory tree for string 'pattern'
find . -name 'some_text_2014.08.19*',find all files/directories under current directory tree whose names start with 'some_text_2014.08.19'
"find ""$sourceDir"" -type d | sed -e ""s?$sourceDir?$targetDir?"" | xargs mkdir -p","copy directory hierarchy from ""$sourcedir"" to ""$targetdir"""
"find FFF -name ""*.txt"" -exec md5sum '{}' \; > $TMP_ORI","find all text files in the folder ""fff"" and find the md5sum for them and save the output to a file"
find ~/ -daystart -type f -mtime 1,"display all the regular/normal files in the home folder that have been modified in the last 1 day (from the start of day ie, from 00:00 )"
cd `dirname $(which python)`,"change to the directory of the executable ""python"""
find . -type f -name '*.java' -ls | sort -k +7 -r,display a long listing of all the java files in the current folder in sorted order
find /data -type f -perm 400 -print | xargs chmod 755,find all 400 permission files under /data directory and change their permission to 755
find . -name ”*.old” -print,find all files/directories under current directory tree with '.old' extension
yourcommand | tee output.txt,"write output of ""yourcommand"" to standard output and to ""output.txt"""
"zcat /var/log/fail2ban.log* | gawk  '/.*Ban.*/  {print $7};' | sort | uniq -c | sort | gawk '{ ""geoiplookup "" $2 ""| cut -f2 -d: "" | getline geoip; print $2 ""\t\t"" $1 "" "" geoip}'",print all the banned ips from your server along with their origin (country) using the geoip-bin package
find tmp -maxdepth 1 -name '*.mp3' -maxdepth 1 | xargs rm,remove all tmp/*.mp3 files
head -$(gcalctool -s $(cat file | wc -l)-N) file.txt,removes last n lines from file.txt
find -empty,find the empty directories and files under current directory
find /home/calvin/ -maxdepth 2  -name “*.txt”,find all the text files in the folder /home/calvin and do not search beyond 2 levels
find $HOME -type f -atime +30 -size 100k,find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.
git status | head -1 | cut -d ' ' -f 3,print git branch currently checked out in a working directory.
"unset $(echo ""$a"" | /usr/bin/cut -d = -f 1)",unsets environment variable represented as var=value by $a.
"find -printf '""%h/%f"" '",print the path names of all files and directories in the current directory tree
"find . -name '*.js' -or -name '*.php' | xargs wc -l | grep 'total'  | awk '{ SUM += $1; print $1} END { print ""Total text lines in PHP and JS"",SUM }'",counts total lines in php and js files.
./hw | sleep 1000,run a script in 1000 seconds
"find . -name ""*.txt"" -exec ls -la {} +",display long listing of all the text files in the current folder (plus at the end executes quickly by sending bulk data as input to the command in exec)
"find . ! -name ""node_modules"" -type d","display all the directories in the current folder excluding those that have the name ""node_modules"""
find /tmp/ -ctime +15 -type f -exec rm {} \;,remove regular files changed more than 15 days ago from the /tmp directory tree
curl yahoo.com --silent | wc -l,counts number of lines returned by curl request.
"echo $(basename ""$1"")","output the base name of first argument to script or function, that is the part following the last slash."
find / -type f -name httpd.log,"find the file ""httpd.log"" in the entire file system"
"find /tmp/ -ctime -1 -name 'x*' -exec sh -c '   exec mv ""$@"" ~/play/' sh {} +",find x* files/directories under /tmp directory whose status was changed less than 1 day ago and move them to ~/play
find . -type f -iname '*.mp3' -exec rename '/ /_/'  {} \;,this find command substitute space with underscore in the file name replaces space in all the *.mp3 files with _
"find . -name ""*.txt"" -print 2>/dev/null",find all *.txt files/directories under current directory discarding errors
find -L . -type f \( -perm -u=x -o -perm -g=x -o -perm -o=x \),find regular files in the current directory tree that have any executable bits set
"find asia emea -type f -name ""*gz""",find all *gz files under asia and emea directory
"find / -maxdepth 1 -xdev -type f -exec grep -Zli ""stringtofind"" {} +",find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions
kill $!,send sigterm signal to last process sent to background by the current shell.
"find /dev -user ""peter"" |more","display all the files in the folder ""/dev"" which belong to the user ""peter"""
cd $(dirname $(which ssh));,changes to the directory where 'ssh' executable is located.
progam.sh 2>&1 | tee -a log,"write the standard output and error of ""program.sh"" to console and append to ""log"""
gunzip -l file.zip,"print the compressed size, uncompressed size, compression ratio, and uncompressed filename of ""file.zip"""
"find . -name ""*.php"" | pv --line-mode | xargs chmod 755","change permissions of all files ending "".php"" under the current directory to 755 with a progress bar based on lines"
find . -print0 | xargs -0 COMMAND,execute command for all files and directories under the current directory tree
"kill $(ps -A -ostat,ppid | awk '/[zZ]/{print $2}')","clean up all zombie processes by sending sigterm signal to their parent process, which requests them to terminate."
"find $1 -name ""$2"" -exec grep -Hn ""$3"" {} \;",find all $2 files in $1 path and search for the regex expanded by $3 in those files
"find . -type f -name ""*.bak"" -exec rm -i {} \;",find all the backup files in the current folder and delete them after user confirmation
"find . -name ""process.txt""","search for the file ""process.txt"" in the current directory"
screen -Rd,start new screen session or to take over the most recent detached one
\w,displays info about users currently in system.
find . -maxdepth 1 -type d \( ! -name . \),display all the files  in the current folder excluding the current folder and do not search in the sub directories
find . -type f -printf '%s %p\n',list all files under current directory with their sizes and paths
find . -maxdepth 2 -size +100000 -exec bzip2 {} \;,create a zip of all the files in the current folder which are bigger than 100kb and do not go more than 2 levels during search
find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr,"search the .c files residing in the lib/ directory tree for lines beginning with ""pyerr"""
find / -name '*.py' -exec cat \{} \; | tqdm --unit loc --unit_scale True | wc -l,"counts total number of all '*.py' files beginning from root folder, and shows 'tqdm' progress bar."
"find / -maxdepth 1 -xdev -type f -exec grep -Zli ""stringtofind"" {} + |  while IFS= read -r -d $'\0' file; do sed '/./d' ""$file""; done","find regular files under / that contain ""stringtofind"" and clear out their contents"
grep ds1337 /lib/modules/`uname -r`/modules.alias,"look for any instance of ""ds1337"" in the modules.alias file matching current kernel release"
"find . -name ""*.c"" | xargs rm -rf",remove all files with the .c extension in the current directory tree
find -xtype l,find all broken symlinks under current directory
"find ""$1"" -type f -exec md5sum {} \; > ""$1""__checksums.md5","find all files under $1, calculate their md5sums and redirect the results to $1__checksums.md5"
find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;,"copy file header.shtml to directories dir1, dir2, dir3, and dir4"
find . -name 'Subscription.java',search the current directory tree for files named 'subscription.java'
bg %1 [puts the job in the background],puts the job 1 in the background.
"find / -perm 777 -iname ""filename""","search for files whose name is ""filename"" and whose permissions are 777"
"mv ""$(readlink -f dirln)"" dir2","rename absolute path of symbolic link ""dirln"" to ""dir2"""
ssh user@remote 'bash -s' < /path/to/commands-inc.sh,"execute all commands in ""/path/to/commands-inc.sh"" on server ""remote"" as user ""user"""
find . -type d -regextype posix-egrep -regex '\./processor[[:digit:]]*/10\.(1|2)',display all the directories in the current folder which start with processor followed by digit and ends with .1 or .2
"awk 'BEGIN{srand();} {printf ""%06d %s\n"", rand()*1000000, $0;}' | sort -n | cut -c8-",shuffles strings of text received by 'awk' command on the input.
"find ./C -name ""*.c"" | xargs -n1  echo cp xyz.c",print 'cp' commands that would copy a file xyz.c to all the files with '.c' extension present in the ./c directory and below
find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \;,search for first match of the regex 're' in all *.coffee files under current directory
find . -type f -perm 777 -exec chmod 755 {} \;,search the current directory and all subdirectories for files that have 777 permissions and the permissions to 755
"perl -pi -e 'BEGIN { print ""A new line"" }' $(find . -name '*.py')","add ""a new line"" on top of each *.py files under current directory"
shred my-existing-file,overwrite a file 'my-existing-file' with random data to hide its content
find var/log/ -iname anaconda.* | xargs tar -cvf file1.tar,search for files/directories with the case insensitive pattern anaconda.* in var/log directory and create an archive (file1.tar) of the last block of files sent to xargs
"find . -iname ""*notes*"" -print0 | xargs -I{} -0 grep -i mysql ""{}""","search for the word ""mysql"" in all the files in the current containing the word ""notes"" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names"
find . -mtime -30 -print,get all the files that have been modified within the last 30 days
find . -type f -print0 | egrep -iazZ '(\.txt|\.html?)$' | grep -vazZ 'index.html' | xargs -n 1 -0 grep -c -Hi elevator | egrep -v ':[0123]$',find files in current directory and grep text and html files - but not index.html and report things that contain the word 'elevator' in four or more lines
find {} -type f -depth 1 -perm +0111 | sort -r,find all executable files under {} and reverse sort them
"find /home/mywebsite -type f -name ""foobar.txt""","search for the file ""foobar.txt"" in the folder ""/home/mywebsite"""
rsync --sparse sparse-1 sparse-1-copy,"copy a large sparse file ""sparse-1"" to ""sparse-1-copy"""
find /var/log -daystart -mtime 0,find all files/directories under '/var/log' directory tree that bave been modified today (from the start of the day)
find . -iname foo,"search for all files and directories named foo, foo, or any other combination of uppercase and lowercase characters beneath the current directory."
"df ""$filename"" | awk 'NR==1 {next} {print $6; exit}'",print mount point of the file system containing $filename.
su - jenkins,switch user to jenkins
find //path/to/source/Directory -type f -exec md5sum {} + | awk '{print $0}' > Output.txt,calculate the md5 checksums of all files from directory tree //path/to/source/directory and save them as output.txt
find . -user 0 -perm -4000 -print,find all files that are set user id to root
find / -type d  -perm -1000  -exec ls -ld {} \; 2> /dev/null,list all directories starting from root that have sticky bit set
"find . -regex ""./[a-f0-9\-]\{36\}\.jpg""","find all regex ""./[a-f0-9\-]\{36\}\.jpg"" files"
mkdir /etc/cron.5minute,"make directory ""/etc/cron.5minute"""
find /apps/audit -perm -7 -print | xargs chmod o‑w,find all files/directories with 777 permission under '/apps/audit' and strip write permission for 'other' from them
"find /home -type f -name ""*.ext"" -exec sed -i -e ""s/\r$//g"" {} \;","remove the ""^m"" characters from all *.ext files under /home directory"
find /usr/bin -type f -atime +20,find all regular files in /usr/bin accessed more than 20 days ago
echo -en '111 22 3\n4 555 66\n' | tr ' ' '\t',print '111 22 3\n4 555 66\n' by replacing the spaces with tabs and '\n' with newlines
"find . -type d -print | sed -e 's/^/""/' -e 's/$/""/' | xargs chmod 755",change permissions to 755 for all subdirectories of the current directory
find . -type l -xtype l,find all broken symlinks under current directory
"find . -name ""new*.sh"" -exec rm -f '{}' \;","remove all .sh files in the current directory tree whose names begin with ""new"""
find .  -type f  -name '*.txt' -exec wc -c {} \; | awk '{total += $1} END{print total}',find & calculate total number of caractor  in all .txt file from current directory
find /home/david -mmin -10 -name '*.c',"search for all the "".c"" files in the folder ""/home/david"" which have been modified in the last 10 minutes"
"find . \! -name ""*.Z"" -exec compress -f {} \;",compress files excluding *.z files
find . -name '*.png' | grep -f <(sed s/^/[0-9]_[0-9]_[0-9]_/ search.txt),"find all the png files in current folder which are present in the pattern list file ""search.txt"""
find /home -nouser -print,find all files/directories that do not belong to any user under '/home' directory tree
find /home -xdev -samefile file1 | xargs ls -l,give the location of every hard link to file1 in the /home directory tree
"find . ! -path  ""*.git*"" -type f -print","display all the files in the current folder excluding those which are in the path of "".git"""
find . -newer CompareFile -print,find files and directories newer than comparefile under current directory
find /opt/lampp/htdocs -type d -exec chmod 711 {} \;,"set permissions of all directories under ""/opt/lampp/htdocs"" to 711"
